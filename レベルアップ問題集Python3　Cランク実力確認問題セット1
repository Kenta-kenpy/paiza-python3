# 電話番号
A = input()
B = input()
C = input()

print(f"{A}-{B}-{C}")
'''
この問題では、1 行に 1 つずつ、合計 3 つの入力が与えられます。
入力の受け取り方は以下の通りです。
入力の受け取り方
空白や改行まで文字列を受け取る方法 (Pythonの場合):
Pythonでは、input() 関数を使って 1 行ずつ文字列として入力を受け取ります。
'''

# 気象観測
N = int(input())

if N < 2:
    print("clear")
elif N < 9:
    print("sunny")
else:
    print("cloudy")
'''
以下の順で処理をおこないます。
整数 N を標準入力から受け取る
N の値に応じて以下の処理を行う
N が 2 未満の場合、"clear" を出力
N が 2 以上 8 以下の場合、"sunny" を出力
N が 9 または 10 の場合、"cloudy" を出力
制約により N は 0 以上 10 以下の整数であることが確定しているため、C++ ではelse if、python3 ではelifを使用することで、簡潔なコードで条件分岐を実装することができます。
'''

# 荷物検査
N, M = map(int, input().split(' '))
sum = 0
for i in range(0, N):
    A = int(input())
    sum += A

if sum <= M:
    print("OK")
else:
    print("NG")
'''
以下の順で処理をおこないます。
整数 N, M を標準入力から受け取る
A_i の合計値を管理する変数を設定する
ループ処理を用いて A_i を標準入力から受け取り、A_i の合計値を管理する変数に加える
A_i の合計値と M を比較し、以下の処理を行う
A_i の合計値が M 以下の場合、"OK" を出力
A_i の合計値が M より大きい場合、"NG" を出力
'''

# 背の順
N = int(input())
height_name = []

for _ in range(N):
    height, name = input().split(' ')
    height_name.append((int(height), name))

height_name.sort(reverse=True)

for _, name in height_name:
    print(name)
'''
この問題では身長をソートする際に名前も並べ替える必要があります。
多くの言語では、二次元以上の配列にソートを適用した場合、各配列の先頭の要素でソートされるという仕様が存在します。
そのため、身長→名前の順序で配列に格納した後、二次元配列を逆順ソートすることで解を求めることができます。
具体的には以下の順で処理をおこないます。
整数 Nを標準入力から受け取る
ループ処理を用いて A_i, S_i を標準入力から受け取り、二次元配列の i 番目の要素にこの順で格納する
二次元配列に対し逆順ソートを実行する。
ループ処理を用いて二次元配列の各要素の 2 番目の要素を出力する。
'''

<シェルソート>
# utf-8
def insertion_sort(a, n, h):
    num_of_move = 0

    for i in range(h, n):
        x = a[i]
        j = i - h

        while j >= 0 and a[j] > x:
            a[j + h] = a[j]
            j -= h
            num_of_move += 1

        a[j + h] = x

    print(num_of_move)


def shell_sort(a, n, h):
    for h_i in h:
        insertion_sort(a, n, h_i)


n = int(input())
a = list(map(int, input().split()))
k = int(input())
h = list(map(int, input().split()))

shell_sort(a, n, h)
'''
疑似コードに従ってシェルソートを実装すればよいです。
'''

<マージソート>
# utf-8
count = 0
INF = 1000000001


def merge(a, left, mid, right):
    global count
    l = a[left:mid]
    r = a[mid:right]
    l.append(INF)
    r.append(INF)

    lindex = 0
    rindex = 0

    for i in range(left, right):
        if l[lindex] < r[rindex]:
            a[i] = l[lindex]
            lindex += 1
        else:
            a[i] = r[rindex]
            rindex += 1
            count += 1


def merge_sort(a, left, right):
    if left + 1 < right:
        mid = (left + right) // 2
        merge_sort(a, left, mid)
        merge_sort(a, mid, right)
        merge(a, left, mid, right)


n = int(input())
a = list(map(int, input().split()))

merge_sort(a, 0, n)

print(*a)
print(count)
'''
疑似コードに従ってマージソートを実装すればよいです。
'''

<クイックソート>

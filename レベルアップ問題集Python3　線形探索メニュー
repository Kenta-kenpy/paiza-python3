<指定された値の探索>
step1　指定された値の個数
# utf-8
n = int(input())
a = [int(x) for x in input().split()]
k = int(input())

num_of_k = 0
for val in a:
    if val == k:
        num_of_k += 1

print(num_of_k)
'''
数列に k が何個現れるかを表す変数 num_of_k を用意し、for 文などのループを用いて数列の各要素と k を比べ、
一致していたら num_of_k を1増やす、という処理をすればよいです。
'''

step2　指定された値の位置1
# utf-8
n = int(input())
a = [int(x) for x in input().split()]
k = int(input())

index_of_k = -1
for i in range(n):
    if a[i] == k:
        index_of_k = i
        break

print(index_of_k + 1)
'''
最初に現れる k の添字を保存する変数 index_of_k を用意し、for 文などのループを用いて数列を先頭から見ていき、最初に k が現れたときの添字を index_of_k に保存し、ループを抜け index_of_k を出力すればよいです。
index_of_k の初期値を0にしておくと、数列に k が現れなかった場合の処理が楽になります。
'''

step3　指定された値の位置2
# utf-8
n = int(input())
a = [int(x) for x in input().split()]
k = int(input())

index_of_k = 0
for i in range(n - 1, -1, -1):
    if a[i] == k:
        index_of_k = i + 1
        break

print(index_of_k)
'''
「数列を先頭から順に見たときに最後に現れる k 」 = 「数列を後ろから見たときに最初に現れる k 」であることに気が付くと実装が楽になります。
数列を先頭から順に見たときに最後に現れる k の添字を保存する変数 index_of_k を用意し、for 文などのループを用いて数列を後ろから見ていき、最初に k が現れたときの添字を index_of_k に保存し、ループを抜け index_of_k を出力すればよいです。
index_of_k の初期値を 0 にしておくと、数列に k が現れなかった場合の処理が楽になります。
'''

final　指定された値の位置3
# utf-8
n = int(input())
a = [int(x) for x in input().split()]
k = int(input())

for i in range(n):
    if a[i] == k:
        print(i + 1)
'''
for 文などのループを用いて数列を先頭から順に見ていき、k が現れるたびにその添字を出力すればよいです。
'''

<n変数の最大最小>
step1　2変数の最大最小
# utf-8
a = [int(x) for x in input().split()]

print(max(a), min(a))
'''
a_1 と a_2 を比較し、問題文の指示に従って出力すればよいです。
また、a_1, a_2 を数列と見なし、ソートすることによって答えを求めることもできます。

<別解>
a = [int(x) for x in input().split()]

a.sort()

print(a[-1], a[0])
list.sort() を用いるとリストをソートすることができます。
list.sort() はデフォルトで昇順ソートを行うため、a[-1] が最大値、a[0] が最小値となります。
'''

step2　10変数の最大最小
# utf-8
a = [int(x) for x in input().split()]

print(max(a), min(a))
'''
数列の最大値、最小値を保存する変数をそれぞれ適当に小さな数、大きな数で初期化しておき、数列の値を 1 つずつ見ながら最小値と最大値を更新していけばよいです。
また、数列をソートすることによって答えを求めることもできます。
組み込み関数である max() や min() に引数としてリストを与えると、そのリストの最大、最小の要素を得ることができます。

<別解>
a = [int(x) for x in input().split()]

a.sort()

print(a[-1], a[0])
list.sort() を用いるとリストをソートすることができます。
list.sort() はデフォルトで昇順ソートを行うため、a[-1] が最大値、a[0] が最小値となります。
'''

final　n変数の最大最小
# utf-8
n = int(input())
a = [int(x) for x in input().split()]

print(max(a), min(a))
'''
数列の最大値、最小値を保存する変数をそれぞれ適当に小さな数、大きな数で初期化しておき、数列の値を 1 つずつ見ながら最小値と最大値を更新していけばよいです。
また、数列をソートすることによって答えを求めることもできます。

<別解>
n = int(input())
a = [int(x) for x in input().split()]

a.sort()

print(a[-1], a[0])
list.sort() を用いるとリストをソートすることができます。
list.sort() はデフォルトで昇順ソートを行うため、a[-1] が最大値、a[0] が最小値となります。
'''

<特殊な探索>
step1　偶数の探索
# utf-8
n = int(input())
a = [int(x) for x in input().split()]

index_of_even = 0
for i in range(n):
    if a[i] % 2 == 0:
        index_of_even = i + 1
        break

print(index_of_even)
'''
最初に現れる偶数の添字を保存しておく変数 index_of_even を用意し、for 文などのループを利用して数列を先頭から順に見ていき、
最初に偶数が現れたときの添字を index_of_even に保存しループを抜け、index_of_even を出力すればよいです。
'''

step2　奇数の探索
# utf-8
n = int(input())
a = [int(x) for x in input().split()]

index_of_odd = 0
for i in range(n - 1, -1, -1):
    if a[i] % 2 == 1:
        index_of_odd = i + 1
        break

print(index_of_odd)
'''
「数列を先頭から順に見たときに最後に現れる奇数」 = 「数列を後ろから見たときに最初に現れる奇数」であることに気が付くと実装が楽になります。
数列を先頭から順に見たときに最後に現れる奇数の添字を保存しておく変数 index_of_odd を用意し、for 文などのループを利用して数列を後ろから順に見ていき、
最初に奇数が現れたときの添字を index_of_odd に保存しループを抜け、index_of_odd を出力すればよいです。
'''

step3　条件付き最小値
# utf-8
n = int(input())
a = [int(x) for x in input().split()]
k = int(input())

answer = 101
for val in a:
    if val >= k:
        answer = min(answer, val)

print(answer)
'''
答えを保存する変数 answer を用意し、適当に大きな数で初期化します。今回は k 以上である値が必ず数列に含まれていることと、入力の最大値が 100 であることがわかっているので、初期値は 101 としておけば十分です。
そして、数列の各要素 a_i について、k 以上であるものについて、answer を a_i と answer のうち小さいほうで更新します。
このとき、answer は求めたい答え (数列に含まれる値であって k 以上であるもののうち値が最小のもの) となっています。
'''

step4　条件付き最大値
# utf-8
n = int(input())
a = [int(x) for x in input().split()]
k = int(input())

answer = -101
for val in a:
    if val <= k:
        answer = max(answer, val)

print(answer)
'''
答えを保存する変数 answer を用意し、適当に小さな数で初期化します。今回は k 以下である値が必ず数列に含まれていることと、入力の最小値が -100 であることがわかっているので、初期値は -101 としておけば十分です。
そして、数列の各要素 a_i について、k 以下であるものについて、answer を a_i と answer のうち大きいほうで更新します。
このとき、answer は求めたい答え (数列に含まれる値であって k 以下であるもののうち値が最大のもの) となっています。
'''

step5　点と点の距離
# utf-8
n = int(input())
points = [[int(x) for x in input().split()] for _ in range(n)]
k = int(input())

xn, yn = points[-1]
answer = 0

for xi, yi in points:
    if abs(xi - xn) + abs(yi - yn) <= k:
        answer += 1

print(answer)
'''
点 n とのマンハッタン距離が k 以下である点の数を保存する変数を用意します。点 n とのマンハッタン距離を定義に従って計算し、
それが k 以下であるなら答えを1増やす、という処理を各点についてすればよいです。
abs で絶対値を求めることができます。
'''

step6　長方形に含まれる点
# utf-8
n = int(input())
points = [[int(x) for x in input().split()] for _ in range(n)]
xs, xt = [int(x) for x in input().split()]
ys, yt = [int(x) for x in input().split()]

answer = 0

for xi, yi in points:
    horizontal = xs <= xi <= xt
    vertical = ys <= yi <= yt
    if horizontal and vertical:
        answer += 1

print(answer)
'''
点 (x_i, y_i) について、 x_s ≦ x_i ≦ x_t と y_s ≦ y_i ≦ y_t がともに満たされているとき、この点は(x_s, y_s), (x_s, y_t), (x_t, y_t), (x_t, y_s) の4頂点からなる長方形に含まれています。
従って、答えを保存する変数を用意し、各点について上の2つの不等式が満たされているかどうかを確認し、
満たされているなら答えを1増やす処理をすればよいです。
1つめの不等式の評価結果を horizontal に、2つめの不等式の評価結果を vertical にそれぞれ保存し、それらがともに真であるかどうかを確かめることにより、点が長方形に含まれているかどうかを判定しています。
'''

step7　成績優秀者の列挙1


final　成績優秀者の列挙2

<第k要素の探索>
step1　2番目に大きな値
# utf-8
n = int(input())
a = [int(x) for x in input().split()]

maximum = 1000000001
for i in range(2):
    next_maximum = -1000000001
    for val in a:
        if val < maximum:
            next_maximum = max(next_maximum, val)
    maximum = next_maximum

print(maximum)
'''
数列に重複する要素がないことを利用します。for 文などのループを用いて数列の最大値を求めた後、数列の値であってその値未満であるもののうち、最大であるものを求めればよいです。
また、数列をソートすると上のような処理をせずとも答えを求めることができます。
数列に含まれる値で、maximum 未満であるもののうち最大であるものを求め、maximum をその値で更新するという一連の処理を2回おこなうことにより、数列に含まれる値のうち2番目に大きいものを求めています。
入力の最大値が 1,000,000,000 であることがわかっているので、maximum の初期値は 1,000,000,001 としておけば十分です。

<別解>
n = int(input())
a = [int(x) for x in input().split()]

a.sort()
print(a[-2])
list.sort() を用いるとリストをソートすることができます。
list.sort() はデフォルトで昇順ソートを行うため、ソート後、2番目に大きい値は a[-2] に入っています。
'''
final　k番目に大きな値
# utf-8
n = int(input())
a = [int(x) for x in input().split()]
k = int(input())

maximum = 1000000001
for i in range(k):
    next_maximum = -1000000001
    for val in a:
        if val < maximum:
            next_maximum = max(next_maximum, val)
    maximum = next_maximum

print(maximum)
'''
数列に重複する要素がないことを利用します。数列の最大値を求め、その値未満のうち最大であるものを求め、さらにその値未満のうち最大であるものを求め......という処理を k 回繰り返せば、数列に含まれる値のうち k 番目に大きいものを求めることができます。
数列に含まれる値で、maximum 未満であるもののうち最大であるものを求め、maximum をその値で更新するという一連の処理を k 回おこなうことにより、数列に含まれる値のうち k 番目に大きいものを求めています。入力の最大値が 1,000,000,000 であることがわかっているので、maximum の初期値は 1,000,000,001 としておけば十分です。

<別解>
n = int(input())
a = [int(x) for x in input().split()]
k = int(input())

a.sort()
print(a[-k])
list.sort() を用いるとリストをソートすることができます。
list.sort() はデフォルトで昇順ソートを行うため、ソート後、k 番目に大きい値は a[-k] に入っています。
'''

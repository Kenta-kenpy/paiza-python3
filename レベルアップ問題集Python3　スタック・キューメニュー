<スタック・キュー実装編(共通問題)>
step1 スタック・キュー実装編(共通問題) step1
# utf-8
N = int(input())

A = [0] * N  # キュー, スタック本体
for i in range(N):
    A[i] = int(input())
print(N)
for i in range(N):
    print(A[i])
'''
スタック・キューの実装において共通で使用する、要素の入力部分を作成します。
この問題では標準入力の受け取り、標準出力、ループができれば正解できます。
'''

final スタック・キュー実装編(共通問題) step2
# utf-8
Q = int(input())

A = []  # キュー, スタック本体
for i in range(Q):
    query = input().split()
    if query[0] == "1":
        # PUSH
        A.append(query[1])
    elif query[0] == "2":
        # STAY(何もしない)
        continue
print(len(A))
for i in range(len(A)):
    print(A[i])
'''
スタック・キューの実装において共通で使用する、クエリの処理部分を作成します。
入力で与えられた数値によって、おこなう処理を分岐させることができれば正解できます。
if 文などで分岐させることができれば、残りは前問と同じように正解できます。
'''

<スタック実装編>
step1 スタック実装編 step1
# utf-8
Q = int(input())

A = []  # スタック本体
for i in range(Q):
    query = input().split()
    if query[0] == "1":
        # PUSH
        A.append(query[1])
    elif query[0] == "2":
        A.pop()
    print(" ".join(A))
'''
スタックへ要素を追加・削除するプログラムを実装します。
スタックの中に入っている要素の個数を K, スタック本体の配列を A とします。前問より、スタックに要素 X を追加するときは、 A[K] に X を代入すればよいです。追加は簡単ですが、削除は少し工夫が必要です。
結論から述べると、 K を 1 つ減らせばよいです。これではスタック A の中に A [ K ] が残ってしまうのではないかと思いますが、それでよいのです。スタック本体の配列を A とする、とさきほど述べましたが、正確には A の 0 番目の値から K - 1 番目の値までをスタック本体と考えます。すると、各処理は以下のように考えられます。
追加 ... スタックの範囲外の要素 1 つ( A[K] )をスタックの範囲内にし、 A[K] に要素を追加する。
削除 ... スタックの範囲を 1 つ狭める。狭めたことによって範囲外に出た要素はスタックの要素として扱わない。
出力 ... スタックの範囲内( 0 番目から K - 1 番目まで )の値を出力する。
リストを半角区切りで出力することは " ".join(リスト) により可能です。
'''

final スタック実装編 step2

<キュー実装編>
step1 キュー実装編 step1
final キュー実装編 step2

<箱とボール>
step1 2つのキュー
step2 最大の区間和
step3 逆ポーランド記法
step4 括弧列
step5 エスカレーター
final 箱とボール

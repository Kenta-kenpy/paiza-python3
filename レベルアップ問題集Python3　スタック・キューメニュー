<スタック・キュー実装編(共通問題)>
step1 スタック・キュー実装編(共通問題) step1
# utf-8
N = int(input())

A = [0] * N  # キュー, スタック本体
for i in range(N):
    A[i] = int(input())
print(N)
for i in range(N):
    print(A[i])
'''
スタック・キューの実装において共通で使用する、要素の入力部分を作成します。
この問題では標準入力の受け取り、標準出力、ループができれば正解できます。
'''

final スタック・キュー実装編(共通問題) step2
# utf-8
Q = int(input())

A = []  # キュー, スタック本体
for i in range(Q):
    query = input().split()
    if query[0] == "1":
        # PUSH
        A.append(query[1])
    elif query[0] == "2":
        # STAY(何もしない)
        continue
print(len(A))
for i in range(len(A)):
    print(A[i])
'''
スタック・キューの実装において共通で使用する、クエリの処理部分を作成します。
入力で与えられた数値によって、おこなう処理を分岐させることができれば正解できます。
if 文などで分岐させることができれば、残りは前問と同じように正解できます。
'''

<スタック実装編>
step1 スタック実装編 step1
# utf-8
Q = int(input())

A = []  # スタック本体
for i in range(Q):
    query = input().split()
    if query[0] == "1":
        # PUSH
        A.append(query[1])
    elif query[0] == "2":
        A.pop()
    print(" ".join(A))
'''
スタックへ要素を追加・削除するプログラムを実装します。
スタックの中に入っている要素の個数を K, スタック本体の配列を A とします。前問より、スタックに要素 X を追加するときは、 A[K] に X を代入すればよいです。追加は簡単ですが、削除は少し工夫が必要です。
結論から述べると、 K を 1 つ減らせばよいです。これではスタック A の中に A [ K ] が残ってしまうのではないかと思いますが、それでよいのです。スタック本体の配列を A とする、とさきほど述べましたが、正確には A の 0 番目の値から K - 1 番目の値までをスタック本体と考えます。すると、各処理は以下のように考えられます。
追加 ... スタックの範囲外の要素 1 つ( A[K] )をスタックの範囲内にし、 A[K] に要素を追加する。
削除 ... スタックの範囲を 1 つ狭める。狭めたことによって範囲外に出た要素はスタックの要素として扱わない。
出力 ... スタックの範囲内( 0 番目から K - 1 番目まで )の値を出力する。
リストを半角区切りで出力することは " ".join(リスト) により可能です。
'''

final スタック実装編 step2
# utf-8
Q = int(input())

A = []  # キュー, スタック本体
for i in range(Q):
    query = input().split()
    if query[0] == "1":
        # PUSH
        A.append(query[1])
    elif query[0] == "2":
        print(A.pop())
    print(" ".join(A))
'''
スタックとしての基本的な機能を完成させます。前問との違いは大きく 2 点です。
1 つ目はスタックへ与えられるデータが文字になっています。今までは整数型でスタックの配列を用意していましたが、これを文字型に変えましょう。
2 つ目は POP をする際に、削除する予定の要素を出力します。ここで、スタックの中に入っている要素の個数を K, スタック本体の配列を A とします。
このとき、削除される要素は A[K - 1] であり、これを出力したのちに削除の処理として K を 1 つ減らします。
リストを半角区切りで出力することは " ".join(リスト) により可能です。また、リストの末尾を削除し、値を取得することは A.pop() により可能です。
'''

<キュー実装編>
step1 キュー実装編 step1
# utf-8
import queue

Q = int(input())

q = queue.Queue()  # キュー本体
for i in range(Q):
    query = input().split()
    if query[0] == "1":
        # PUSH
        q.put(query[1])
    elif query[0] == "2":
        # POP
        q.get()
    for j in range(q.qsize()):  # キューの要素分だけループを回す
        tmp = q.get()
        if j < q.qsize():
            print(tmp, end=" ")
        else:
            print(tmp, end="")
        q.put(tmp)
    print()
'''
キューへ要素を追加・削除するプログラムを実装します。
キューの末尾の次の要素のインデックスを R, キュー本体の配列を A とします。前問より、キューに要素 X を追加するときは、 A[R] に X を代入すればよいです。追加は簡単ですが、削除は少し工夫が必要です。
スタックの場合、 R を 1 つ減らせばよいのですが、キューの場合は変数 L を 1 つ増やせばよいです。ここで L は 今まで削除した要素数 を表します。キューを実装する際には、 A の L 番目の値から R - 1 番目の値までをキュー本体と考えます。すると、各処理は以下のように考えられます。
追加 ... キューの末尾の次の要素( A[R] )をキューの範囲内にし、 A[R] に要素を追加する。
削除 ... キューの先頭の要素( A[L] )をキューの範囲外にする。範囲を狭めたことによって範囲外に出た要素はキューの要素として扱わない。
出力 ... キューの範囲内( L 番目から R - 1 番目まで )の値を出力する。
Pythonでキューを作成するには、Queueモジュールをインポートしたのちに queue.Queue() と記述することにより可能です。末尾に追加する場合は「put」、先頭の取り出しには「get」を使用します。
'''

final キュー実装編 step2
# utf-8
import queue

Q = int(input())

q = queue.Queue()  # キュー本体
for i in range(Q):
    query = input().split()
    if query[0] == "1":
        # PUSH
        q.put(query[1])
    elif query[0] == "2":
        print(q.get())
    for j in range(q.qsize()):  # キューの要素分だけループを回す
        tmp = q.get()
        if j < q.qsize():
            print(tmp, end=" ")
        else:
            print(tmp, end="")
        q.put(tmp)
    print()
'''
キューとしての基本的な機能を完成させます。前問との違いは大きく 2 点です。
1 つ目はキューへ与えられるデータが文字になっています。今までは整数型でキューの配列を用意していましたが、これを文字型に変えましょう。これでさまざまなデータが与えられても簡単に変更ができるキューになります。
2 つ目は POP をする際に、削除する予定の要素を出力します。ここで、 今まで削除した要素数 + 1 を L, キュー本体の配列を A とします( 配列は 1 - indexed で説明します )。
このとき、削除される要素は A[L] であり、これを出力したのちに削除の処理として L を 1 つ増やします。
Pythonでキューを作成するには、Queueモジュールをインポートしたのちに queue.Queue() と記述することにより可能です。末尾に追加する場合は「put」、先頭の取り出しには「get」を使用します。
'''

<箱とボール>
step1 2つのキュー
# utf-8
import queue

Q = int(input())

q1 = queue.Queue()
q2 = queue.Queue()  # キュー本体
for i in range(Q):
    query = input().split()
    if query[0] == "1":
        if query[1] == "1":
            q1.put(query[2])
        else:
            q2.put(query[2])
    elif query[0] == "2":
        if query[1] == "1":
            print(q1.get())
        else:
            print(q2.get())
    else:
        print(q1.qsize(), q2.qsize())
'''
キューを 2 つ用意します。キューのプログラムをコピー&ペーストして同じようなコードを 2 つ記述してもよいですし、キュークラスなどを定義してもよいです。
Pythonでキューを作成するには、Queueモジュールをインポートしたのちに queue.Queue() と記述することにより可能です。末尾に追加する場合は「put」、先頭の取り出しには「get」を使用します。
キューの要素数を取得は q.qsize() により可能です。
'''

step2 最大の区間和
step3 逆ポーランド記法
step4 括弧列
step5 エスカレーター
final 箱とボール

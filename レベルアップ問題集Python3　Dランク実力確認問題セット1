# ダウンロード(Easy)
# utf-8
S, A, T = map(int,input().split()) #入力

Already_downroad = T*A #ダウンロードが終わったファイルのデータ量の総和
All_downroad = S*A #全てのファイルのデータ量の総和

print((100 * Already_downroad) // All_downroad)
'''
この問題では、1 行に空白で区切られた 3 つの整数が与えられます。
入力はPythonでは map(int,input().split()) で受け取ることが出来ます。
計算は掛け算、割り算を使用します。Pythonでは、A×B の値は A * B、A÷B を小数点以下を切り捨てた値は A // B で求めることが出来ます。
(A×B)÷C を小数点以下を切り捨てた値を求めるとき、先に B÷C を小数点以下を切り捨てた値を求めてしまうと誤った計算結果になってしまうので、計算の順番に気をつけてください。
出力はPythonでは、print関数を用いて行うことが出来ます。
'''

# オリンピックのスコア
# utf-8
S = list(map(int,input().split()))
print(sum(S) - max(S) - min(S))
'''
入力はPythonでは list(map(int,input().split())) で受け取ることが出来ます。
総和を求める関数 sum() 、最大値を求める関数 max() 、最小値を求める関数 min() を用いて、sum(S) - max(S) - min(S) と求めることが出来ます。関数 sum() は、実数の入ったリストを引数として与えるとそれらの総和を計算します。その他の関数も同様です。

<別解>
S = list(map(int,input().split()))

MAX = -1 #最大値を探す
MIN = 10**9    #最小値を探す
SUM = 0     #総和をとる
for i in range(5):
  SUM += S[i]
  if MIN > S[i]:#最小値更新
    MIN = S[i]
  if MAX < S[i]:#最大値更新
    MAX = S[i]

print(SUM - MAX - MIN)
'''
for文によって、総和を求めながら最大値と最小値を探すことによって計算することもできます。初期値としては、十分に小さい数、大きい数を設定しましょう。
'''
'''

# 次のごはん
# utf-8
H, M = map(int,input().split())
if 7 <= H <= 12: #7時台から12時台ならば、昼ごはん
    print("lunch")
elif 13 <= H <= 18: #そうでなく13時台から18時台ならば、晩ごはん
    print("dinner")
else: #いずれの条件を満たさないなら、朝ごはん
    print("breakfast")
'''
入力はPythonでは map(int,input().split()) で受け取ることが出来ます。
if,elif,else文を用いて、判定を行うことが可能です。朝ごはんの条件のみ、0 時～ 6 時 59 分と 19 時 1 分～ 23 時 59 分と 2 つの区間になるため、or を使って表す必要があります(例: (0 <= H <= 6) or (19 <= H <= 23) )。実装例ではelseを用いることで省略しています。
'''

# ダウンロード(Hard)
# utf-8
A = list(map(int,input().split()))
T = list(map(str,input().split()))

Already_downroad = 0 #ダウンロードが終わったファイルのデータ量の総和を管理する変数
All_downroad = sum(A) #全てのファイルのデータ量の総和

for i in range(5):
    if T[i] == "o": #もしファイルのダウンロードが終わっているならば、データ量をAll_downloadに足す
        Already_downroad += A[i]
        
print((100 * Already_downroad) // All_downroad)
'''
入力はPythonでは 1 行目も 2 行目も list(map(int,input().split())) で受け取ることが出来ます。
始めにダウンロードが終わったファイルのデータ量の総和を管理する変数を用意し、for文を用いて、T のそれぞれの文字を調べ、o ならば、用意した変数にデータ量を足し算することで、始めにダウンロードが終わったファイルのデータ量の総和を求めることが出来ます。
for文を使わなかったとしても、実装例 2 のように、if文 5 つで判定することが出来ます。indexに注意してください。
<実装例2>
A_0, A_1, A_2, A_3, A_4 = map(int,input().split())
T = list(map(str,input().split()))

Already_downroad = 0 #ダウンロードが終わったファイルのデータ量の総和を管理する変数
All_downroad = A_0 + A_1 + A_2 + A_3 + A_4 #全てのファイルのデータ量の総和

if T[0] == "o": #もしファイルのダウンロードが終わっているならば、データ量をAll_downloadに足す
    Already_downroad += A_0

if T[1] == "o": 
    Already_downroad += A_1

if T[2] == "o": 
    Already_downroad += A_2

if T[3] == "o": 
    Already_downroad += A_3

if T[4] == "o": 
    Already_downroad += A_4

print((100 * Already_downroad) // All_downroad)
'''

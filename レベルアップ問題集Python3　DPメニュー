<3項間漸化式>
step1　2項間漸化式1
# utf-8
x, d, k = map(int, input().split())

a = [x] * (k + 1)

for i in range(2, k + 1):
    a[i] = a[i - 1] + d

print(a[k])
'''
数列の各項の値を保存する1次元配列を用意し、for 文等のループを利用して a_2 から順に漸化式に従って計算していけばよいです。
'''

step2　2項間漸化式2
# utf-8
x, d = map(int, input().split())

a = [x] * (1000 + 1)

for i in range(2, 1000 + 1):
    a[i] = a[i - 1] + d

q = int(input())

for i in range(q):
    k = int(input())
    print(a[k])
'''
k_i を入力として受け取る度に a_{k_i} の値をいちいち求める必要はありません。あらかじめ a_1 から a_1000 までの値を求めておき、各 k_i に対して求めておいた a_{k_i} をそのまま出力すればよいです。
よって、まずは数列の各項の値を保存する1次元配列を用意し、for 文等のループを利用して a_2 から a_1000 まで順に漸化式に従って計算します。
そして、k_i を入力として受け取り a_{k_i} を出力することを Q 回繰り返せばよいです。
'''

step3　特殊な2項間漸化式1
# utf-8
x, d1, d2, k = map(int, input().split())

a = [x] * (k + 1)

for i in range(2, k + 1):
    if i % 2 == 0:
        a[i] = a[i - 1] + d2
    else:
        a[i] = a[i - 1] + d1

print(a[k])
'''
数列の各項の値を保存する1次元配列を用意し、for 文等のループを利用して a_2 から順に漸化式に従って計算していけばよいです。
添字の偶奇によって漸化式の形が変わっているので、a_i を計算する際に添字の偶奇による場合分けを行いましょう。
'''

step4　特殊な2項間漸化式2
# utf-8
x, d1, d2 = map(int, input().split())

a = [x] * (1000 + 1)

for i in range(2, 1000 + 1):
    if i % 2 == 0:
        a[i] = a[i - 1] + d2
    else:
        a[i] = a[i - 1] + d1

q = int(input())

for i in range(q):
    k = int(input())
    print(a[k])
'''
まず最初に、数列の各項の値を保存する1次元配列を用意し、for 文等のループを利用して a_2 から順に a_1000 まで漸化式に従って計算します。
添字の偶奇によって漸化式の形が変わっているので、a_i を計算する際に添字の偶奇による場合分けを行いましょう。
最後に、k_i を入力として受け取り数列の k_i 項目の値を出力することを Q 回繰り返せばよいです。
'''

step5　3項間漸化式1
# utf-8
a = [1] * (40 + 1)

for i in range(3, 40 + 1):
    a[i] = a[i - 1] + a[i - 2]

k = int(input())
print(a[k])
'''
数列の各項の値を保存する1次元配列を用意し、for 文等のループを利用して a_3 から順に漸化式に従って計算していけばよいです。
'''

final　3項間漸化式2
a = [1] * (40 + 1)

for i in range(3, 40 + 1):
    a[i] = a[i - 1] + a[i - 2]

q = int(input())

for i in range(q):
    k = int(input())
    print(a[k])
'''
数列の各項の値を保存する1次元配列を用意し、for 文等のループを利用して a_3 から順に a_40 まで漸化式に従って計算します。
そして、k_i を入力として受け取り数列の k_i 項目の値を出力することを Q 回繰り返せばよいです。
'''

<階段の上り方>
step1　階段の上り方1
# utf-8
n = int(input())

dp = [1] * (n + 1)

for i in range(2, n + 1):
    dp[i] = dp[i - 1] + dp[i - 2]

print(dp[n])
'''
階段の上り方の通り数を保存する1次元配列 dp を用意し、for 文等のループを利用して dp[1] から dp[n] までを、
考察によって導かれた漸化式 dp[i] = dp[i-1] + dp[i-2] に従って順に計算していけばよいです。
'''

step2　階段の上り方2
# utf-8
n, a, b = map(int, input().split())

dp = [0] * (n + 1)
dp[0] = 1

for i in range(1, n + 1):
    if i >= a:
        dp[i] += dp[i - a]
    if i >= b:
        dp[i] += dp[i - b]

print(dp[n])
'''
dp[n] を、n 段の階段を上る方法の数だとすると、dp[0] ~ dp[n-1] と dp[n] の関係は、dp[n] = dp[n-a] + dp[n-b] で表すことができます。
よって、階段の上り方の通り数を保存する1次元配列 dp を用意し、for 文等のループを利用して dp[1] から dp[n] までを、この漸化式に従って計算していけばよいです。
i が a より小さい場合、i-a 段目は存在せず、i-a 段目から a 段上って i 段目へ移動することはあり得ないことに注意して dp[i] を計算しましょう (b についても同様) 。
'''

final  階段の上り方3
# utf-8
n, a, b, c = map(int, input().split())

dp = [0] * (n + 1)
dp[0] = 1

for i in range(1, n + 1):
    if i >= a:
        dp[i] += dp[i - a]
    if i >= b:
        dp[i] += dp[i - b]
    if i >= c:
        dp[i] += dp[i - c]

print(dp[n])
'''
dp[n] を、n 段の階段を上る方法の数だとすると、dp[0] ~ dp[n-1] と dp[n] の関係は、dp[n] = dp[n-a] + dp[n-b] + dp[n-c] で表すことができます。
よって、階段の上り方の通り数を保存する1次元配列 dp を用意し、for 文等のループを利用して dp[1] から dp[n] までを、この漸化式に従って順に計算していけばよいです。
i が a より小さい場合、i-a 段目は存在せず、i-a 段目から a 段上って i 段目へ移動することはあり得ないことに注意して dp[i] を計算しましょう (b, c についても同様) 。
'''

<最安値>
step1　最安値を達成するには1
# utf-8
n, a, b = map(int, input().split())

dp = [10000000] * (n + 1)

dp[0] = 0
dp[1] = a

for i in range(2, n + 1):
    dp[i] = min(dp[i - 1] + a, dp[i - 2] + b)

print(dp[n])
'''

りんごを買うのに必要な金額の最小値を保存する1次元配列 dp を用意し、for 文等のループを利用して dp[1] から dp[n] までを、
考察によって導かれた漸化式 dp[k] = min(dp[k-1] + a, dp[k-2] + b) に従って順に計算していけばよいです。
最小値を求めたいので、dp[k] の初期値として非常に大きな値 (10000000) を設定しています。
一般に、最小値を求めたい場合には初期値として非常に大きな値を、最大値を求めたい場合は初期値として非常に小さな値を設定しておくとよいです。
'''

step2　最安値を達成するには2
# utf-8
n, a, b = map(int, input().split())

dp = [10000000] * (n + 5)

dp[0] = 0

for i in range(2, n + 5):
    if i >= 2:
        dp[i] = min(dp[i], dp[i - 2] + a)
    if i >= 5:
        dp[i] = min(dp[i], dp[i - 5] + b)

print(min(dp[n:]))
'''
まず、dp[n] をちょうど n 個のりんごを買うのに必要な金額の最小値とすると、dp[0] ~ dp[k-1] と dp[k] の関係は dp[k] = min(dp[k-2] + a, dp[k-5] + b) となります。まずはこの漸化式に従って dp を小さい方から順に計算しましょう。
このままでは、2と5の組合せで作れない個数について、答えを正しく計算することができません。そこで、この dp を利用してちょうど n 個ではなく、n 個以上のりんごを買うのに必要な金額の最小値を求めることを考えます。
dp2[n] を n 個以上のりんごを買うのに必要な金額の最小値とすると、定義から dp2[n] = min(dp[n], dp[n+1], ...) であることがわかります。dp2[n] が問題の答えです。
ループの回し方を工夫して配列 dp をうまく書き換えると、わざわざ dp2 のような配列を新しく作らなくても答えを求めることができます。具体的には、dp2[n] = min(dp[n], dp[n+1], ...) = min(dp[n], dp2[n+1]) であることに注目し、dp を添字が大きい方から dp[k] = min(dp[k], dp[k+1]) のように書き換えていけば、dp[n] が n 個以上のりんごを買うのに必要な金額の最小値となります。
このとき、dp[k]を書き換えた時点では、dp[i (< k) ] はちょうど i 個のりんごを買うのに必要な金額の最小値に、dp[i (≧ k) ] は i 個以上のりんごを買うのに必要な金額の最小値 (=dp2[i]) になっています。
n 個のりんごを最も安く手に入れたいときに n+5 個以上のりんごを買うのは無駄ですから、dp は dp[n+4] 程度まで計算しておけば十分です。実は a < b であることから dp[n+2] まで計算しておけば十分であることがわかるのですが、そこまで切り詰める必要はありません。
最小値を求めたいので、dp[k] の初期値として非常に大きな値 (10000000) を設定しています。
一般に、最小値を求めたい場合には初期値として非常に大きな値を、最大値を求めたい場合は初期値として非常に小さな値を設定しておくとよいです。
スライスを利用して、n 個以上のりんごを買うのに必要な金額の最小値を直接求めています。
'''

step3　最安値を達成するには3
final　最安値を達成するには4

<連続列>
step1　最長増加連続部分列
final　最長減少連続部分列

<最長減少部分列>
step1　最長部分増加列
final　最長減少部分列

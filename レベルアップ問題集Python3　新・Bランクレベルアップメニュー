※回答コード例があとから追加された
<マップの扱い1　マップの書き換え・1マス>
# utf-8
def main():
    import sys
    input = sys.stdin.read
    
    data = input().splitlines()

    # H, W
    H, W = map(int, data[0].split())

    # 盤面
    board = [list(data[i + 1]) for i in range(H)]

    # 書き換える座標
    y, x = map(int, data[H + 1].split())

    # 書き換え
    if board[y][x] == '.':
        board[y][x] = '#'
    else:
        board[y][x] = '.'

    # 出力
    for row in board:
        print("".join(row))

if __name__ == "__main__":
    main()
'''
入力の読み込み:
標準入力から全ての行を取得します。
最初の行から盤面サイズ H,W を取得。
続く H 行から盤面をリストとして格納。
最終行で変更する座標 y,x を取得。
文字の反転:
指定された座標の文字をチェック。
"." なら "#" に、"#" なら "." に置き換えます。
結果の出力:
各行を連結して出力。
'''

<マップの扱い2　マップの書き換え・縦横>
# utf-8
def main():
    import sys
    input = sys.stdin.read
    
    data = input().splitlines()

    # H, W
    H, W = map(int, data[0].split())

    # 盤面
    board = [list(data[i + 1]) for i in range(H)]

    # 書き換える座標
    y, x = map(int, data[H + 1].split())

    # 隣接する座標を含む座標リスト
    directions = [(0, 0), (-1, 0), (1, 0), (0, -1), (0, 1)]

    for dy, dx in directions:
        ny, nx = y + dy, x + dx
        if 0 <= ny < H and 0 <= nx < W:
            # 書き換え
            if board[ny][nx] == '.':
                board[ny][nx] = '#'
            else:
                board[ny][nx] = '.'

    # 出力
    for row in board:
        print("".join(row))

if __name__ == "__main__":
    main()
'''
指定された座標とその上下左右のマスを反転するロジックを追加しました。
上下左右の判定: 現在のマスを含めて、最大5マスを対象とするように修正しました。
範囲チェック: 配列外参照を防ぐため、座標が有効な場合のみ反転を行います。
'''

<マップの扱い3　マップの判定・縦横斜め>
# utf-8
# 入力の受け取り
import sys
input = sys.stdin.read

data = input().splitlines()

# H: 行数, W: 列数
H, W = map(int, data[0].split())

# マップの初期状態を取得
map_grid = [list(data[i + 1]) for i in range(H)]

# y, x: 書き換え開始座標
y, x = map(int, data[H + 1].split())

# 文字を書き換える関数を定義
def toggle_char(c):
    return '#' if c == '.' else '.'

# 書き換え対象の座標を集めるためのセット（重複を防ぐためセットを使用）
target_coords = set()

# 縦・横の座標を追加
for i in range(H):
    target_coords.add((i, x))  # 縦方向
for j in range(W):
    target_coords.add((y, j))  # 横方向

# 斜め方向の座標を追加
directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]  # 斜めの4方向
for dy, dx in directions:
    ny, nx = y, x
    while 0 <= ny < H and 0 <= nx < W:
        target_coords.add((ny, nx))
        ny += dy
        nx += dx

# 対象座標を走査して文字を書き換える
for ty, tx in target_coords:
    map_grid[ty][tx] = toggle_char(map_grid[ty][tx])

# 結果を出力
for row in map_grid:
    print(''.join(row))
'''
マップを二次元配列で管理しましょう。
今回の座標系において、(y,x)と同じ縦列のマスは 0 ≦ i < W であるような i を用いて (i,x) の通り表されます。同様にして、横列のマスは 0 ≦ i < H であるような i を用いて (i,x), 斜めの列のマスは 0 ≦ i < min(h,w) であるような i を用いて (y±i,x±i) (ただし、0 ≦ y±i < H かつ 0 ≦ x±i < W を満たすもの) と表すことができます。
このことと for 文などの繰り返しを用いて、縦横斜めの全ての列について問題文の通りの処理をおこないましょう。
入力の受け取り:
マップの行数(H)と列数(W)、各行の文字列、書き換え対象の座標(y, x)を入力から取得します。
文字の書き換え関数:
toggle_char関数を使って、文字が.の場合は#に、#の場合は.に切り替えます。
書き換え対象座標の計算:
縦方向のすべてのマス、横方向のすべてのマスを計算します。
斜め方向(4方向)について、範囲内の座標を計算し、すべての対象座標を集合target_coordsに追加します。
座標の書き換え:
計算した対象座標に従って、マスの文字を切り替えます。
結果の出力:
書き換えた後のマップを1行ずつ出力します。
'''

<マップの扱い4　マップのナンバリング>
# utf-8
def generate_map(H, W, D):
    # マップ全体を0で初期化
    count = 1
    map_grid = [[0] * W for _ in range(H)]

    if D == 1:  # 斜め右下方向
        # 最初のセルを1で初期化
        map_grid[0][0] = count
        count += 1
        # 上半分（左上から斜め右下）
        for i in range(1, H):
            for j in range(min(i, W - 1) + 1):
                map_grid[i - j][j] = count
                count += 1
        # 下半分（右上から斜め右下）
        for i in range(1, W):
            for j in range(min(H, W - i)):
                map_grid[H - 1 - j][i + j] = count
                count += 1

    elif D == 2:  # 水平方向
        # 左から右に行ごとにナンバリング
        for i in range(H):
            for j in range(W):
                map_grid[i][j] = count
                count += 1

    elif D == 3:  # 垂直方向
        # 上から下に列ごとにナンバリング
        for j in range(W):
            for i in range(H):
                map_grid[i][j] = count
                count += 1

    elif D == 4:  # 斜め右上方向
        # 最初のセルを1で初期化
        map_grid[0][0] = count
        count += 1
        # 上半分（左下から斜め右上）
        for i in range(1, W):
            for j in range(min(i, H - 1) + 1):
                map_grid[j][i - j] = count
                count += 1
        # 下半分（右下から斜め右上）
        for i in range(1, H):
            for j in range(min(H - i, W)):
                map_grid[i + j][W - 1 - j] = count
                count += 1

    return map_grid

# 入力処理
import sys
input = sys.stdin.read
H, W, D = map(int, input().strip().split())

# マップ生成
result_map = generate_map(H, W, D)

# 結果出力
for row in result_map:
    print(" ".join(map(str, row)))
'''
このプログラムは、与えられた行数 𝐻 列数 𝑊、ナンバリングの向き 𝐷 に基づいて、マップ全体に番号を振る機能を実装しています。以下に、プログラムの流れを説明します。
入力の受け取り: 標準入力から、マップの行数 (𝐻)、列数 (𝑊)、ナンバリングの向き (𝐷) を読み取ります。

マップの生成:
指定された向きに応じて異なるロジックを使用し、マップの各セルに番号を割り当てます。
各向きの詳細は以下の通りです:
D=1: 斜め右下方向に番号を振る。
D=2: 水平方向（左から右、上から下に行ごと）に番号を振る。
D=3: 垂直方向（上から下、左から右に列ごと）に番号を振る。
D=4: 斜め右上方向に番号を振る。

結果の出力:
生成されたマップを1行ずつ出力します。
各セルの値は半角スペースで区切られます。
'''

<シミュレーション1　反復横跳び>
# utf-8
def calculate_extra_distance(n, x, k):
    # 反復横跳びで余分に移動した距離を計算する関数
    # K % 4 の余りによって場合分けを行う
    # K % 4 が 3 の場合は、追加の距離 X を加算する必要がある
    if k % 4 == 3:
        return 2 * x * ((k - 4 * n) // 4) + x  # 追加距離 X を加算
    else:
        return 2 * x * ((k - 4 * n) // 4)  # 通常の計算

# 標準入力から値を取得
import sys
input_data = sys.stdin.read().strip()  # 入力データを取得し、末尾の改行を除去
n, x, k = map(int, input_data.split())  # 入力を N, X, K に分割して整数として取得

# 余分な移動距離を計算
result = calculate_extra_distance(n, x, k)

# 結果を出力
print(result)  # 計算結果を標準出力に表示
'''
関数: calculate_extra_distance
この関数は、友達が反復横跳びで本来より余分に移動した距離を計算します。

引数:
n：いたずらされる直前に 4×N 回線を跨いだことを表す値。
x：いたずらで左の線を元の位置から遠ざけた距離（cm）。
k：友達が実際に線を跨いだ回数。

計算の流れ:
K%4 の余りによって場合分けを行います。

K%4=0,1,2 の場合:
通常の移動距離計算式 2 * x * ((k - 4 * n) // 4) を使用。
これは、左の線を跨ぐ回数が整数回である場合に余分な移動距離を正確に求めます。

K%4=3 の場合:
通常の計算に加えて、左の線をもう一度跨ぐ際の距離 
x を加算。
計算式は 2 * x * ((k - 4 * n) // 4) + x になります。

入力処理
import sys:
標準入力を利用してデータを取得するために sys モジュールをインポートします。

input_data = sys.stdin.read().strip():
標準入力から値を取得します（複数行入力を想定）。
strip() を使うことで末尾の改行文字を除去。

n, x, k = map(int, input_data.split()):
入力データをスペース区切りで分割し、それぞれ int 型に変換。
これにより、変数 n, x, k に対応する値が格納されます。

余分な移動距離の計算
result = calculate_extra_distance(n, x, k):
関数 calculate_extra_distance を呼び出し、計算結果を変数 result に格納。

結果の出力
print(result):
計算結果（友達が余分に移動した距離）を標準出力に表示。
'''

<シミュレーション2　perfect shuffle>
# utf-8
import sys

def perfect_shuffle(deck):
    """デッキをパーフェクトシャッフルする関数"""
    half1 = deck[:26]  # 上半分
    half2 = deck[26:]  # 下半分
    shuffled_deck = []
    
    # 交互にカードを配置
    for i in range(26):
        shuffled_deck.append(half1[i])  # 上半分のカード
        shuffled_deck.append(half2[i])  # 下半分のカード
    
    return shuffled_deck

def main():
    """メイン処理関数"""
    # 標準入力からKを取得
    K = int(sys.stdin.read().strip())
    
    # 初期デッキの作成（S, H, D, C の順に1から13）
    suits = ['S', 'H', 'D', 'C']
    deck = [f"{suit}_{num}" for suit in suits for num in range(1, 14)]
    
    # K回シャッフル
    for _ in range(K):
        deck = perfect_shuffle(deck)
    
    # 結果を出力
    print("\n".join(deck))

if __name__ == "__main__":
    main()
'''
perfect_shuffle(deck) 関数
この関数は、渡されたデッキ (deck) を 1回のパーフェクトシャッフル で並べ替える役割を担います。

処理の流れ
デッキを2つの半分に分割

half1 = deck[:26] → 上半分（先頭26枚）
half2 = deck[26:] → 下半分（後ろ26枚）
交互にカードを配置

shuffled_deck.append(half1[i]) で 上半分のカードを追加
shuffled_deck.append(half2[i]) で 下半分のカードを追加
これを i=0 から i=25 までループして繰り返し、新しいシャッフル後のデッキを作成
シャッフル後のデッキを返す

main() 関数
この関数はプログラムのメイン処理を行います。

処理の流れ
標準入力からKを取得

K = int(sys.stdin.read().strip()) でKを取得し、整数型に変換
初期デッキの作成

suits = ['S', 'H', 'D', 'C'] で4種類のマークを定義
リスト内包表記を使い、 'S_1', 'S_2', ..., 'C_13' のように 順番通りのデッキ を作成
K回のシャッフル

for _ in range(K): のループで、 K 回 perfect_shuffle(deck) を実行
そのたびにデッキが更新される
結果の出力

print("\n".join(deck)) で、デッキのカードを 1枚ずつ改行して出力

if __name__ == "__main__":
これは、スクリプトが 直接実行されたときに main() を呼び出す ための構文です。
（他のスクリプトからインポートされたときは実行されません）
'''

<シミュレーション3　燃費>
import sys

def calculate_fuel(X, F1, F2, L, stops):
    fuel = 0
    prev_position = 0
    
    # 各区間の燃料消費を計算
    for stop in stops + [L]:
        distance = stop - prev_position
        if distance <= X:
            fuel += distance * F1
        else:
            fuel += X * F1 + (distance - X) * F2
        prev_position = stop
    
    return fuel

# 入力の読み込み
X = int(sys.stdin.readline().strip())
F1, F2 = map(int, sys.stdin.readline().strip().split())
L, N = map(int, sys.stdin.readline().strip().split())
stops = list(map(int, sys.stdin.readline().strip().split())) if N > 0 else []

# 計算と出力
print(calculate_fuel(X, F1, F2, L, stops))
'''
s_N ≦ L ≦ 1,000,000,000という制約より、車が 1 m ずつ進んでいく様子をシミュレーションして燃料を計算すると最大でループが 1,000,000,000 回おこなわれる可能性があり実行時間制限をオーバーしてしまう可能性があります。
そこで、1 ≦ N ≦ 1000という制約に注目して計算と場合分けを用いて燃料の総量を求めてみましょう。A m 地点から出発して B m 地点で一時停止するまでに必要な燃料を求めることを考えます。
出発から X m 移動するまでは 1 m あたり F_1 ml, それ以降は F_2 ml の燃料が必要なので、B-A が X m 以下か否かで場合分けをすることで次の式で燃料を計算することができます。
B-A ≦ X のとき・・・ F_1 × (B-A)
X ≦ B-A のとき・・・ F_1 × X + F_2 × (B-A-X)
この計算を全ての一時停止地点についておこなうことで O(N) で答えを求めることができます。最初の区間（スタートから最初の一時停止地点まで）と最後の区間（最後の一時地点から L m まで）の計算を忘れないように注意しましょう。
各停止地点（stops）と最終地点（L）を順に処理します。
停止地点間の距離を計算し、発進距離 X 以内なら F1 を適用し、それ以降は F2 を適用します。
すべての区間を加算して最終的な燃料消費量を出力します。
'''

<シミュレーション4　位置情報システム>
# utf-8
import sys

def interpolate_positions(n, positions):
    result = []
    index = 0  # 現在の位置情報のインデックス

    for T in range(101):  # T = 0 から 100 までの時刻を処理
        # T をカバーするデータ範囲を探す
        while index < n - 1 and positions[index + 1][0] <= T:
            index += 1
        
        t1, y1, x1 = positions[index]

        # ちょうどデータ点がある場合はそのまま出力
        if T == t1:
            result.append(f"{y1} {x1}")
        else:
            # 線形補間による計算
            if index < n - 1:
                t2, y2, x2 = positions[index + 1]
                yT = y1 + (T - t1) * (y2 - y1) // (t2 - t1)
                xT = x1 + (T - t1) * (x2 - x1) // (t2 - t1)
            else:
                # 最後のデータ点以降はそのまま維持
                yT, xT = y1, x1

            result.append(f"{yT} {xT}")
    
    return result

if __name__ == "__main__":
    input_data = sys.stdin.read().strip().split("\n")
    n = int(input_data[0])
    positions = [tuple(map(int, line.split())) for line in input_data[1:]]

    output = interpolate_positions(n, positions)
    print("\n".join(output))
'''
このコードは、与えられた時間 t における座標 (y, x) を補間しながら、T = 0 から 100 までの各時刻に対応する (y, x) を出力するプログラムです。
sys.stdin.read() を使って入力全体を取得し、改行 \n で分割。1行目の数値 n を取得（n は与えられた (t, y, x) のデータ数）。残りの行を (t, y, x) のタプルとして positions リストに格納。
result というリストを作成し、結果を格納する。index を使って positions のどこを見ているかを追跡。T = 0 から T = 100 まで順番に処理。
index は positions のどこを参照するかを示す変数。positions[index + 1][0]（次のデータの t）が T より小さい場合、次の index に進める。これにより リストを1回しかスキャンしない ので、効率的に動作する（O(n)）。
ちょうど T == t の場合すなわちT が positions[index] の t に一致している場合、その (y, x) をそのまま記録。補間せずにそのまま出力する。
補間が必要な場合index < n - 1 なら、次の t2, y2, x2 を取得。線形補間 で T に対応する yT, xT を計算：
(y2 - y1) / (t2 - t1) * (T - t1) を整数除算 // で計算。小数点以下を切り捨てる ことで、整数座標を求める。
 T が最後の t を超えた場合index == n - 1 で、補間するデータがないときは、最後の y1, x1 をそのまま出力。
interpolate_positions で求めた結果を改行で結合して出力。
'''

<条件判定1　郵便料金>
import sys

# 郵便料金を計算する関数
def calculate_postage(y, x, h, l1, l2, l3, l4, l5, m1, m2, m3, m4, m5, m6):
    # 高さが l1 以下の場合
    if h <= l1:
        # 縦と横の長い方の長さが l2 以下
        if max(y, x) <= l2:
            return m1
        # 縦と横の長さの和が l3 以下
        elif y + x <= l3:
            return m2
        # それ以外
        else:
            return m3
    # それ以外（高さが l1 を超える場合）
    else:
        # 縦・横・高さの最も長いものの長さが l4 以下
        if max(y, x, h) <= l4:
            return m4
        # 縦・横・高さの長さの和が l5 以下
        elif y + x + h <= l5:
            return m5
        # それ以外（体積に応じた料金）
        else:
            return y * x * h * m6

if __name__ == "__main__":
    # 入力の取得
    lines = sys.stdin.read().strip().split("\n")
    
    # 荷物の縦・横・高さを取得
    y, x, h = map(int, lines[0].split())
    
    # 料金判定に必要な定数を取得
    l1, l2, l3, l4, l5 = map(int, lines[1].split())
    m1, m2, m3, m4, m5, m6 = map(int, lines[2].split())
    
    # 料金計算
    result = calculate_postage(y, x, h, l1, l2, l3, l4, l5, m1, m2, m3, m4, m5, m6)
    
    # 結果出力
    print(result)
'''
このPythonプログラムは、指定されたルールに従って荷物の郵便料金を計算するものです。
calculate_postage 関数：この関数は、荷物の 縦(y), 横(x), 高さ(h) の情報と、料金計算に必要な定数 (l1, l2, l3, l4, l5) および 料金 (m1, m2, m3, m4, m5, m6) を受け取り、適切な郵便料金を計算して返します。
高さが l1 以下の場合　高さが l1 以下であれば、さらに次の条件をチェックします。
縦と横の長い方の長さが l2 以下の場合、→ 料金は m1 円になります。
縦と横の長さの和が l3 以下の場合、→ 料金は m2 円になります。
それ以外の場合→ 料金は m3 円になります。
高さが l1 を超える場合　高さが l1 を超える場合、次の条件をチェックします。
縦・横・高さの中で最も長いものが l4 以下の場合→ 料金は m4 円になります。
縦・横・高さの長さの合計が l5 以下の場合→ 料金は m5 円になります。
それ以外の場合（体積を考慮）→ 料金は 体積 (y * x * h) × 単価 m6 で決まります。

荷物のサイズを考慮し、適切な料金を決定する仕組みを持っています。条件は優先順位があり、上から順に適用されます。
高さが l1 以下の場合、縦・横のサイズで料金を決定。
高さが l1 を超える場合、縦・横・高さの最大値や合計値で料金を決定。
どの条件にも該当しない場合は体積に m6 を掛けた料金となる。
このように、ルールに従って荷物の郵便料金を計算できる仕組みになっています。
'''

<条件判定2　視力検査>
# utf-8
import sys

def determine_vision(n, results):
    vision_order = ["TA", "TB", "TC", "TD"]
    vision_map = {"TA": "A", "TB": "B", "TC": "C", "TD": "D"}
    success_count = {test: 0 for test in vision_order}
    fail_count = {test: 0 for test in vision_order}
    passed_tests = set()
    
    for test, result in results:
        if fail_count[test] >= 2:
            continue  # すでに不合格確定のテストは無視
        
        if result == "ok":
            success_count[test] += 1
            if success_count[test] >= 2:
                passed_tests.add(test)
        else:
            fail_count[test] += 1
    
    for test in vision_order:
        if test in passed_tests:
            return vision_map[test]
    
    return "E"

if __name__ == "__main__":
    input_lines = sys.stdin.read().strip().split("\n")
    N = int(input_lines[0])
    results = [line.split() for line in input_lines[1:N+1]]
    
    print(determine_vision(N, results))
'''
このコードは、視力検査の結果を解析し、被験者の視力を判定するプログラムです。
入力の読み込み
sys.stdin.read() を用いて標準入力からデータを読み込み、行ごとに分割 (split("\n")) する。
最初の行 (N) はテスト回数を表す整数として取得。
次の N 行は T_i J_i の形式（テストの種類と成功・失敗結果）なので、リスト results に格納。
変数の初期化
vision_order = ["TA", "TB", "TC", "TD"]
→ 視力の良い順にテストを並べたリスト。
vision_map = {"TA": "A", "TB": "B", "TC": "C", "TD": "D"}
→ テストの種類 (TA, TB など) と視力 (A, B など) の対応関係を定義。
success_count と fail_count の辞書を作成し、各テストの成功回数・失敗回数を記録。
passed_tests を空のセットとして用意し、合格したテスト を記録。
テスト結果の処理
ループを用いて results の各テスト (test, result) を処理する。
すでに2回失敗したテストは以降のデータを無視 (fail_count[test] >= 2 の場合 continue)。
結果が "ok"（成功）なら success_count[test] を増やし、2回成功でそのテストを合格とみなす。
結果が "ng"（失敗）なら fail_count[test] を増やす。
視力の決定
vision_order のリスト順（最も良い視力から順番に確認）で、合格したテストがあるかをチェック。
最も良いテストの合格 (passed_tests に存在) を見つけたら、vision_map から対応する視力 (A, B, C, D) を返す。
どのテストにも合格しなかった場合は "E" を出力。
ポイント
2回失敗で不合格が確定し、それ以降の成功はカウントしない。
2回成功したテストを合格とし、最も良いテスト結果を採用する。
すべて不合格なら "E" を出力する。
'''

<条件判定3　過剰コンプライアンス>
import sys

def censor_words(N, S, words):
    result = []
    len_S = len(S)
    half = (len_S + 1) // 2  # 奇数の場合、中央の文字を前後に含む
    
    for word in words:
        len_V = len(word)
        if len_V == len_S:
            if word == S:
                result.append("banned")  # 完全一致の場合 "banned" を追加
            elif word[:half] == S[:half]:
                result.append("x" * half + word[half:])  # 前半が一致する場合、該当部分を x に置換
            elif word[-half:] == S[-half:]:
                result.append(word[:-half] + "x" * half)  # 後半が一致する場合、該当部分を x に置換
            else:
                result.append(word)  # どちらも一致しない場合は変更なし
        else:
            result.append(word)  # 長さが異なる場合は変更なし
    
    return result

# 入力処理
input_data = sys.stdin.read().strip().split("\n")
N = int(input_data[0])  # 単語の数を取得
S = input_data[1]  # 放送禁止用語を取得
words = input_data[2:]  # 検閲対象の単語リストを取得

# 結果出力
for word in censor_words(N, S, words):
    print(word)  # 変換後の単語を出力
'''
放送禁止用語と各単語 V_1, ... について前半分・後ろ半分・文字列全体が一致するかを判定し、判定結果に応じて文字の一部を x に置き換えましょう。
S_i の文字数が奇数の場合は、文字列の前半と後半に中央の文字が含まれることに注意してください。

入力処理:
sys.stdin.read() を使用して入力データを一括で読み取り、改行 (\n) で分割。
N（単語の数）を取得。
S（放送禁止用語）を取得。
words（検閲対象の単語リスト）を取得。
検閲処理 (censor_words 関数):
放送禁止用語 S の長さを取得。
S の 前半部分・後半部分 を判定するために half = (len_S + 1) // 2 を計算。
len_S が奇数の場合、中央の文字も前半・後半に含まれるようにする。
各 V_i について以下の処理を行う：
V_i の長さが S と一致するか確認
一致する場合のみ、次の条件分岐へ進む。
一致しない場合はそのまま V_i をリストに追加。
V_i と S が完全一致する場合
"banned" に置き換える。
V_i の前半部分が S の前半部分と一致する場合
V_i の前半部分を "x" に置き換える。
V_i の後半部分が S の後半部分と一致する場合
V_i の後半部分を "x" に置き換える。
それ以外の場合
V_i をそのままリストに追加。
結果の出力:
censor_words 関数からの変換後リストを出力する。
'''

<全探索1　高い寿司を食いたい!>
# utf-8
import sys

def max_sushi_sum(N, K, P):
    # 配列を2倍にする（円環をリストで表現）
    P_extended = P + P  # 2N 個のリストになる
    
    # 最初のK個の合計
    current_sum = sum(P_extended[:K])
    max_sum = current_sum
    
    # スライディングウィンドウで最大値を求める
    for i in range(1, N):
        current_sum = current_sum - P_extended[i - 1] + P_extended[i + K - 1]
        max_sum = max(max_sum, current_sum)
    
    return max_sum

if __name__ == "__main__":
    # 入力を受け取る
    N, K = map(int, sys.stdin.readline().split())
    P = [int(sys.stdin.readline()) for _ in range(N)]
    
    # 計算して出力
    print(max_sushi_sum(N, K, P))
'''
配列を2倍にする:
P の最後と最初が隣接しているため、リストを2回繰り返した P_extended を作成し、N 個目まで見れば全ての区間を考慮できる。
スライディングウィンドウを使う:
先に最初の K 枚の合計 (current_sum) を計算。
その後、ウィンドウを 1 枚ずつずらしながら最大値を更新。

P_extended = P + P でリストを2倍にし、円形の繋がりを考慮。
current_sum に最初の K 枚の合計を入れる。
1 つずつスライドしながら max_sum を更新。
'''

<全探索2　コップの水>
＃ utf-8
import sys
from itertools import combinations

def max_water(N, X, w):
    max_fill = 0
    # 部分集合の全探索
    for i in range(1, N + 1):  # 1個以上のコップを選ぶ
        for comb in combinations(w, i):
            total = sum(comb)
            if total <= X:
                max_fill = max(max_fill, total)
    return max_fill

if __name__ == "__main__":
    # 入力の読み込み
    N, X = map(int, sys.stdin.readline().split())
    w = [int(sys.stdin.readline()) for _ in range(N)]
    
    # 最適な水の量を計算して出力
    print(max_water(N, X, w))
'''
この問題は、与えられた N 個の水の入った小さなコップの中から、合計が X ml を超えない範囲で最大量の水を選択する問題です。
ナップサック問題の部分和問題（Subset Sum Problem）に類似しており、ビット全探索または動的計画法で解くことができます。
itertools.combinations を使い、1 個以上のコップを選ぶすべての組み合わせを生成します。
各組み合わせの水の合計量を計算し、X を超えない最大値を探します。
max_fill を更新しながら最適解を見つけます。
'''

<全探索3　+1,-1,'1'+,+'1'>
# utf-8
# 操作を関数化すると見やすい.
def sousa(number, pat):
    if pat == 0:
        return number
    elif pat == 1:
        return number+1
    elif pat == 2:
        return number-1
    elif pat == 3:
        return number+10**len(str(number))
    else:
        return number*10+1

N = int(input())
X = []
for i in range(N):
    X.append(int(input()))
ans = 10**8
for i in range(N):
    for j in range(i+1, N):
        for k in range(5):
            for l in range(5):
                ans = min(ans, abs(sousa(X[i], k)-sousa(X[j], l)))
print(ans)
'''
今回の問題では 2 ≦ N ≦ 8 という小さな制約が与えられているので、手順 2 で求めることができる値を実際に全て求めてそれらのうち最小の値を求めましょう。
X_1,...,X_N のそれぞれについて 2.1 で作ることができる値を求めておき、それらの全ての組み合わせをループ処理などで列挙し、差の絶対値を求めて最小であれば更新するという操作をおこないましょう。
数字の先頭や末尾に 1 をつける操作を行う際は数値⇔文字列の変換を利用すると便利です。
'''

<全探索4　ストラックアウト>
# utf-8
import sys
import itertools

def calculate_max_score(scores, bingo_scores):
    # 全パネルの組み合わせ
    panels = list(range(9))
    max_add = 0
    base_score = sum(scores)
    
    # すべてのパネルの倒し方の順列を試す
    for perm in itertools.permutations(panels):
        opened_panel = [False] * 9
        tmp_add = 0
        
        for i in range(9):
            panel = perm[i]
            line = 0
            
            if panel == 0:
                line += (opened_panel[1] and opened_panel[2])
                line += (opened_panel[3] and opened_panel[6])
                line += (opened_panel[4] and opened_panel[8])
            elif panel == 1:
                line += (opened_panel[0] and opened_panel[2])
                line += (opened_panel[4] and opened_panel[7])
            elif panel == 2:
                line += (opened_panel[0] and opened_panel[1])
                line += (opened_panel[5] and opened_panel[8])
                line += (opened_panel[4] and opened_panel[6])
            elif panel == 3:
                line += (opened_panel[0] and opened_panel[6])
                line += (opened_panel[4] and opened_panel[5])
            elif panel == 4:
                line += (opened_panel[0] and opened_panel[8])
                line += (opened_panel[2] and opened_panel[6])
                line += (opened_panel[1] and opened_panel[7])
                line += (opened_panel[3] and opened_panel[5])
            elif panel == 5:
                line += (opened_panel[2] and opened_panel[8])
                line += (opened_panel[3] and opened_panel[4])
            elif panel == 6:
                line += (opened_panel[0] and opened_panel[3])
                line += (opened_panel[2] and opened_panel[4])
                line += (opened_panel[7] and opened_panel[8])
            elif panel == 7:
                line += (opened_panel[1] and opened_panel[4])
                line += (opened_panel[6] and opened_panel[8])
            elif panel == 8:
                line += (opened_panel[2] and opened_panel[5])
                line += (opened_panel[6] and opened_panel[7])
                line += (opened_panel[0] and opened_panel[4])
            
            if line > 0:
                tmp_add += bingo_scores[panel][line - 1]
            opened_panel[panel] = True
        
        max_add = max(max_add, tmp_add)
    
    return base_score + max_add

def main():
    input_data = sys.stdin.read().strip().split("\n")
    
    # パネルの得点取得
    scores = list(map(int, " ".join(input_data[:3]).split()))
    
    # ビンゴの得点取得
    bingo_scores = []
    for i, line in enumerate(input_data[3:]):
        bingo_scores.append(list(map(int, line.split())))
    
    # 最大スコアの計算
    max_score = calculate_max_score(scores, bingo_scores)
    
    # 結果を出力
    print(max_score)

if __name__ == "__main__":
    main()
'''
まず、問題の制約よりパネルを倒すことによって獲得する得点は必ず正の値となるので得点を最大化させるには明らかに全てのパネルを倒した方が良いということがわかります。
得点が最大のとき、全てのパネルを倒すので答えとなる値は s_1 + ... + s_9 + ビンゴができた時に得られる得点の最大値 となります。
この問題ではパネルの枚数が 9 枚であるので、全てのパネルを倒す順番の順列についてビンゴで獲得できる得点を計算し、その最大値を求めることができます。この処理でおこなわれるループの回数は 1 ~ 9 の値の並べ方の数と一致するので 9! となり、実行時間制限に間に合います。
'''

<文字列1　疑似数字>
# utf-8
S = input()
for i in range(len(S)):
    moji = []
    for j in range(len(S)):
        if(i<=j):
            if('0'<=S[i]<='9' and '0'<=S[j]<='9'):
                moji.append(S[i:j+1])
    moji.sort()
    for ss in moji:
        print(ss)
'''
最初の文字と最後の文字が数字(0~9)であるような文字列を「疑似数字」としているので、
与えられた文字列 S に含まれる全ての 2 文字の組み合わせ S[i], S[j] (i ≦ j) について「S[i] が数字である かつ S[j] が数字である」かを判定することで全ての疑似数字を列挙することができます。
'''

<文字列2　super long int>
# utf-8
X = input()
print(int(X[0:8])+int(X[8:16])+int(X[16:24])+int(X[24:32]))
'''
問題文中で与えられた通りハッシュ値を求めましょう。
入力された数値が大きいため、入力を数値として受け取ってしまうと言語によってはオーバーフローなどが発生してしまいます。
そこで入力を文字列して扱い、部分文字列を取得してそれを数値に変換することで 8 桁ずつに区切って得られる数字を取得しましょう。
'''

<文字列3　p4!2@>
# utf-8
S = input()
ans = -1
pai = [["p"],["a","4","@"],["i","1","!"],["z","2"],["a","4","@"]]
ego = []
for a in pai[0]:
    for b in pai[1]:
        for c in pai[2]:
            for d in pai[3]:
                for e in pai[4]:
                    ego.append(a+b+c+d+e)
for i in range(len(S)-4):
    if S[i:i+5] in ego:
        ans = max(ans,0)
    if S[i:i+5]=="paiza":
        ans = max(ans,1)
if(ans==1):
    print("paiza")
elif(ans==0):
    print("leet")
else:
    print("nothing")
'''
"paiza" も Leet 表記された "paiza" も 5 文字であるため、与えられた文字列の全ての連続した 5 文字について "paiza" か Leet かいずれでもないかを判定すれば良いです。
Leet かを判定するためにあらかじめ考えられる Leet 文字列を列挙しておくと良いです。列挙の際は Leet を 「aとそのLeet + iとそのLeet + zとそのLeet + aとそのLeet」 という具合に組み合わせて列挙すると良いでしょう。
'''

<配列1　平面で計算>
# utf-8
N=int(input())
A = []
for i in range(N):
    A.append(list(map(int,input().split())))
ans = 0
# 横列
for i in range(N):
    res = 0
    for j in range(N):
        res += A[i][j]
    ans = max(ans,res)
# 縦列
for i in range(N):
    res = 0
    for j in range(N):
        res += A[j][i]
    ans = max(ans,res)
# 斜め（左上から右下へ）
res = 0
for i in range(N):
    res += A[i][i]
    ans = max(ans,res)
# 斜め（左下から右上へ）
res = 0
for i in range(N):
    res += A[N-1-i][i]
    ans = max(ans,res)
print(ans)
'''
縦列・横列・斜め列の和を全て求めてそれらの最大値を求めましょう。
和を求める際にどの列・行を扱っているかわからなくなったら、インデックスの値を出力したり、配列の小さいケースを用いてデバッグするなどしましょう。
'''

<配列2　立体で計算>
# utf-8
import sys

def max_3d_sum(N, A):
    max_sum = float('-inf')
    
    # 各軸に沿った和を計算
    for i in range(N):
        for j in range(N):
            # Z軸方向（縦列）
            max_sum = max(max_sum, sum(A[k][i][j] for k in range(N)))
            # Y軸方向（横列）
            max_sum = max(max_sum, sum(A[i][k][j] for k in range(N)))
            # X軸方向（横列）
            max_sum = max(max_sum, sum(A[i][j][k] for k in range(N)))
    
    # 斜め列（各面内の対角線）
    for i in range(N):
        max_sum = max(max_sum, sum(A[i][k][k] for k in range(N)))  # 各XY面の対角線
        max_sum = max(max_sum, sum(A[i][k][N-1-k] for k in range(N)))
        max_sum = max(max_sum, sum(A[k][i][k] for k in range(N)))  # 各YZ面の対角線
        max_sum = max(max_sum, sum(A[k][i][N-1-k] for k in range(N)))
        max_sum = max(max_sum, sum(A[k][k][i] for k in range(N)))  # 各XZ面の対角線
        max_sum = max(max_sum, sum(A[k][N-1-k][i] for k in range(N)))
    
    # 立方体全体を貫く斜め列
    max_sum = max(max_sum, sum(A[k][k][k] for k in range(N)))  # 主対角線
    max_sum = max(max_sum, sum(A[k][k][N-1-k] for k in range(N)))
    max_sum = max(max_sum, sum(A[k][N-1-k][k] for k in range(N)))
    max_sum = max(max_sum, sum(A[N-1-k][k][k] for k in range(N)))
    
    return max_sum

# 入力処理
if __name__ == "__main__":
    input_data = sys.stdin.read().strip().split("\n")
    N = int(input_data[0])
    values = list(map(int, " ".join(input_data[1:]).split()))
    
    # 3Dリストに変換
    A = [[[values[i * N * N + j * N + k] for k in range(N)] for j in range(N)] for i in range(N)]
    
    print(max_3d_sum(N, A))
'''
sys.stdin.read() を使って標準入力を一括で読み込みます。
strip() で前後の不要な改行を除去し、split("\n") で改行ごとに分割してリスト input_data に格納します。最初の行には N（立方体のサイズ）が与えられるので、int に変換して取得します。
2行目以降には数値が空白区切りで並んでいるため、それらを " ".join(input_data[1:]) で1つの文字列に統合し、split() で分割して int に変換し、リスト values に格納します。
リスト values を N × N × N の三次元リスト A に変換します。
i は立方体の奥行き方向（Z軸）
j は行（Y軸）
k は列（X軸）
要素のインデックスは i * N * N + j * N + k で計算できます。変数 max_sum を初期化し、負の無限大（-inf）に設定します。
(1) 軸方向の列の和
各方向の直線上の和を計算します。
A[k][i][j] → Z軸方向（高さ方向）の列の和
A[i][k][j] → Y軸方向（縦列）の和
A[i][j][k] → X軸方向（横列）の和
(2) 各面内の対角線の和
各 XY・YZ・XZ 平面内の対角線の和を計算します。
A[i][k][k] → XY 平面の主対角線
A[i][k][N-1-k] → XY 平面の副対角線
A[k][i][k] → YZ 平面の主対角線
A[k][i][N-1-k] → YZ 平面の副対角線
A[k][k][i] → XZ 平面の主対角線
A[k][N-1-k][i] → XZ 平面の副対角線
(3) 立方体全体を貫く対角線
立方体全体を貫く4本の斜め線の和を求めます。
(0,0,0) → (N-1,N-1,N-1)
(0,0,N-1) → (N-1,N-1,0)
(0,N-1,0) → (N-1,0,N-1)
(N-1,0,0) → (0,N-1,N-1)
計算された max_sum を出力します。
'''

<計算1　マンハッタン距離>
P_x, P_y = map(int, input().split())
N = int(input())
yu1 = -1
yuk1 = 10**10
yu2 = -1
yuk2 = 10**10
yu3 = -1
yuk3 = 10**10
ma1 = -1
man1 = 10**10
ma2 = -1
man2 = 10**10
ma3 = -1
man3 = 10**10
for i in range(N):
    x, y = map(int, input().split())
    if (P_x-x)**2 + (P_y-y)**2 < yuk1:
        yuk3 = yuk2
        yu3 = yu2
        yuk2 = yuk1
        yu2 = yu1
        yuk1 = (P_x-x)**2 + (P_y-y)**2
        yu1 = i+1
    elif (P_x-x)**2 + (P_y-y)**2 < yuk2:
        yuk3 = yuk2
        yu3 = yu2
        yuk2 = (P_x-x)**2 + (P_y-y)**2
        yu2 = i+1
    elif (P_x-x)**2 + (P_y-y)**2 < yuk3:
        yuk3 = (P_x-x)**2 + (P_y-y)**2
        yu3 = i+1
    if abs(P_x-x)+abs(P_y-y) < man1:
        man3 = man2
        ma3 = ma2
        man2 = man1
        ma2 = ma1
        man1 = abs(P_x-x)+abs(P_y-y)
        ma1 = i+1
    elif abs(P_x-x)+abs(P_y-y) < man2:
        man3 = man2
        ma3 = ma2
        man2 = abs(P_x-x)+abs(P_y-y)
        ma2 = i+1
    elif abs(P_x-x)+abs(P_y-y) < man3:
        man3 = abs(P_x-x)+abs(P_y-y)
        ma3 = i+1
print(yu1)
print(yu2)
print(yu3)
print(ma1)
print(ma2)
print(ma3)
'''
各地点についてユークリッド距離とマンハッタン距離を求めて、比較や並び替えをおこないましょう。
ユークリッド距離を求める際は小数の扱いに注意しましょう。また小数を用いずとも sqrt(A) < sqrt(B) であるならば A < B であり、その逆も成り立つため sqrt の中身 (x_1 - x_2)^2 + (y_1 - y_2)^2 を比較することで距離の大小関係を求めることができます。
'''

<計算2　疑似乱数>
# utf-8
X, M, N=map(int, input().split())
ans = 0
res = 1
for i in range(N):
    res *= X
    res %= M
    ans += res
    ans %= M
    print(ans)
'''
rnd_i = (X^i + X^{i-1} ... + X^1) mod M の計算をおこないましょう。
(X^i + X^{i-1} ... + X^1) は大きな値になりオーバーフローの可能性があるので、細かく mod M に変換して計算をおこないましょう。
'''


<偶奇の判定>
step1　未知数個の数の受け取り
# utf-8
a = list(map(int, input().split()))

i = 0
while True:
    print(a[i])
    if a[i] == -1:
        break
    i += 1
    
'''
リストとして 1 行で受け取り、1 つずつ for 文を用いて出力します。
'''

step2　未知数個の文字列の受け取り
# utf-8
s = list(input().split())

i = 0
while True:
    print(s[i])
    if s[i] == "EOF":
        break
    i += 1
    
step3　奇数だけ出力
# utf-8
N = int(input())
a = list(map(int, input().split()))

for i in range(N):
    if a[i] % 2 == 1:
        print(a[i])
        
step4　割り切れる数だけ出力
# utf-8
N = int(input())
a = list(map(int, input().split()))

for i in range(N):
    if a[i] % 3 == 0:
        print(a[i])
        
final　偶奇の判定
# utf-8
N = int(input())
a = list(map(int, input().split()))

for i in range(N):
    if a[i] % 2 == 0:
        print("even")
    elif a[i] % 2 == 1:
        print("odd")

<約数の列挙>
step1　 各桁の和
# utf-8
N = int(input())

digit_sum = 0
while N > 0:
    digit_sum += N % 10
    N //= 10

print(digit_sum)

step2　 カウント変数を使った計算
# utf-8
N = int(input())
M = list(map(int, input().split()))

for i in range(N):
    print(M[i] * (i + 1))
    
step3　 2で何回割れる？
# utf-8
N = int(input())

div_count = 0
while True:
    if N % 2 == 0:
        N //= 2
        div_count += 1
    else:
        break

print(div_count)

'''
Python の場合、While True: と記述することで永遠にループを回すことができます。
N が 2 で割れなくなった場合に breakすることで無限ループからブレイクする。
'''

step4　 任意の数で何回割れる？
# utf-8
N, M = map(int, input().split())

div_count = 0
while True:
    if N % M == 0:
        N //= M
        div_count += 1
    else:
        break

print(div_count)
'''
Python の場合、While True: と記述することで永遠にループを回すことができます。
N が M で割れなくなった場合に breakすることで無限ループからブレイクするようにしましょう。
'''
step5　 10進数から2進数に変換
# utf-8
N = int(input())

print(bin(N)[2:])

step6　 10進数からM進数に変換
# utf-8
N, M = map(int, input().split())

base = ""
while N > 0:
    base += str(N % M)
    N //= M

print(base[::-1])

'''
N が自然数であれば、M で割った余りを取ると、M 進数に変換した際の M^0 の桁を求めることができます。
M^0 の位を求めたら N を M で割り、もう一度同じ操作を繰り返すと M^1 の位を求めることができます。
これを繰り返していくことで N を M 進数に変換することができました。
'''
step7　 NがMずつ増えたときにいつKを越える？
# utf-8
N, M, K = map(int, input().split())

num = 0
while N <= K:
    N += M
    num += 1

print(num)

'''
条件を N <= K とすることで、N が K 以下の間繰り返すことができます。
条件を間違えて N < K としてしまうと、N が K を越えずに、丁度 K になった場合でも繰り返すのをやめてしまうので注意してください。
'''

step8　 毎日増加するお金
# utf-8
A, B = map(int, input().split())

num = 0
while A <= B:
    A = int(A * 1.1)
    num += 1

print(num)

step9　 階乗の計算
# utf-8
from math import factorial

N = int(input())
print(factorial(N))
'''
Python の場合、 math モジュールの factorial 関数を使用すると、階乗の計算を行うことができます。
'''

step10　階乗の末尾に0はいくつ付く？
# utf-8
N = int(input())

count_zero = 0
while N > 0:
    count_zero += N // 5
    N //= 5

print(count_zero)

step11　加算された数列の最大値
# utf-8
N = int(input())
a = list(map(int, input().split()))

ans = 0
for i in range(N):
    ans = max(ans, a[i] + (i + 1))

print(ans)

step12　加算された数列の最小値
# utf-8
N = int(input())
a = list(map(int, input().split()))

ans = 10000
for i in range(N):
    ans = min(ans, a[i] + (i + 1))

print(ans)

step13　1はどこにある？
# utf-8
N = int(input())
a = list(map(int, input().split()))

for i in range(N):
    if a[i] == 1:
        print(i + 1)
        
'''
ループ処理を用いて a[0] ~ a[N-1] を順番に見ていき、1 だった場合はその場所を改行区切りで出力します。
位置を出力するとき、a_1 を 1 番目とするので、i+1 を出力しています。
'''

step14　約数の個数
# utf-8
N = int(input())

div_count = 0
for i in range(1, N + 1):
    if N % i == 0:
        div_count += 1

print(div_count)

final　 約数の列挙

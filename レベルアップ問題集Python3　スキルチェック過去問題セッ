# Q. Eメールアドレス D(殿堂入り)
# utf-8
s = input()
t = input()

print(f"{s}@{t}")
'''
メールアドレスの @ よりも前の部分は「ローカル名」と呼ばれ、後ろの部分は「ドメイン名」と呼ばれます。
入力で与えられる S と T を @ で区切って出力してください。
'''

# Q. N倍の文字列　D(殿堂入り)
# utf-8
N = int(input())
print("*" * N)

# Q. 単語のカウント C
step2 「単語のカウント」を解くために:part1
# utf-8
word_list = input().split()
	
for word in word_list:
	print(word)
'''
入力された単語を配列やリストに格納します。
配列やリストの名前に特に決まりはありませんが、単語(word)の一覧(lsit)であることを表現する意図を持ってword_listと名付けています。
繰り返し処理を用いて、その配列やリストの要素を順に出力します。
'''

step3 「単語のカウント」を解くために:part2
# utf-8
word_list = input().split()
if "red" in word_list:
    print("Yes")
else:
    print("No")
'''
入力された単語を配列やリストに格納します。
　　配列やリストの名前に特に決まりはありませんが、この解説では、単語(word)の一覧(lsit)であることを表現する意図を持ってword_listと名付けています。
演算子などを使って、配列やリストの中に red が含まれているか調べます。
結果に応じてYesかNoを出力します。

Python では in 演算子を使うことで、リストの中に特定の値が含まれているか否か調べることができます。
'''

step4 「単語のカウント」を解くために:part3
# utf-8
word_list = input().split()
order = []

for word in word_list:
    if word in order:
        print("already_been")
    else:
        order.append(word)
        print(word)
'''
orderという配列やリストを用意します。
　　入力された単語を入力された順番(order)で格納していくので、orderと名付けています。
条件分岐を用いて以下のような処理をします
　　もし、与えられた単語が既にorderに含まれていれば、その単語は既出なので、already_beenという文字列を出力します。
　　もし、与えられた単語がまだorderに含まれていなければ、その単語を出力します。
　　この時、次に同じ単語が入力された時に正しく分岐されるよう、入力された単語をorderに追加します。
'''

step5 「単語のカウント」を解くために:part4
# utf-8
word_list = input().split()
order = []

for word in word_list:
    if word not in order:
        order.append(word)
        print(word)
'''
orderという配列やリストを用意します。
　　入力された単語を入力された順番(order)で格納していくので、orderと名付けています。
もし、与えられた単語がまだorderに含まれていなければ、その単語をorderに追加し、出力します
　　（今回の問題では、与えられた単語が既にorderに含まれている場合にしなければならない処理は存在しません。）
'''

step6 「単語のカウント」を解くために:part5
# utf-8
word_list = input().split()
order = []
count = []
for word in word_list:
    if word in order:
        count.append(1)
    else:
        order.append(word)
        print(word)
        
for c in count:
    print(c)
'''
countという配列やリストを用意します。
　　最終的には単語の出現した回数を格納するのでcountと名付けていますが、この問題では1だけを格納します。
もし、与えられた単語が orderに含まれていれば、count に 1 を追加します。
もし、与えられた単語が order に含まれていなければ、その単語をorder に追加し、出力します
ループを用いて、count の要素をひとつずつ出力します。
'''

step7 「単語のカウント」を解くために:part6
# utf-8
word_list = input().split()
S = input()
print(word_list.index(S))
'''
文字列 S を標準入力から受け取ります。
word_listの中で S が登場するインデックス番号を出力します。
'''

step8 「単語のカウント」を解くために:part7
word_list = input().split()
order = []
count = []
for word in word_list:
    if word in order:
        count[order.index(word)] += 1
    else:
        count.append(1)
        order.append(word)
        print(word)
for c in count:
    print(c)
'''
入力から、既にorderに含まれている単語が与えられた場合、countの数を1増やします。そうすることで単語の出現回数を数えます。
「既にorderに含まれている単語が与えられた場合」と「orderに含まれていない単語が与えられた場合」で処理を分岐させます。
　　既にorderに含まれている単語が与えられた場合、countの数を1増やします。
　　このとき、countの中の何番目の数字がどの単語に対応しているかを分かるようにしておく必要があります。
　　そのため、orderの中の単語の順番と、countの中の数字の順番を対応させる必要があります。
　　例えば、入力例1のケースでは、orderの 0 番目に "red" が保存されているので、countの 0 番目に "red" の出現回数を保存します。
'''

単語のカウント（力試し編）& final 単語のカウント
# utf-8
li = input().split()

m = []
k = []

for i in li:
    if i in m:
        k[m.index(i)] += 1
    else:
        m.append(i)
        k.append(1)

for i in range(len(m)):
    print(m[i], k[i])
'''
英単語を出現した順番で保存しておく配列と、その出現回数を記録する配列を用意し、
英単語を順に見ていきながら処理していけばよいです。
'''

# Q. 検索履歴 C
# utf-8
n = int(input())

re = []

for i in range(n):
    s = input()

    if s in re:
        re.pop(re.index(s))

    re.append(s)

for i in range(len(re)):
    print(re[-i - 1])
'''
連結リスト等のデータ構造を用いて、問題文にある通りに履歴を作ってもよいのですが、以下のようにすると簡単に解くことが出来ます。
検索ワードを W_N から W_1 まで逆順に見ていき、そのワードが既出でなければ出力する。
'''

# Q. 宝くじ C
# utf-8
a = input()
n = int(input())

for i in range(n):
    b = input()

    if a == b:
        print("first")
    elif abs(int(a) - int(b)) == 1:
        print("adjacent")
    elif a[2:] == b[2:]:
        print("second")
    elif a[3:] == b[3:]:
        print("third")
    else:
        print("blank")

# Q. 野球の審判 C
step2 「野球の審判」を解くために:part1
# utf-8
N = int(input())
print(N)
'''
標準入力を用いて、入力を受け取ります。
　　このとき、整数型で受け取ると、この先の実装がスムーズに進みます。
受け取った値を変数に代入します。
　　変数の名前に特に決まりはありませんが、この入力について問題文中で N と表記されているので、実装例では変数名も N にして、合わせています。
　　他の名付け方としては「投球」や「投球数」を想起できる英語表現を採用するパターンもあります。
　　その場合、pitch や number_of_pitches などの候補が挙がるでしょう。
変数の値を標準出力します。
'''

step3 「野球の審判」を解くために:part2
# utf-8
N = int(input())
for i in range(N):
    print("strike or ball")
'''
標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。【ここまでが前の問題でやった内容です】
N 回実行される繰り返し処理を書きます。
繰り返し処理の中で strike or ball という文字列を出力します。
'''

step4 「野球の審判」を解くために:part3
# utf-8
N = int(input())
for i in range(N):
    s = input()
    print(s)
'''
標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。
N 回実行される繰り返し処理を書きます。【ここまでが前の問題でやった内容です】
　　4 ~ 6 の手順が N 回実行されるように書きます
入力を 1 行受け取ります。(strike か ball が入力されます)
受け取った値を変数に代入します。（実装例では変数名を s としています。）
変数の値を出力します。
'''

step5 「野球の審判」を解くために:part4
# utf-8
N = int(input())
for i in range(N):
    s = input()
    if s == "strike":
        print("strike!")
    else:
        print(s)
'''
標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。
N 回実行される繰り返し処理を書きます。
　　4 ~ 6 の手順が N 回実行されるように書きます。
入力を 1 行受け取ります。(strike か ball が入力されます)
受け取った値を変数に代入します。【ここまでが前の問題でやった内容です】
5 の変数の値によって処理が変わる条件分岐を書きます。
　　もし、変数の値が "strike" ならば "strike!" を出力します
　　そうでないならば、変数の値をそのまま出力します
'''

step6 「野球の審判」を解くために:part5
# utf-8
N = int(input())
strike_count = 0
for i in range(N):
    s = input()
    if s == "strike":
        strike_count += 1
        print("strike!")
        print(strike_count)
    else:
        print(s)
'''
標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。
N 回実行される繰り返し処理を書きます。
　　4 ~ 6 の手順が N 回実行されるように書きます。
入力を 1 行受け取ります。(strike か ball が入力される)
受け取った値を変数に代入します。
5 の変数の値によって処理が変わる条件分岐を書きます。【ここまでが前の問題でやった内容です】
　　もし、変数の値が strike ならば strike! を出力します
　　そうでないならば、変数の値をそのまま出力します
ループの処理が始まる前に、strikeの数を数えるための変数を用意し、0 を代入します
　　実装例では変数名を strike_count としています。
　　何も受け取っていない（１球も投げていない）段階では strike は 0 個なので、変数に 0 を代入します。
6 で作った条件分岐で 「strike だった場合に実行される処理」に以下の処理を加えます
　　・7 で作った変数の値に +1 する処理
　　　　プログラムのこの部分が実行されるということは、今回の投球結果が strike だったということなので、「strike の数を数える変数」の値に 1 を足します。
　　・7 で作った変数の値を出力する
　　　　このとき、先に足してから、そのあと出力されるよう、順番に留意して書いてください。
'''

step7 「野球の審判」を解くために:part6
# utf-8
N = int(input())
strike_count = 0
for i in range(N):
    s = input()
    if s == "strike":
        strike_count += 1
        if strike_count == 3:
            print("out!")
        else:
            print("strike!")
    else:
        print(s)
'''
標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。
N 回実行される繰り返し処理を書きます。
　　4 ~ 6 の手順が N 回実行されるように書きます。
入力を 1 行受け取ります。(strike か ball が入力される)
受け取った値を変数に代入します。
5 の変数の値によって処理が変わる条件分岐を書きます。
　　もし、変数の値が strike ならば strike! を出力します
　　そうでないならば、変数の値をそのまま出力します
ループの処理が始まる前に、strikeの数を数えるための変数を用意し、0 を代入します
　　実装例では変数名を strike_count としています。
　　何も受け取っていない（１球も投げていない）段階では strike は 0 個なので、変数に 0 を代入します
6 で作った条件分岐で 「strike だった場合に実行される処理」に以下の処理を加えます。
　　・7 で作った変数に +1 する処理【ここまでが前の問題でやった内容です】
　　・もし、7 で作った変数の値が 3 であれば、out! と出力し、そうでないならば strike! と出力する条件分岐
　　　　条件分岐の中に条件分岐を書きます。
'''

step1 野球の審判（力試し編）& final 野球の審判
# utf-8
n = int(input())

ball = 0
strike = 0

for i in range(n):
    s = input()

    if s == "strike":
        strike += 1

        if strike == 3:
            print("out!")
        else:
            print("strike!")
    else:
        ball += 1

        if ball == 4:
            print("fourball!")
        else:
            print("ball!")

# Q. みかんの仕分け C(殿堂入り)
step2 「みかんの仕分け」を解くために:part1
# utf-8
N, M = map(int, input().split())
print(N, M)

for _ in range(M):
    w = int(input())
    print(w)
'''
標準入力を用いて、入力を受け取ります。
　　このとき、整数型で受け取ると、この先の実装がスムーズに進みます。
　　1 行目の入力は空白区切りで 2 つ与えられることに注意しましょう。
受け取った値をそれぞれ変数に代入します。
　　変数の名前に特に決まりはありませんが、この入力について問題文中で N M と表記されているので、実装例では変数名も N M にして、合わせています。
変数の値を空白区切りで標準出力します。
M 回実行される繰り返し処理を書きます。
　　5 ~ 7 の手順が M 回実行されるように書きます
標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。（実装例では変数名を w としています）
変数の値を標準出力します。
'''

step3 「みかんの仕分け」を解くために:part2
# utf-8
N, M = map(int, input().split())

for _ in range(M):
    w = int(input())

    if w % N == 0:
        print("Yes")
    else:
        print("No")
'''
1 行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。
M 回実行される繰り返し処理を書きます。
　　3 ~ 4 の手順が M 回実行されるように書きます
標準入力を用いて入力を受け取り、受け取った値を変数に代入します。
3 で受け取った変数の値によって処理が変わる条件分岐を書きます。
　　変数の値が N の倍数なら Yes を出力する。
　　　　変数の値を N で割った余りが 0 であればその値は N の倍数です。
　　そうでないなら No を出力する。
'''

step4 「みかんの仕分け」を解くために:part3
# utf-8
N, M = map(int, input().split())

k1, k2 = map(int, input().split())

for _ in range(M):
    w = int(input())

    if abs(k1 - w) < abs(k2 - w):
        print(k1)
    else:
        print(k2)
'''
1 行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。
2 行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。（実装例では変数名を k1, k2 としています）
M 回実行される繰り返し処理を書きます。
　　4 ~ 5 の手順が M 回実行されるように書きます
標準入力を用いて入力を受け取り、受け取った値を変数に代入します。（実装例では変数名を w としています）
4 で受け取った変数の値が 2 で受け取った変数のどちらに近いかを判定する条件分岐を書きます。
　　箱に書かれた数とみかんの重さの差の絶対値が小さいほど、みかんの重さはその箱の数に近いといえます。
　　・ k1 の方が k2 よりも w に近いなら、つまり k1 - w の絶対値が k2 - w の絶対値より小さいなら k1 の値 を出力します。
　　・ そうでないなら k2 の値 を出力します。
　　　　重さが一番近い箱が複数ある場合、数が大きい方の箱に仕分けられることに注意してください。条件より k_1 < k_2 なので、k1 - w の絶対値が k2 - w の絶対値が等しいなら k2 の値 を出力します。
'''

step5 「みかんの仕分け」を解くために:part4
# utf-8
N, M = map(int, input().split())

P = int(input())
K = list(map(int, input().split()))

for _ in range(M):
    w = int(input())
    ans = -100000  # 絶対に答えにならないもので初期化

    for i in range(P):
        if K[i] % N == 0:
            if abs(K[i] - w) <= abs(ans - w):
                ans = K[i]

    print(ans)
'''
1 行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。
2 行目の入力を標準入力を用いて受け取り、受け取った値を変数に代入します。
3 行目の入力を標準入力を用いて受け取り、受け取った値を変数に代入します。
　　このとき配列に格納しておくと、この先の実装がスムーズに進みます。（実装例では配列名を K としています）
M 回実行される繰り返し処理を書きます。
　　5 ~ 10 の手順が M 回実行されるように書きます
標準入力を用いて入力を受け取り、受け取った値を変数に代入します。
これまでにみた箱に書かれた数字のうち、みかんの重さに最も近いものを格納する変数を用意します。（実装例では変数名を ans としています）
　　変数の初期値として絶対に答えにならない数値を入れておきます。（実装例では初期値を -10000 としています）
P 回実行される繰り返し処理を書きます。（実装例ではループ変数を i としています）
　　8 ~ 9 の手順が P 回実行されるように書きます
3 で受け取った配列 K の i 番目の値によって処理が変わる条件分岐を書きます。（配列 K の i 番目の値を k_i と表します）
　　・ k_i が N の倍数であるなら 9 の処理を続けます。
　　・ そうでないなら、なにもしません。
k_i が N の倍数であるなら、現在の解答候補よりみかんの重さに近い箱であるかを確認します。
　　・ k_i と w の差の絶対値が ans と w の差の絶対値以下であるなら、ans を k_i で更新します。
　　　　条件より配列 K の値は昇順であり、重さが一番近い箱が複数ある場合は数が大きい方の箱に仕分けられます。そのため、ans と w の差の絶対値"未満"ではなく"以下"とすることに注意してください。
　　・ そうでないなら、なにもしません。
ans の値を出力します。
6 では、より厳密には、変数の初期値として絶対に答えにならない かつ 実際の解答に影響を与えない数値を選ぶ必要があります。
例えば ans の初期値に -1 を選んだ場合は N = 5, w = 1, K = [ 5, 10, 15 ] の場合に、 9 の処理で ans が更新されることがなく初期値の -1 を誤って出力してしまいます。
このように初期値の設定ミスは一部のテストケースで不正解になる可能性があります。方針があっているのに不正解になってしまう場合は、変数の初期値を見直してみましょう。
'''

step6 「みかんの仕分け」を解くために:part5
# utf-8
N, M = map(int, input().split())

W = int(input())

for i in range(1, 1501):
    if i % N == 0:
        print(i, abs(i - W))
'''
1 行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。
2 行目の入力を標準入力を用いて受け取り、受け取った値を変数に代入します。（実装例では変数名を w としています）
1500 回実行される処理を書きます。
　　ループ変数が 1 から 1500 まで 1 ずつ増加するようにし、4 の処理が 1500 回実行されるようにします。
ループ変数の値によって処理が変わる条件分岐を書きます。
　　・ ループ変数が N の倍数であるなら、「ループ変数」と「 w とループ変数の差の絶対値」を空白区切りで出力します。
　　・ そうでないならなにもしません
ここからは、元の問題「みかんの仕分け」について、どのくらい大きい数字が書かれた箱まで調べたらよいかを考えます。
まず、元の問題は「みかんの重さに一番近い数が書かれた箱」を探す問題でした。
そしてこの問題の出力を見てみると、どのテストケースでも箱に書かれた数が 1 ~ 1100くらい の範囲に「箱に書かれた数字と w の差の絶対値」が最小となる箱、つまり元の問題の答えとなる箱が存在していることがわかります。
よって、元の問題では 1100 までの箱を調べれば十分です。
このような考え方で十分ですが、以下により詳しい考え方を示します。詳しく知りたい方やあまりピンとこない方は参考にしてください。
みかんの重さを w とします。
この問題の出力をみると次のことがわかります
　　・ 箱に書かれた数字が w より小さいとき、箱に書かれた数字が大きくなるほど「箱に書かれた数字と w の差の絶対値」は小さくなる
　　・ 箱に書かれた数字が w 以上のとき、箱に書かれた数字が大きくなるほど「箱に書かれた数字と w の差の絶対値」は大きくなる
1 より、次のことがわかります。
　　みかんの重さより小さい数のなかで最大の N の倍数が書かれたの箱 か みかんの重さ以上の数の中で最小の N の倍数が書かれた箱 のどちらかが、「箱に書かれた数字と w の差の絶対値」が最も小さくなる。つまり、答えになる箱はこのどちらかである。
　　例えば N = 10, w = 22 のとき、みかんの重さより小さい数のなかで最大の N の倍数は 20、みかんの重さ以上の数の中で最小の N の倍数は 30 です。
2 より、答えになる可能性がある最大の数は「みかんの重さ以上の数の中で最小の N の倍数」であるとわかります。
調べる数の上限は答えになる可能性がある最大の数です。みかんの重さによって調べる数の上限を変えてもよいですが少し実装が複雑になるため、すべての入力に対して 1 つの上限を考えます。
　　「みかんの重さ以上の数の中で最小の N の倍数」が最大になるときはみかんの重さが最大になるときであるため、みかんの重さの最大値 w = 1000 のときについて考えればよいです。
　　このとき「みかんの重さ以上の数の中で最小の N の倍数」は 「 1000 以上の数で最小の N の倍数」と言い換えることができます。
　　ここで、1000 以上 1100 以下の数の中に N ( 1 ≦ N ≦ 100 ) の倍数は必ず 1 つ以上存在します。（ i 番目の N の倍数と i + 1 番目の N の倍数の差は N であり、条件より N ≦ 100 であるため）
4 より、調べる数の上限は 1100 で十分であることがわかります。
'''

step1 みかんの仕分け（力試し編）& final みかんの仕分け
# utf-8
N, M = [int(i) for i in input().split()]

for _ in range(M):
    x = int(input())
    ans = -100000

    for w in range(1, 1201):
        if w % N != 0:
            continue
        
        if abs(x - w) <= abs(x - ans):
            ans = w

    print(ans)
'''
みかんの重さが最大で 1000 程度なので、みかんを入れる箱の候補は 1 ~ 1200 の箱です。
( N が最大 100 より、1100 の箱とかも候補になるので、余分に調べることにする )
各みかんごとにどの箱に入れるのが良いかを計算することができます。
みかん 1 つにつき、最大 1000 回程度の計算が行われるので、M(≦10) 個のみかんそれぞれに計算を行っても 10000 回程度の計算しか行われないため、制限時間に余裕をもって間に合います。
重さが x のみかんを入れる箱の求め方を考えます。
箱の候補は 1 ~ 1200 なので、変数 : w が 1~1200 の範囲で for 文を回します。
みかんを入れる箱には N の倍数が書かれているので、w が N の倍数かどうかを判定する必要があります。
w が N の倍数かどうかは、以下のように判定することができます。
w % N == 0 : (w を N で割ったあまりが 0 かどうか)
候補の箱の中で、箱に書かれた数が x に最も近い箱(複数ある場合は大きい方)を探す必要があります。
以下の変数を定義して for 文を回すと良いでしょう。
ans := これまでにみた候補の箱に書かれた番号のうち、x に最も近いもの
'''
# Q. 残り物の量　C(殿堂入り)
# utf-8
# utf-8
def calculate_leftover_amount(m, p, q):
    """
    生鮮食品の売れ残り量を計算する関数

    Args:
        m (int): 生鮮食品の仕入れ量(kg)
        p (int): 生のまま売れた割合(%)
        q (int): お総菜に変換された売れ残りの割合(%)

    Returns:
        float: 最終的な売れ残り量(kg)
    """
    # 生鮮食品の売れ残り量を計算
    leftover_amount = m * (100 - p) / 100

    # お総菜に変換された売れ残り量を計算
    leftover_amount = leftover_amount * (100 - q) / 100

    return leftover_amount


# 生鮮食品の仕入れ量、生のまま売れた割合、お総菜に変換された売れ残りの割合を入力
m, p, q = map(int, input().split())

# 生鮮食品の売れ残り量を計算
leftover_amount = calculate_leftover_amount(m, p, q)

# 売れ残り量を小数値で出力
print("{:.4f}".format(leftover_amount))

# Q. 日別訪問者数の最大平均区間 B
# utf-8
n, k = map(int, input().split())
data = list(map(int, input().split()))

ave = [None] * (n - k + 1)
ave[0] = sum(data[:k])

for i in range(1, n - k + 1):
    ave[i] = ave[i - 1] - data[i - 1] + data[i - 1 + k]

m = max(ave)

print(ave.count(m), ave.index(m) + 1)
'''
訪問者数の累積和を取り、連続する k 日の合計訪問者数の最大値 max_visitor を求めます。
そして、連続する k 日の期間のうち、その合計訪問者数が max_visitor に等しい期間の数を数えます。
このとき同時にそのような期間のうち最も速い開始日を記録しておきます。
なお、この問題の制約は非常に小さいため、連続する k 日の期間の合計訪問者数を累積和を用いずに愚直に計算しても、実行時間制限に十分な余裕を持って間に合います。
'''

# Q. みんなでしりとり B
# utf-8
n, k, m = map(int, input().split())
ikiteru = [1] * n
data = set()
jun = 0
data2 = set()
flag = False
old_s = " "

for i in range(k):
    data.add(input())

for i in range(m):
    while True:
        if ikiteru[jun % n] == 1:
            break
        jun += 1

    new_s = input()

    if new_s in data2:
        ikiteru[jun % n] = 0
        flag = False
        continue

    if new_s[0] != old_s[-1] and flag:
        ikiteru[jun % n] = 0
        flag = False
        continue

    if not (new_s in data):
        ikiteru[jun % n] = 0
        flag = False
        continue

    if new_s[-1] == "z":
        ikiteru[jun % n] = 0
        flag = False
        continue

    data2.add(new_s)
    flag = True
    old_s = new_s
    jun += 1

print(ikiteru.count(1))

for i in range(n):
    if ikiteru[i] == 1:
        print(i + 1)
'''
ルールが多く、チェックするのが大変ですが、配列や集合などの各種データ構造を効果的に用いることにより問題を解くことが出来ます。
単語リストは集合の形で、しりとりから脱落せずに残っているプレイヤーは配列か集合の形で持つようにすると比較的楽に実装できるでしょう。
'''

# Q. 神経衰弱 B
# utf-8
h, w, n = map(int, input().split())

cards = [None] * h
player = [0] * n
jun = 0

for i in range(h):
    cards[i] = list(map(int, input().split()))

l = int(input())

for i in range(l):
    b, a, B, A = map(int, input().split())
    num1 = cards[b - 1][a - 1]
    num2 = cards[B - 1][A - 1]

    if num1 == num2:
        player[jun % n] += 2
        cards[b - 1][a - 1] = 0
        cards[B - 1][A - 1] = 0
    else:
        jun += 1

for i in player:
    print(i)
'''
トランプの配置を二次元配列で受け取り、問題文の通りに実装をすればよいです。
'''

# Q. 3Dプリンタ B(殿堂入り)
# utf-8
X, Y, Z = map(int, input().split())
grid = [[0] * Y for _ in range(Z)]

for z in range(Z):
    for x in range(X):
        s = input().strip()
        for y in range(Y):
            if s[y] == '#':
                grid[z][y] = 1

    bar = input()

for z in range(Z - 1, -1, -1):
    for y in range(Y):
        if grid[z][y] == 1:
            print("#", end="")
        else:
            print(".", end="")
    print()
'''
与えられた図形を x 軸と水平方向から見た時のシルエットを出力する問題です。
x 軸と水平方向から見たシルエットとは、y-z 二次元平面に影を落とした影そのものです。
影をおとす y-z 平面に対応するグリッド : G を用意します。
点 (px , py , pz) にセルが存在するならば、G[ py ][ pz ] にメモする
以上の操作を行うことで、y-z に落ちる影が G にメモされます。
G にメモされた影を、出力する順番に注意して出力してください。
'''
# Q. 名刺バインダー管理　B(殿堂入り)
# utf-8
n, m = map(int, input().split())
print((m-1)//n*n+2*n-(m-1)%n if (m-1) % (2*n) < n else (m-1)//n*n-(m-1)%n)

# Q. 日別訪問者数の最大平均区間(large) A
# utf-8
n, k = map(int, input().split())
data = list(map(int, input().split()))

ave = [None] * (n - k + 1)
ave[0] = sum(data[:k])

for i in range(1, n - k + 1):
    ave[i] = ave[i - 1] - data[i - 1] + data[i - 1 + k]

m = max(ave)

print(ave.count(m), ave.index(m) + 1)
'''
訪問者数の累積和を取り、連続する k 日の合計訪問者数の最大値 max_visitor を求めます。
そして、連続する k 日の期間のうち、その合計訪問者数が max_visitor に等しい期間の数を数えます。
このとき同時にそのような期間のうち最も速い開始日を記録しておきます。
'''

# Q. お菓子の詰め合わせ　A(殿堂入り)
# utf-8
def combinations(iterable, r):
    # combinations()関数は、与えられたiterableからr個の要素を持つすべての組み合わせを生成するジェネレータです。
    pool = tuple(iterable)  # 入力のiterableをタプルに変換してpoolに格納
    n = len(pool)  # poolの長さを取得
    if r > n:  # rがnより大きければ、組み合わせは存在しないので終了
        return
    indices = list(range(r))  # 組み合わせを表すインデックスのリストを作成
    yield tuple(pool[i] for i in indices)  # 最初の組み合わせを生成して返す
    while True:
        for i in reversed(range(r)):  # 右端から左に向かってインデックスを調整
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1  # インデックスを調整
        for j in range(i + 1, r):  # 調整後のインデックスを更新
            indices[j] = indices[j - 1] + 1
        yield tuple(pool[i] for i in indices)  # 新しい組み合わせを生成して返す

# 入力の受け取り
N, money = map(int, input().split())  # N: お菓子の種類数, money: 指定制限金額
All = []  # お菓子の値段リスト
for n in range(N):
    All.append(int(input()))  # 各お菓子の値段をリストに追加

All.sort()  # お菓子の値段リストを昇順にソート

# なるべく多くの種類を購入するための計算
temp = 0  # 合計金額の一時変数
count = 0  # 購入するお菓子の種類数
for i in All:
    temp += i  # お菓子の値段を加算
    if temp > money:  # 合計が指定制限金額を超えたらループを終了
        break
    count += 1  # 購入する種類数をインクリメント

temp = []  # 指定制限金額を超えない購入パターンの釣銭リスト
# 全ての組み合わせを生成して、釣銭を計算
for i in combinations(All, count):
    s = sum(i)  # 組み合わせの合計値を計算
    if s <= money:  # 指定制限金額を超えない場合
        temp.append(money - s)  # 釣銭をリストに追加

print(min(temp))  # 最小の釣銭を出力
'''
combinations関数の定義:
combinations(iterable, r)は、与えられたiterable（例:リスト）からr個の要素を持つすべての組み合わせを生成します。
最初に入力をタプルに変換し、その長さを取得します。
組み合わせを生成するためのインデックスリストを初期化し、最初の組み合わせを生成します。
以降、右端からインデックスを調整しながら新しい組み合わせを生成します。
入力の受け取り:
1行目からお菓子の種類数Nと指定制限金額moneyを受け取ります。
続くN行から各お菓子の値段をリストAllに追加します。
お菓子の値段リストのソート:
お菓子の値段リストを昇順にソートします。これにより、安いお菓子から順に選ぶことができます。
種類数最大化のための計算:
合計金額tempと購入するお菓子の種類数countを初期化します。
お菓子の値段リストを順に見ていき、合計が指定制限金額を超えない範囲で種類数を増やしていきます。
指定制限金額内での購入パターンと釣銭の計算:
combinations関数を使って、購入するお菓子の組み合わせを生成します。
各組み合わせの合計金額が指定制限金額を超えない場合、釣銭を計算してリストtempに追加します。
結果の出力:
釣銭リストtempから最小の釣銭を選んで出力します。
'''

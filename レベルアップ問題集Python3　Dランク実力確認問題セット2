# 最初のメッセージ
# utf-8
_, S = input().split(' ')
ans = f"Hello {S} !"
print(ans)
'''
この問題では入力として 'user_id:' と S の 2 つの文字列が与えられます。
出力に必要なのは S だけですが、S を受け取るために一度 'user_id:' を受け取る必要があります。
実装例では 'user_id:' を _ で受け取っています。
python では参照しない値を_に格納する慣習があります。
他に_を使用する例として、通常for文はfor i in range(N):と記述しますが、ループ内でiを使用する予定がない場合にはfor _ in range(N):と記述することがあります。
'''

# 攻撃力の計算
# utf-8
N = int(input())
print(N * N * N * N * N)
'''
この問題では入力として整数 N が与えられます。
単にN * N * N * N * Nとしても答えを求められますが、各言語には累乗を計算するための演算子や関数が存在します。
python には累乗を行う演算子として**が存在します。例えば、2 ** 3は 2 の 3 乗を返します。
C++ には累乗を行う関数としてpowが存在します。例えばpow(2, 3)は 2 の 3 乗を返します。使用するにはcmathライブラリをインクルードする必要があることに注意してください。
'''

# ２ケタで表示
# utf-8
N = int(input())
if N < 10:
    print(f'0{N}')
else:
    print(N)
'''
この問題では入力として整数 N が与えられます。
ifによる条件分岐を用いて、N が 9 以下である場合のみ 0 を先に出力することで条件を満たします。
また、python には比較的簡単に、数値が指定した桁数になるよう 0 で埋める方法が存在します。
python の場合
"{:02}".format(整数)とすることで整数が 2 桁になるように先頭から 0 で詰めた値を返します。
"{:02}"はフォーマット指定子と呼ばれ、0 が 0 で埋めることを、2 は桁数を指定しています。
'''

# N番目のアルファベット
# utf-8
N = int(input())
if N == 1:
    print("A")
if N == 2:
    print("B")
if N == 3:
    print("C")
if N == 4:
    print("D")
if N == 5:
    print("E")
'''
この問題では入力として整数 N が与えられます。
ifによる条件分岐を用いて、対応するアルファベットを出力することで条件を満たします。
また、整数(コードポイント)を特定の文字に変換する方法も存在します。
python の場合
chr関数は引数で与えたコードポイントに対応する文字を返します。
大文字の A に対応するコードポイントは 65 なので、chr(65)は A を返します。
'''

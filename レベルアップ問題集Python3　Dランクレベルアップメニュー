<2つの数値を出力>
step1　1つの文字列を出力
# utf-8
print("paiza")
'''
文字列を 1 つ出力します。
Python では、文字列を "文字列" や '文字列' のように表現します。
print 関数を使って文字列を出力します。
print 関数は、記号 () で囲まれた位置にある値を出力します。
'''

step2　2つの文字列を出力
# utf-8
print("paiza learning")
'''
文字列を 2 つ半角スペース区切りで出力します。
Python では、標準出力に print 関数を使います。
print 関数は、記号 () で囲まれた位置にある値を出力します。
今回は () の中身を "paiza learning" とすることで、paiza、半角スペース、learning の 3 つをまとめて出力することができます。
'''
step3　1行の出力
# utf-8
print(813)
'''
標準出力を使用して整数 813 を出力します。
また、最後に改行を出力します。
Python では print 関数を使うことで、文字列や数値などを出力します。
print() では、記号 () で囲まれた位置にある値を出力します。
例えば、 123 を出力するとき、print(123) のように記述します。
Python の print 関数はデフォルトで末尾に改行が入るので、特別改行を入れる操作を記述する必要はありません。
'''

step4　3行の出力
# utf-8
print(8)
print(1)
print(3)
'''
標準出力関数を使用して整数 8 と 1 と 3 を出力します。
また、整数を出力した後に改行を出力します。
Python3 は print 関数で出力ができます。
print 関数はデフォルトで末尾で改行します。
'''

final　2つの数値を出力
# utf-8
print("{} {}".format(1, 1))
'''
半角スペース区切りで 2 つの 1 を出力します。
1 , 半角スペース , 1 の順に出力します。
print 関数はカンマ(,)で区切って複数の引数を渡すことで、それらを半角スペースで区切って出力することができます。

<別解>
print(1, 1)

print 関数はカンマ(,)で区切って複数の引数を渡すことで、それらを半角スペースで区切って出力することができます。
'''

<代入演算1>
step1　足し算
# utf-8
print(1231 + 5178)
'''
足し算を行うプログラムを記述します。
多くのプログラミング言語では + 記号で足し算を表すことができます。
'''

step2　割り算
# utf-8
a = 437326
b = 9085

print(a // b, a % b)
'''
割り算をおこなうプログラムを記述します。
多くのプログラミング言語では / 記号で割り算を表すことができますが、一部の言語では // 記号で割り算を表すこともあります。
A を B で割った余りは % 記号などであわらすことができますが、 A - A / B * B でも同様に計算することができます。
Python で整数同士の割り算をするためには / 記号ではなく // 記号を用います。 / 記号を用いると小数部も含めた演算ができます。
'''

step3　累乗
# utf-8
a = 202
b = 134
c = 107

print(((a + b) * c) ** 2)
'''
累乗が入った、少し複雑な計算を行うプログラムを記述します。しかし、今までの問題の知識を思い出せば解けるはずです。
まず、多くの言語で足し算は + 記号、掛け算は * 記号で計算することができます。
二乗を計算するには、掛け算記号を用いて計算しても良いですが、言語によっては累乗記号があります。
Python で二乗を計算する際は a ** 2 のように、 ** 記号で記述することができます。
'''

final　代入演算1
# utf-8
n = 0
n = n + 3286
n = n * 4736
n = n % 12312
print(n)
'''
代入演算とは、変数に数値や変数を代入する演算のことです。たとえば、変数 N に 1 代入するという処理がこれに当たります。多くの言語では = 記号で記述することができます。
他にも、演算を行いながら代入を行う演算がこれに当たります。たとえば変数 N に 1 を足した値を N に代入するといった演算です。足し算の場合、多くの言語では += 記号などで記述することができます。
また、 n = n + 3286 は n += 3286 と同じ意味です。特に代入演算が複雑になる場合、このように足し算を行った後に代入してもよいです。
'''

<半角スペース区切りの2つの入力>
step1　1行の入力
# utf-8
s = input()
print(s)
'''
まず入力を受け取って変数 s に代入します。
次に s をそのまま出力します。
input は入力値を文字列として受け取る関数です。s = input() でこれを変数 s に代入しています。
print は文字列や数を出力する関数です。print(s) とすると s が出力されます。
Python の print は自動的に末尾に改行を追加します。
'''

step2　2行の入力
# utf-8
s = input()
t = input()

print(s)
print(t)
'''
まず入力を受け取って変数 s, t に代入します。
次に s, t をそのまま出力します。
2 行の入力を受け取るので、input() を 2 回使います。
print() は末尾に改行を出力するので、今回は print() を 2 回使って s と t を出力します。
'''

step3　1つの入力
# utf-8
s = input()
print(s)
'''
半角スペースを含まない 1 つの文字列なので、s にそのまま入力します。
次に s をそのまま出力します。
'''

final　半角スペース区切りの2つの入力
# utf-8
s, t = input().split(" ")
print(s)
print(t)
'''
半角スペース区切りで分割し、変数 s, t に代入します。
それぞれ改行して出力します。
まず input() で入力を受け取り、それを split(" ") で半角スペース区切りとします。
区切った文字列を多重代入で変数 s と t に代入し、それぞれ出力すればよいです。
'''

<乗客人数>
step1　入力された2つの文字列を出力
# utf-8
S = input()
T = input()

print(S)
print(T)
'''
入力された 2 つの文字列を改行区切りでそのまま出力します。
Python で標準入力を受け取るときは input 関数を使います。
input 関数は標準入力から 1 行を文字列として受け取ります。
入力を受け取ったら、そのまま 2 度 print 関数で出力すればよいです。
'''

step2　引き算・掛け算
# utf-8
a, b = map(int, input().split())

print(a - b, a * b)
'''
引き算と掛け算を行うプログラムを記述します。
多くのプログラミング言語では - 記号で引き算を、 * 記号で掛け算を表すことができます。
A と B は標準入力によって与えられます。
Python で二つの入力値を受け取るためには input 関数と map 関数の組み合わせによって実現します。
input().split() によって一行で与えられる文字列を半角スペースで区切って文字列のリストを生成します。これでは文字列が A と B に与えられてしまうので、 map 関数を使用します。
map 関数では入力値を第二引数に与え、第一引数に変更したい関数を指定します。今回は整数型に変換したいので、第一引数には int 関数を使います。
'''

step3　代入演算2
# utf-8
a, b, c = map(int, input().split())

n = 0
n = n + a
n = n * b
n = n % c
print(n)
'''
代入演算とは、変数に数値や変数を代入する演算のことです。たとえば、変数 N に 1 代入するという処理がこれに当たります。多くの言語では=記号で記述することができます。
他にも、演算を行いながら代入を行う演算がこれに当たります。たとえば変数 N に 1 を足した値を N に代入するといった演算です。足し算の場合、多くの言語では+=記号で記述することができます。
また、n = n + aはn += aと同じ意味です。特に代入演算が複雑になる場合、このように足し算を行った後に代入してもよいです。
'''

final　乗客人数
# utf-8
a, b, c = map(int, input().split())

print(a - b + c)

<占い>
step1　単純な条件分岐
# utf-8
s = input()

if s == "paiza":
    print("YES")
else:
    print("NO")
'''
以下の順で処理をおこないます。
文字列 S を標準入力より受け取る
S とpaizaを比較する
もし S とpaizaが一致するなら、YESを出力する
もし S とpaizaが一致しないなら、NOを出力する

Python では、input 関数を用いて標準入力を受け取ります。
受け取った文字列 s が "paiza" に一致するかどうかを == 演算子を用いて判定します。
【 == 演算子について 】
== 演算子は値が「等しいか」を判定する際に使います。
判定結果は True か False で返ってきます。
A == B のように使えば、「A は B に等しいか」の判定結果を True か False で得ることができます。
else 節は自分より上の条件判定の結果がすべて False だった場合にブロック内の処理が実行されます。
今回の場合だと、「s が "paiza" ではなかった場合」に実行されます。
'''
step6　数値の分岐 ※隠し問題
# utf-8
n = int(input())

if n <= 100:
    print("YES")
else:
    print("NO")
'''
以下の順で処理をおこないます。
整数 N を標準入力より受け取る
N と 100 を比較する
もし N が 100 以下なら、YESを出力する
もしそうではないなら、NOを出力する

input 関数で標準入力を受け取ると、それは文字列として扱われます。
今回、入力を整数として扱いたいので、int 関数を併用します。
「以下である」の判定は <= 演算子を使います。
【 <= 演算子について 】
「以下であるか」を判定するときに使います。
判定結果は True か False で返ってきます。
A <= B のように使えば、 「A は B 以下であるか」の判定結果を True か False で得ることができます。
else 節は自分より上の条件判定の結果がすべて False だった場合にブロック内の処理が実行されます。
今回の場合だと、「n が 100 以下ではなかった場合」に実行されます。
'''
step7　数値演算結果で分岐　※隠し問題
# utf-8
a, b, c = [int(x) for x in input().split()]

if a * b <= c:
    print("YES")
else:
    print("NO")
'''
以下の順で処理をおこないます。
整数A, B, Cを標準入力より受け取る
A × B ≦ C か判定する
a * b <= cという式は条件式なので、多くの言語ではif文の中にそのまま記述することができます。
たとえば、Pythonの場合はif a * b <= c:と、条件式の中で計算させるよう記述することができます。
アンパックと内包表記を用いて入力を受け取ります。
アンパックと内包表記について簡潔に以下で説明します。
【 アンパック 】
左辺に用意した変数に、右辺に置かれるリストなどのシーケンス型と呼ばれるオブジェクトの各要素が順に代入される
【 内包表記 】
リストなどを定義する際に、for 文を用いて定義する
for 文の要領で要素を決めることができる
たとえば、次のコードで生成されるリスト li
# A はリストなどのイテラブルオブジェクト
# f は関数
li = []
for x in A:
    li.append(f(x))
と li = [f(x) for x in A] で生成されるリストは同じ要素を持っている
「以下であるか」を判定する <= 演算子を用いて a*b が c 以下であるか判定します。
'''

final　占い
# utf-8
n = int(input())

if n == 7:
    print("Yes")
else:
    print("No")

<FizzBuzz>
step1　ある数字までの出力2
# utf-8
N = int(input())
for i in range(N):
    print(i + 1)
'''
range() 関数の範囲を指定しないとき、変数 i は 0 から始まることに注意しましょう。
'''

final　FizzBuzz
# utf-8
for i in range(1, 101):
    if i % 3 == 0 and i % 5 == 0:
        print("FizzBuzz")
    elif i % 3 == 0:
        print("Fizz")
    elif i % 5 == 0:
        print("Buzz")
    else:
        print(i)
'''
ループ変数が 1 から 100 に遷移するようなループ処理を作ります。
条件分岐を用いて、「3 と 5 の両方で割り切れる場合」、「3 で割り切れる場合」、「5で割り切れる場合」、「どちらでも割り切れない場合」に分岐させ、それぞれの分岐に対して出力をします。
'''

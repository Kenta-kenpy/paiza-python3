<2つの数値を出力>
step1　1つの文字列を出力
# utf-8
print("paiza")
'''
文字列を 1 つ出力します。
Python では、文字列を "文字列" や '文字列' のように表現します。
print 関数を使って文字列を出力します。
print 関数は、記号 () で囲まれた位置にある値を出力します。
'''

step2　2つの文字列を出力
# utf-8
print("paiza learning")
'''
文字列を 2 つ半角スペース区切りで出力します。
Python では、標準出力に print 関数を使います。
print 関数は、記号 () で囲まれた位置にある値を出力します。
今回は () の中身を "paiza learning" とすることで、paiza、半角スペース、learning の 3 つをまとめて出力することができます。
'''
step3　1行の出力
# utf-8
print(813)
'''
標準出力を使用して整数 813 を出力します。
また、最後に改行を出力します。
Python では print 関数を使うことで、文字列や数値などを出力します。
print() では、記号 () で囲まれた位置にある値を出力します。
例えば、 123 を出力するとき、print(123) のように記述します。
Python の print 関数はデフォルトで末尾に改行が入るので、特別改行を入れる操作を記述する必要はありません。
'''

step4　3行の出力
# utf-8
print(8)
print(1)
print(3)
'''
標準出力関数を使用して整数 8 と 1 と 3 を出力します。
また、整数を出力した後に改行を出力します。
Python3 は print 関数で出力ができます。
print 関数はデフォルトで末尾で改行します。
'''

final　2つの数値を出力
# utf-8
print("{} {}".format(1, 1))
'''
半角スペース区切りで 2 つの 1 を出力します。
1 , 半角スペース , 1 の順に出力します。
print 関数はカンマ(,)で区切って複数の引数を渡すことで、それらを半角スペースで区切って出力することができます。

<別解>
print(1, 1)

print 関数はカンマ(,)で区切って複数の引数を渡すことで、それらを半角スペースで区切って出力することができます。
'''

<代入演算1>
step1　足し算
# utf-8
print(1231 + 5178)
'''
足し算を行うプログラムを記述します。
多くのプログラミング言語では + 記号で足し算を表すことができます。
'''

step2　割り算
# utf-8
a = 437326
b = 9085

print(a // b, a % b)
'''
割り算をおこなうプログラムを記述します。
多くのプログラミング言語では / 記号で割り算を表すことができますが、一部の言語では // 記号で割り算を表すこともあります。
A を B で割った余りは % 記号などであわらすことができますが、 A - A / B * B でも同様に計算することができます。
Python で整数同士の割り算をするためには / 記号ではなく // 記号を用います。 / 記号を用いると小数部も含めた演算ができます。
'''

step3　累乗
# utf-8
a = 202
b = 134
c = 107

print(((a + b) * c) ** 2)
'''
累乗が入った、少し複雑な計算を行うプログラムを記述します。しかし、今までの問題の知識を思い出せば解けるはずです。
まず、多くの言語で足し算は + 記号、掛け算は * 記号で計算することができます。
二乗を計算するには、掛け算記号を用いて計算しても良いですが、言語によっては累乗記号があります。
Python で二乗を計算する際は a ** 2 のように、 ** 記号で記述することができます。
'''

final　代入演算1
# utf-8
n = 0
n = n + 3286
n = n * 4736
n = n % 12312
print(n)
'''
代入演算とは、変数に数値や変数を代入する演算のことです。たとえば、変数 N に 1 代入するという処理がこれに当たります。多くの言語では = 記号で記述することができます。
他にも、演算を行いながら代入を行う演算がこれに当たります。たとえば変数 N に 1 を足した値を N に代入するといった演算です。足し算の場合、多くの言語では += 記号などで記述することができます。
また、 n = n + 3286 は n += 3286 と同じ意味です。特に代入演算が複雑になる場合、このように足し算を行った後に代入してもよいです。
'''

<半角スペース区切りの2つの入力>
step1　1行の入力
step2　2行の入力
step3　1つの入力
final　半角スペース区切りの2つの入力

<乗客人数>
step1　入力された2つの文字列を出力
step2　引き算・掛け算
step3　代入演算2
final　乗客人数

<占い>
step1　単純な条件分岐
final　占い

<FizzBuzz>
step1　ある数字までの出力2
final　FizzBuzz

# 俳句
# utf-8
S,T,U = input().split()
print(S)
print(T)
print(U)
'''
入力は 1 行で、空白区切りの 3 文字列 S（5 文字）、T（7 文字）、U（5 文字）が与えられます。
俳句の 5‑7‑5 形式に合わせて、S・T・U をこの順序で改行区切りの 3 行として出力します。
'''

# 総和と総積
# utf-8
A, B, C = map(int, input().split())
print(A + B + C)
print(A * B * C)
'''
整数 A, B, C を読み取り、それらの「和」と「積」を計算して出力します。
入力は1行に3つの整数が空白区切りで並んでいるため、まとめて読み取って処理します。
計算結果は2行に分けて出力します。
'''

# 陣地取りゲーム
# utf-8
N, Q = map(int, input().split())
board = ['.'] * (N + 1)
for _ in range(Q):
    P, x = input().split()
    x = int(x)
    if board[x] == '.':
        board[x] = P

a = board.count('A')
b = board.count('B')

if a > b:
    print("A")
elif b > a:
    print("B")
else:
    print("Draw")
'''
マスは最大でも 100 個と小さいので、配列で各マスの状態（.: 空き, A: A の陣地, B: B の陣地）を管理すれば十分です。
操作は Q ≤ 100 回しかないため、各ターンごとに
獲得対象のマス x を確認
   
もしそのマスが空き (.) なら、現在のプレイヤーの陣地に変更
そうでなければ（すでに誰かの陣地）何もしない
と単純にシミュレーションすれば良いです。
全てのターン終了後、配列を走査して A と B のマス数を数え、
A > B なら "A"、B > A なら "B"、等しいなら "Draw" を出力します。
'''

# 陣地取りゲーム 2D
# utf-8
EMPTY   = 0
A       = 1
B       = 2
A_LOCK  = 3
B_LOCK  = 4

N, M = map(int, input().split())
Q = int(input())

board = [[EMPTY] * (M + 1) for _ in range(N + 1)]

for _ in range(Q):
    P, x, y = input().split()
    x = int(x)
    y = int(y)
    cell = board[x][y]

    if P == 'A':
        if cell == EMPTY:
            board[x][y] = A
        elif cell == A:
            board[x][y] = A_LOCK
        elif cell in (B,):
            board[x][y] = EMPTY
    else:
        if cell == EMPTY:
            board[x][y] = B
        elif cell == B:
            board[x][y] = B_LOCK
        elif cell in (A,):
            board[x][y] = EMPTY

a_cnt = sum(cell in (A, A_LOCK) for row in board for cell in row)
b_cnt = sum(cell in (B, B_LOCK) for row in board for cell in row)

if a_cnt > b_cnt:
    print("A")
elif b_cnt > a_cnt:
    print("B")
else:
    print("Draw")
'''
盤面は 100 × 100 = 10 000 マス、手番も最大 100 回しかありません。
そこで、言われたとおり順番に盤面を書き換えるだけのシミュレーションで十分間に合います。 流れは次の 3 ステップです。

盤面を「全て空きマス」で初期化する。
Q 回の指示を1 回ずつ処理して盤面を更新する。
最後に盤面を数えて A と B のマス数を比べ、勝者（または引き分け）を決定する。

マスの状態管理
ルールを整理すると、1 つのマスは次の 5 種類のどれかになります。

番号	状態	どう変わるか
0	空きマス	手番の人が取るとその人の陣地へ
1	A の陣地（まだロック前）	A がもう一度取れば 3、B が取れば 0
2	B の陣地（まだロック前）	B がもう一度取れば 4、A が取れば 0
3	A の陣地（ロック済み）	以降変わらない
4	B の陣地（ロック済み）	以降変わらない
実際の更新はとても単純です。

いまの状態が 0：そのマスは空き。手番が A なら 1、B なら 2 にする。
いまの状態が 1 または 2：
自分が来たらロック（1→3、2→4）。
相手が来たら中立化（1,2→0）。
いまの状態が 3 または 4：すでにロック済みなので何もしない。
このシンプルなルールを盤面全体に適用していけば、問題の要求を自然に満たせます。
'''

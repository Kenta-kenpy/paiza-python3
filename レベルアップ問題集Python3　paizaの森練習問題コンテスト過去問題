# paizaの森練習問題コンテスト過去問題1　★
# Q.　スポーツの人数
# utf-8
s = input()
if s == "baseball":
    print(9)
elif s == "soccer":
    print(11)
elif s == "rugby":
    print(15)
elif s == "basketball":
    print(5)
elif s == "volleyball":
    print(6)
else:
    print()
    
# Q.　バイトの休憩時間
# utf-8
h = int(input()) # 勤務時間

"""
・勤務時間が6時間を超え8時間以下の時 45分
・勤務時間が8時間を超えるとき60分
"""

if h <= 6:
    print("no break")
elif 6 < h <=8:
    print("45 min")
elif 8 < h:
    print("60 min")
else:
    print()

# Q.　自動車の燃費
# utf-8
v,d = input().rstrip().split() # 給油量[L]と記録した走行距離[km]
print(int(d)//int(v))

# Q.　背番号順
# utf-8
n = int(input())  # 選手の数を入力

# 選手の情報をリストに格納
players = []
for i in range(n):
    b, p = input().rstrip().split()
    players.append((int(b), p))

# 背番号でソートして出力
for b, p in sorted(players):
    print(b, p)
'''
まず、選手の数nを入力します。次にn回ループして、各選手の背番号と名前を取得しリストに格納します。
rstrip()関数を使うことで、入力の各行の末尾に含まれる改行文字を取り除きます。
最後に、背番号でソートされた選手のリストをループして、各選手の背番号と名前を出力します。
sorted()関数を使うことで、背番号でソートされた選手のリストを簡単に作成できます。
'''

# paizaの森練習問題コンテスト過去問題2　★
# Q.　競輪のユニフォーム
# utf-8
n = int(input())

if n == 1:
    print("white")
elif n == 2:
    print("black")
elif n == 3:
    print("red")
elif n == 4:
    print("blue")
elif n == 5:
    print("yellow")
elif n == 6:
    print("green")
elif n == 7:
    print("orange")
elif n == 8:
    print("pink")
elif n == 9:
    prnt("purple")
else:
    print()

# Q.　エレベーターの行き先
# utf-8
f1,f2 = input().split()

if f2 > f1:
    print("up")
else:
    print("down")
    
# Q.　長方形の面積
# utf-8
e1,e2 = input().split()

if int(e1) != 0 and int(e2) != 0:
    print(int(e1)*int(e2))
elif int(e1) == 0 or int(e2) == 0:
    print("invalid")

# Q.　セール販売
'''
bool型を持つpantsを初期値ではFalseに設定しておき、入力cにpantsが含まれている場合にはpantsをTrueにする。
最終的に合計金額が2000円以上になり、かつpantsがTrueのときに合計金額から500円引くことで答えを導ける。
'''
# utf-8

n = int(input())

sum = 0
pants = False

for i in range(n):
    c, p = input().split()
    sum = sum + int(p)
    if c == "pants":
        pants = True

if pants and sum >= 2000:
    sum = sum - 500

print(sum)

# paizaの森練習問題コンテスト過去問題3　★
# Q.　文字列の逆順
# utf-8
s = input()
print(s[::-1])

# Q.　英単語の生成（連結）
# utf-8
s1,s2 = input().split()
print(s1+s2)

# Q.　小文字にする
# utf-8
s = input()
print(s.lower())

# Q.　キーボードのシミュレーション
# utf-8
n = int(input())

capped = False # 初期状態はcapslockキーが押されていない
for i in range(n):
    c = input()
    if c == 'capslock':
        capped = not capped
    elif c.startswith('shift'):
        x = c.split(' ')[1] # 小文字1文字が入力される場合
        print(x.upper(), end='') # 大文字1文字として出力
    else: # 小文字1文字が入力される場合
        if capped:
            print(c.upper(), end='')
        else:
            print(c, end='')
print()

# Q.　ラッキーナンバー
# utf-8
n = int(input())
numbers = []
for i in range(n):
    numbers.append(int(input()))
    
numbers_777 = []
answer_count = 0
 # ビット全探索
# 0000, 0001, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1101, 1110, 1111
for comb_bits in range(1<<n):
    sum = 0
    for index in range(n): # n回ループ
       if (comb_bits >> index) & 1 == 1:  # indexは1
           # print(index, end='')
           sum += numbers[index]
    # print()
    if sum == 777:
        if answer_count == 0: # 最初に見つけた答えのみ保存
            for index in range(n): # n回ループ
                if (comb_bits >> index) & 1 == 1: # indexは1になっている
                    numbers_777.append(numbers[index])
        answer_count += 1
        
if answer_count == 0:
    print('no answer')
elif answer_count >= 2:
    print('multiple answers')
else:
    numbers_777.sort()
    print(' '.join(map(str, numbers_777)))

# paizaの森練習問題コンテスト過去問題4　★
# Q.　花言葉
# utf-8
s = input()
if s == "rose": # バラ
    print("I love you")
elif s == "cosmos": # コスモス
    print("harmony")
elif s == "tulip": # チューリップ
    print("perfect lover")
elif s == "hydrangea": # あじさい
    print("heartlessness")
elif s == "jasmine": # ジャスミン
    print("amiability")
else:
    print()

# Q.　じゃんけん
# utf-8
h = input() # じゃんけんで相手の手 R(グー) P(パー) S(チョキ)
if h == "R":
    print("P")
elif h == "P":
    print("S")
elif h == "S":
    print("R")
else:
    print()
    
# Q.　四季
# utf-8
# 春　3~5月　夏　6~8月　秋　9~11月 冬　12~2月

m = int(input()) # m月

if m <= 2:
    print("winter")
elif m <= 5:
    print("spring")
elif m <= 8:
    print("summer")
elif m <= 11:
    print("autumn")
elif m == 12:
    print("winter")
    
# Q.　オルタネーティングキャップス
# utf-8
s = input()
print(s.lower())

# Q.　パワー100倍
# utf-8
p = int(input())
print(p*100)

# Q.　おつり
# utf-8
p = int(input())
coins = [500, 100, 50, 10, 5, 1] # coinsリスト

answer = 0 # 初期化
# 変数cでcoinsを繰り返す
for c in coins: 
    while p >= c: # おつりpがc以上
        p -= c # p = p-cを代入
        answer += 1 # 初期化したanswerを増やす

print(answer)

# Q.　ゾロ目
# utf-8
x = int(input())

print(x // 11 * 11)
# 数字が二つ並ぶゾロ目の最小単位11で割る　このとき剰余が出ないように//で割る 整数化したら11倍して戻す

# Q.　いちばんお得
# utf-8
g_1, p_1 = input().split() # チョコ1の重さと値段
g_2, p_2 = input().split() # チョコ2の重さと値段

if int(p_1)/int(g_1) < int(p_2)/int(g_2):
    print(1)
else:
    print(2)

# Q.　重さの計算
# utf-8
n,k,x = input().rstrip().split() # 未知のボールの数, 既知のボールの数, 既知のボールの重さ
# 既知のボール1つ当たりの重さを求める
m = int(x)/int(k)
import math
print(math.floor(m*int(n))) # 値以下最大の整数を返すmath.floor関数

# Q.　寒暖差
# utf-8
bef = int(input()) # i日目の最高気温

for _ in range(9):
    now = int(input()) # 10日分の最高気温データ
    if abs(now - bef) >= 3: # 今i日目の最高気温から見て3度以上の温度差あり
        print("Yes") # 寒暖差ありと判断
        exit(0) # 差が0のときは例外
    bef = now # 差が0のときは一致するものを最高気温と判断

print("No") # 寒暖差なし(連続する2日間の最高気温の差が3度未満)

# paizaの森練習問題コンテスト過去問題5　★
# Q. 3割打者
# utf-8
n,m = input().split() # 打数n 安打数m
# 3割以上で一流
if int(m) >= int(n) * 0.3:
        print("Yes")
else:
        print("No")

# Q.　テレワーク可能か
# utf-8
a,b = input().split()
# a 会社のデスク使用率, b 天候(rain sunny cloudy)
# テレワーク a>=30以上　または bがrainのとき

if int(a) >= 30 or str(b) == "rain":
        print("Yes")
else:
        print("No")
        
# Q.　文字列の反転
# utf-8
s = input()
print(s[::-1])

# Q.　CD
# utf-8
n = int(input())

# 初期値0
seconds = 0
# n曲 分と秒を入力 秒にする式
for _ in range(n): 
    m, s = map(int, input().split())
    seconds += 60 * m + s

# CDの最大収録可能時間以下か判定
if seconds <= 74 * 60:
    print("Yes")
else:
    print("No")

# Q.　サイクルヒット
# utf-8
'''
サイクルヒットは1 人のバッターが 1 試合の中で単打（シングルヒット）、二塁打（ツーベース）、三塁打（スリーベース）、
本塁打（ホームラン）全てを 1 本以上打った場合に成立する記録のこと
打席の結果は単打が1、二塁打が2、三塁打が3、本塁打が4、それ以外の結果は0と記録されます。
'''
v = [False] * 5 # サイクルヒットのリスト

for i in range(5): # 打席ごとの結果について
    m = int(input())
    v[m] = True

res = True
for i in range(1, 5):
    if v[i] == False:
        res = False
        break

if res:
    print("Yes") # サイクルヒット達成
else:
    print("No")  # サイクルヒット未達成

# Q.　条件を満たす最小の整数
# utf-8
# x 以上であって、y で割った余りが z であるような整数のうち、最小のもの
x, y, z = map(int, input().split())

while x % y != z: # xをyで割った剰余がzではないとき
    x += 1 # xをプラス1する

print(x)

# paizaの森練習問題コンテスト過去問題6　★
# Q.　球数制限
# utf-8
n, k = map(int, input().split())
sum = 0

for i in range(n):
    m = int(input())
    sum += m

if sum < k:
    print("Yes")
else:
    print("No")
    
# Q.　最大イニング
# utf-8
k = int(input())
sum = 0

flag = True
for i in range(1, 10):
    m = int(input())
    sum += m
    if sum > k:
        print(i)
        flag = False
        break
if flag:
    print("Yes")
    
# Q.　ロボットの移動
# utf-8
x, y = map(int, input().split())
print(abs(x) + abs(y))

# Q.　最大の差
# utf-8
v = [0] * 5

for i in range(5):
    m = int(input())
    v[i] = m
v.sort()
print(v[4] - v[0])

# Q.　中央値
# utf-8
v = [0] * 5

for i in range(5):
    m = int(input())
    v[i] = m

v.sort()

print(v[5 // 2])

# Q.　採点
# utf-8
n = int(input())

sum = 0

for i in range(n):
    m = input()
    if m == "correct":
        sum += 2
    elif m == "incorrect":
        sum -= 1

print(sum)

# paizaの森練習問題コンテスト過去問題7　★
# Q.　占い
# utf-8
n = int(input())

if n == 7:
    print("Yes")
else:
    print("No")
    
# Q.　年収計算
# utf-8
a, b, c = map(int, input().split())

print(a + c // 5 * b)

# Q.　気温
# utf-8
x = int(input())

if x >= 35:
    print("extremely hot day")
elif x >= 30:
    print("hot summer day")
elif x >= 25:
    print("summer day")
elif x < 0:
    print("ice day")
else:
    print("normal day")
    
# Q.　気温２
# utf-8
n = int(input())
max_val = -21
min_val = 41
x = [int(a) for a in input().split()]

for i in range(n):
    if x[i] > max_val:
        max_val = x[i]
    if x[i] < min_val:
        min_val = x[i]
print(max_val - min_val)

# Q.　ブロックの埋め込み
# utf-8
n, m = map(int, input().split())

print(n * m // 2)

# Q.　最も大きな最大公約数
# utf-8
n = int(input())

print(n // 2)

# Q.　三冠王
# utf-8
n = int(input())

b = [0] * n
r = [0] * n
h = [0] * n
for i in range(n):
    x, y, z = input().split()
    b[i] = float(x)
    r[i] = int(y)
    h[i] = int(z)
flag = [0] * n
max_b = max(b)
max_r = max(r)
max_h = max(h)
for i in range(n):
    if b[i] == max_b:
        flag[i] += 1
    if r[i] == max_r:
        flag[i] += 1
    if h[i] == max_h:
        flag[i] += 1

if max(flag) == 3:
    print("Triple")
elif max(flag) == 2:
    print("Double")
else:
    print("Nobody")
    
# paizaの森練習問題コンテスト過去問題8　★
# Q.　文字数カウント
# utf-8
m = input()
print(len(m))

# Q.　乗客人数
# utf-8
a, b, c = map(int, input().split())
print(a - b + c)

# Q.  OPS(野球のバッターを評価する指標)
# utf-8
n, m = map(float, input().split())
print("{:.3f}".format(n + m))

# Q.　通貨レート
# utf-8
n = int(input())

m = [0] * n
for i in range(n):
    m[i] = int(input())

first = -1
second = -1
max_diff = 1
for i in range(n):
    for j in range(i + 1, n):
        if m[j] / m[i] > max_diff:
            first = i
            second = j
            max_diff = m[j] / m[i]
if max_diff > 1:
    print(first + 1)
    print(second + 1)
else:
    print("No")
    
# Q.　乗客人数その2
# utf-8
n = int(input())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

ans = 0
now = 0

for i in range(n):
    now -= a[i]
    now += b[i]
    ans = max(ans, now)

print(ans)

# Q.　OPSその2
# utf-8
n = int(input())
ma = 0
res = 0
for i in range(n):
    b, s = map(float, input().split())
    if ma < b + s:
        res = i + 1
        ma = b + s
print(res)

# Q.　タスクスケジューリング
# utf-8
n = int(input())

d = {}
for i in range(n):
    s, t = map(int, input().split())
    d[t] = s
d = sorted(d.items())

ans = 0
time = 0

for i in range(n):
    if d[i][1] > time:
        ans += 1
        time = d[i][0]
print(ans)

# paizaの森練習問題コンテスト過去問題9　★
# Q.　最大値と最小値
# utf-8
a = list(map(int, input().split()))
a.sort() # 昇順に並び替え
print(a[0], a[-1]) # 3つの値の並び替えなので最小値と最大値は最初と最後の要素

# Q.  卵の生産
# utf-8
a, n = map(int, input().split())
print(a * n) # 1日当たりの卵を産む量と日数が与えられるのでその積で求める

# Q.  卵の生産の最大量
# utf-8
n, k = map(int, input().split())
a = list(map(int, input().split()))

ans = 0
for i in range(n - k + 1):
    su = 0
    for j in range(k):
        su += a[i + j]
    ans = max(ans, su)
print(ans)

# Q.  卵の生産の最大量 その2
# utf-8
n, k = map(int, input().split())
a = list(map(int, input().split()))

ans = 0
su = 0
for i in range(n - k + 1):
    if i == 0:
        for j in range(k):
            su += a[i + j]
    else:
        su += a[i + k - 1]
        su -= a[i - 1]
    ans = max(ans, su)
print(ans)

# Q.  卵をぴったり生産
# utf-8
n, k = map(int, input().split())

a = list(map(int, input().split()))

ans = 0
for bit in range(2 ** n):
    su = 0
    for j in range(n):
        if bit & (1 << j):
            su += a[j]
    if su == k:
        ans += 1
print(ans)

# paizaの森練習問題コンテスト過去問題10　★
# Q.　座席
# utf-8
s = []

for i in range(9):
    s.append(input())

for i in range(3):
    print(s[i * 3] + " " + s[i * 3 + 1] + " " + s[i * 3 + 2])

# Q.　平均と平均
# utf-8
a, b = map(int, input().split())

arithmetic_mean_pow = (a + b) * (a + b) / 4
geometric_mean_pow = a * b

if arithmetic_mean_pow > geometric_mean_pow:
    print("arithmetic")
elif arithmetic < geometric_mean_pow:
    print("geometric")
else:
    print("equal")

# Q.　親と子
# utf-8
a, b = map(int, input().split())

if a * 2 + 1 == b or a * 2 + 2 == b:
    print("Yes")
else:
    print("No")

# Q.　卒論締め切り
# utf-8
n, a, b = map(int, input().split())

if n <= a * min(30, b):
    print("Yes")
else:
    print("No")

# Q.　WBC
# utf-8
w = input()
print("Yes" if w.isupper() else "No")

# Q.  paizaとタイピング
# utf-8
s = input()
n = len(s)
verif = ["p", "a", "i", "z", "a"]
cnt = 0

res = "No"
for i in range(n):
    if s[i] == verif[cnt]:
        cnt += 1
    if cnt == 5:
        res = "Yes"
        break
print(res)
# paizaの森練習問題コンテスト過去問題11　★
# Q.　お菓子の合計金額
# utf-8
a, b = map(int, input().split())

print(a + b)

# Q.　フィボナッチ数列
# utf-8
a = 1
b = 1
print(a)
print(b)
for i in range(3, 11):
    f = a + b
    print(f)
    b = a
    a = f

# Q.　素数判定
# utf-8
n = int(input())

is_prime = True

if n == 1:
    is_prime = False
else:
    for i in range(2, n):
        if n % i == 0:
            is_prime = False

if is_prime:
    print("Yes")
else:
    print("No")

# Q.  残業時間
# utf-8
# 勤務時間を格納するリスト
work_hours = []

# 30日分の勤務時間を入力から読み取り
for i in range(30):
    work_hours.append(int(input()))

# 残業時間の初期値を0に設定
overtime_hours = 0

# 勤務時間をチェックして残業時間を計算
for hours in work_hours:
    if hours > 8:
        overtime_hours += (hours - 8)

# 残業時間を出力
print(overtime_hours)
'''
30日分の勤務時間を入力から読み取り、それぞれを整数型としてwork_hoursというリストに格納しています。30日分のデータを収集するため、forループを使用しています。
overtime_hoursという変数を0で初期化し、勤務時間をチェックして残業時間を計算しています。forループを使用して、各日の勤務時間を順番にチェックし、もし8時間を超える勤務時間があれば、その超過分を残業時間としてovertime_hoursに加算しています。
計算された残業時間を出力しています。これで、30日間の勤務時間から残業時間を計算し、その合計を出力するプログラムが完成します。
'''

# Q.　ロボットの移動-その2
# utf-8
# 目標地点の座標を入力から受け取る
x, y = map(int, input().split())

if x != y:
    print(max(abs(x), abs(y)) * 2 - 1)
else:
    print(abs(x) * 2)
'''
x, y = map(int, input().split()): 最初に、目標地点の座標を標準入力から受け取ります。入力はスペースで区切られた整数値のペアとして期待されています。例えば、"5 3"のような入力を受け取ると、xに5を、yに3を割り当てます。
if x != y:: 初めに、xとyが異なる場合と同じ場合に対する条件分岐が行われます。
print(max(abs(x), abs(y)) * 2 - 1): xとyが異なる場合、絶対値を取り、大きい方の値を選択します。それを2倍し、1を引いた結果を出力します。この部分の計算により、最小ステップ数が求められます。
else:: xとyが等しい場合、この条件に進みます。
print(abs(x) * 2): xとyが等しい場合、x（またはy、どちらでも同じ結果が得られます）の絶対値を2倍した結果を出力します。この部分の計算により、最小ステップ数が求められます。
このコードは、与えられた制約条件に基づいて、ロボットが指定された目標地点に到達するために必要な最小のステップ数を計算する効率的でシンプルな方法を提供します。
'''

# Q.　辞書順で最も小さい文字列
# utf-8
n = int(input())
s = input()

sorted_s = sorted(s)

print("".join(sorted_s))
'''
与えられた文字列sの中の文字を辞書順にソートして、最も小さい文字列を求める必要があります。Pythonを使用して、以下の手順で解決できます。

入力から文字列の長さnを受け取ります。
入力から文字列sを受け取ります。
文字列sを文字のリストに変換します。
文字のリストをソートします。
ソートされた文字のリストを結合して、最終的な答えを生成します。
最終的な答えを出力します。
'''

# Q.　全員が正答
# utf-8
n, m = map(int, input().split())  # 問題数と生徒数を入力から読み込む
c = [[0] * n] * m  # 解答データを格納する2次元リストを初期化
ans = [1] * n  # 各問題に対する初期の正答フラグを設定

# 生徒ごとの解答データを入力から読み込み、正答フラグを更新
for i in range(m):
    c[i] = list(map(int, input().split()))  # 各生徒の解答データを読み込む
    for j in range(n):
        ans[j] &= c[i][j]  # 各問題について、全ての生徒の解答をAND演算し、正答フラグを更新
        if i == m - 1:  # 最後の生徒の解答データを処理した場合
            if ans[j] == 1:  # すべての生徒が正答した問題に対して正答フラグが1の場合
                print("Yes")  # "Yes"を出力してプログラムを終了
                exit()

# すべての問題に対して正答フラグが1でない場合
print("No")  # "No"を出力
'''
このコードは、テストの解答データをもとに、すべての問題に対して全ての生徒が正答したかどうかを判定するためのPythonプログラムです。
最初に、問題数（n）と生徒数（m）を入力から読み込みます。
解答データを格納するための2次元リスト c と、各問題に対する正答フラグを格納するリスト ans を初期化します。ans リストは、すべての要素を1で初期化します。これは、最初はすべての問題に対して全ての生徒が正答した状態を仮定しています。
各生徒の解答データを読み込みながら、問題ごとに正答フラグを更新します。
c[i] は i 番目の生徒の解答データを表します。
for j in range(n): ループは、各問題について生徒の解答を確認し、正答フラグ ans[j] を更新します。具体的には、ans[j] &= c[i][j] の操作を行います。これは、各問題について、すべての生徒の解答をAND演算し、その結果を ans[j] に格納します。
各生徒の解答データを処理した後、最後の生徒の解答データに対して正答フラグが1であるかどうかを確認します。もし、すべての生徒が正答した問題がある場合、それに対応する ans[j] の値は1になります。そのような問題が見つかった場合、"Yes" を出力してプログラムを終了します。
すべての問題に対して正答フラグが1でない場合、"No" を出力します。これは、どの問題も全ての生徒が正答できなかった場合を示します。
'''

# paizaの森練習問題コンテスト過去問題12　★
# Q.　文字列の一致
# utf-8
a = input()
b = input()

if a == b:
    print("Yes")
else:
    print("No")

# Q.　部分文字列
# utf-8
a = input()
b = input()

if b in a:
    print("Yes")
else:
    print("No")

# Q.　グラフの連結
# utf-8
n = int(input())
t = [[False for j in range(3)] for i in range(3)]
for i in range(n):
    a, b = map(int, input().split())
    t[a][b] = t[b][a] = True

if t[0][2] or t[0][1] and t[1][2]:
    print("Yes")
else:
    print("No")

# Q.　拡張子
# utf-8
s = input()

idx_jpg = s.find(".jpg")
idx_png = s.find(".png")
if idx_png == -1:
    print(idx_jpg)
elif idx_jpg == -1:
    print(idx_png)
elif idx_jpg < idx_png:
    print(idx_jpg)
else:
    print(idx_png)

# Q.　日程調整
# utf-8
l1, r1, l2, r2 = map(int, input().split())

print(max(0, min(r1, r2) - max(l1, l2) + 1))

# Q.　プレゼントの好み
# utf-8
n, k = map(int, input().split())

a = [int(e) for e in input().split()]
ma = -1
for i in range(n):
    if ma < a[i]:
        ma = a[i]

res = "No"
b = [int(e) for e in input().split()]
for i in range(k):
    b[i] -= 1
    if a[b[i]] == ma:
        res = "Yes"

print(res)

# paizaの森練習問題コンテスト過去問題13　★
# Q.　先頭が一致
# utf-8
a = input()
b = input()

if b.startswith(a):
    print("Yes")
else:
    print("No")

if a.startswith(b):
    print("Yes")
else:
    print("No")
'''
startswith() メソッドは、Pythonの文字列オブジェクトが持つメソッドの一つです。このメソッドは、文字列が指定した接頭辞で始まるかどうかを判定します。

プログラムの流れは次のとおりです：
最初に、入力として与えられた文字列 b が文字列 a で始まるかどうかを判定します。
もし b が a で始まる場合は、"Yes" を出力し、そうでない場合は "No" を出力します。
次に、a が b で始まるかどうかを判定します。
同様に、もし a が b で始まる場合は、"Yes" を出力し、そうでない場合は "No" を出力します。
startswith() メソッドは、指定された文字列が対象の文字列の先頭にあるかどうかを確認します。例えば、b.startswith(a) は、文字列 b の先頭に文字列 a があるかどうかを確認します。
a.startswith(b) は、同様に、文字列 a の先頭に文字列 b があるかどうかを確認します。

このプログラムは2つの文字列に対して、互いに先頭に含まれるかどうかを判定し、それぞれ "Yes" か "No" を出力します。
'''

# Q.　合計と平均
# utf-8
n = int(input())  # 整数 n を取得

# n 個の整数をリストに格納
numbers = []
for _ in range(n):
    numbers.append(int(input()))

total = sum(numbers)  # リスト内の数値の合計を計算
average = total // n  # 整数の平均値を計算（小数点以下切り捨て）

print(total)
print(average)

'''
入力を受け取ります。次に、合計値を計算します。平均値を計算するには、合計値を要素数で割ります。
最後に、合計値と平均値を出力します。
'''

# Q.　二等辺三角形
# utf-8
a = int(input())
b = int(input())
c = int(input())

if a == b or b == c or c == a:
    print("Yes")
else:
    print("No")
'''
まず、3つの整数a、b、cをそれぞれ入力します。
次に、if文で、a、b、cのいずれか2つが等しい場合、つまり三角形が二等辺三角形である場合に"Yes"を出力し、それ以外の場合に"No"を出力しています。

以下はコードの詳細な解説です：
a = int(input()): 最初の辺の長さを整数として入力します。
b = int(input()): 次の辺の長さを整数として入力します。
c = int(input()): 最後の辺の長さを整数として入力します。
if a == b or b == c or c == a:: この条件式は、aとbが等しいか、bとcが等しいか、またはcとaが等しいかどうかを検証しています。
print("Yes"): もし3つの辺のうちいずれか2つが等しい場合、つまり二等辺三角形である場合、"Yes"を出力します。
else:: もし条件が成り立たない場合、つまり三角形が二等辺三角形ではない場合、以下のコードが実行されます。
print("No"): 三角形が二等辺三角形ではない場合、"No"を出力します。
このコードは、与えられた3つの辺の長さが二等辺三角形を形成するかどうかを確認し、それに応じて "Yes" または "No" を出力します。
'''

# Q.　飽き性
# utf-8
# 入力を整数として受け取る
a, b = map(int, input().split())

# 異なる2種類の食べ物を食べられる最大の日数は、残った数の半分
max_days = min(a, b)

# 1日に同じ種類の食べ物を2回食べなければならない日数は、残った数を2で割った絶対値
same_food_days = abs(a - b) // 2

# 結果を出力
print(max_days, same_food_days)

'''
この問題では、パイザ君が異なる2種類の食べ物を食べる最大の日数と、1日に同じ種類の食べ物を2回食べなければならない日数を計算する必要があります。

与えられた入力を解釈しましょう：
まず、aとbはそれぞれおにぎりとパンの数です。
最大の日数を求めるためには、同じ種類の食べ物が残っている場合はその数の半分、つまりmin(a, b)が異なる2種類の食べ物を食べられる最大の日数になります。
1日に同じ種類の食べ物を2回食べなければならない日数は、残った数を2で割った絶対値で表現されます。これはabs(a - b) // 2です。
このコードは、与えられたおにぎりの数aとパンの数bから、異なる2種類の食べ物を食べる最大の日数と、1日に同じ種類の食べ物を2回食べなければならない日数を計算しています。
そして、これらの結果を半角スペース区切りで出力しています。
'''

# Q.　占い その2
# utf-8
# サイコロの個数を取得
n = int(input())

# 各サイコロの出目をリストとして取得し、総和を計算
dice_faces = list(map(int, input().split()))
dice_sum = sum(dice_faces)

# 総和が7の倍数かどうかを判定し、結果を出力
if dice_sum % 7 == 0:
    print("Yes")
else:
    print("No")

'''
この問題では、与えられたサイコロの数とそれぞれのサイコロの出目を使って、総和が7の倍数かどうかを判定する必要があります。
与えられる入力は、まずサイコロの個数nが与えられ、次に各サイコロの出目が半角スペース区切りで与えられます。
解決のための基本的なロジックは、与えられた各出目の総和を計算し、その総和が7で割り切れるかどうかを調べることです。
最後に、条件に応じて "Yes" または "No" を出力しています。
'''

# Q.　連結判定
# utf-8
def is_connected(n, edges):
    """
    グラフが連結かどうかを判定する関数
    Args:
    - n: 頂点数
    - edges: 辺のリスト
    Returns:
    - 'Yes' または 'No'：グラフが連結かどうかを示す文字列
    """
    # 隣接リストの作成
    graph = {i: [] for i in range(1, n + 1)}
    for edge in edges:
        a, b = edge
        graph[a].append(b)
        graph[b].append(a)

    # 各頂点の訪問状態を管理する辞書
    visited = {i: False for i in range(1, n + 1)}

    # スタックを用いた深さ優先探索
    stack = [1]  # スタート地点は頂点1とする
    visited[1] = True  # 頂点1を訪問済みとする

    while stack:
        node = stack.pop()  # スタックから頂点を取り出す
        for neighbor in graph[node]:  # 隣接する頂点を調べる
            if not visited[neighbor]:  # 隣接する頂点が未訪問の場合
                visited[neighbor] = True  # 隣接する頂点を訪問済みとする
                stack.append(neighbor)  # スタックに隣接する頂点を追加

    # すべての頂点が訪問されたかどうかを確認
    for vertex in visited:
        if not visited[vertex]:
            return 'No'
    
    return 'Yes'

# 入力の読み込み
n, m = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(m)]

# 連結性を判定して出力
print(is_connected(n, edges))
'''
隣接リストの作成:

グラフの辺の情報から隣接リストを作成します。隣接リストは辞書 graph で表現され、各頂点をキーとし、その頂点に隣接する頂点のリストを値として持ちます。
深さ優先探索（DFS）による連結性の判定:
スタート地点となる頂点をスタックに追加し、訪問済みとマークします。
スタックが空になるまで、以下の操作を繰り返します。
スタックから頂点を取り出し、その頂点に隣接する未訪問の頂点をスタックに追加し、訪問済みとマークします。
この操作により、グラフ内の連結なすべての頂点を訪問します。

すべての頂点が訪問されたかどうかの確認:
訪問状態を示す辞書 visited を走査し、すべての頂点が訪問されているかどうかを確認します。
未訪問の頂点があれば、グラフは連結ではないため、'No' を返します。すべての頂点が訪問されていれば、'Yes' を返します。
このプログラムは、与えられた無向グラフが連結であるかどうかを効率的に判定するために、深さ優先探索（DFS）アルゴリズムを使用しています。
DFSはスタックを使用して再帰的に探索を行い、すべての頂点が訪問されるかどうかを判定します。
'''

# paizaの森練習問題コンテスト過去問題14　★
# Q.　回文
# utf-8
s = input()

is_palindrome = True

for i in range(len(s) // 2):
    if s[i] != s[len(s) - 1 - i]:
        is_palindrome = False

if is_palindrome:
    print("Yes")
else:
    print("No")

# Q.　区間の三分割
# utf-8
l, r = map(int, input().split())

one_third = l + (r - l) / 3
two_third = r - (r - l) / 3

print(f"{one_third} {two_third}")

# Q.　割り切れる数の個数
# utf-8
import math


def calc(x):
    return x // 2 + x // 3 - x // 6


a, b = map(int, input().split())

print(calc(b) - calc(a - 1))

# Q.　パイプを切る
# utf-8
n, k = map(int, input().split())
a = list(map(int, input().split()))

pipe_count = 0
for i in range(n):
    pipe_count += a[i] // k

print(pipe_count)

# Q.　好みのピザ
# utf-8
n, m = map(int, input().split())
a = list(map(int, input().split()))

a = set(a)
print(len(a))

# Q.　家計の収支
# utf-8
n, k = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))
ans = k
for i in range(n):
    ans += a[i] - b[i]
print(ans)

# Q.　野球世界大会 1 次ラウンドの順位
# utf-8
from collections import defaultdict

# 参加国の入力
countries = [input() for i in range(5)]

# 勝数の計算
wins = defaultdict(int)
for i in range(10):
    game, result = input().split()
    team1, team2 = game.split("-")

    if result == "1":
        wins[team1] += 1
    else:
        wins[team2] += 1

# 順位の決定
ranking = sorted(wins.items(), key=lambda x: (-x[1], x[0]))

# 上位 2 チームの出力
print(ranking[0][0])
print(ranking[1][0])

# paizaの森練習問題コンテスト過去問題15　★
# Q.　出力の練習
# utf-8
print("test")

# Q.　red があるか調べてみよう
# utf-8
word_list = input().split()
if "red" in word_list:
    print("Yes")
else:
    print("No")
'''
入力された単語を配列やリストに格納します。
　　配列やリストの名前に特に決まりはありませんが、この解説では、単語(word)の一覧(lsit)であることを表現する意図を持ってword_listと名付けています。
演算子などを使って、配列やリストの中に red が含まれているか調べます。Python では in 演算子を使うことで、リストの中に特定の値が含まれているか否か調べることができます。
結果に応じてYesかNoを出力します。
'''

# Q.　階乗
# utf-8
n = int(input())

number_of_permutation = 1
for i in range(1, n + 1):
    number_of_permutation *= i

print(number_of_permutation)
'''
入力された単語を配列やリストに格納します。
配列やリストの名前に特に決まりはありませんが、この解説では、単語(word)の一覧(lsit)であることを表現する意図を持ってword_listと名付けています。
演算子などを使って、配列やリストの中に red が含まれているか調べます。
結果に応じてYesかNoを出力します。
'''

# Q.　単語のカウント
# utf-8
li = input().split()

m = []
k = []

for i in li:
    if i in m:
        k[m.index(i)] += 1
    else:
        m.append(i)
        k.append(1)

for i in range(len(m)):
    print(m[i], k[i])

# Q.　倍数の存在
# utf-8
a, b, c = map(int, input().split())

flag = False
for i in range(b, c + 1):
    if i % a == 0:
        flag = True
        break

if flag:
    print("Yes")
else:
    print("No")
'''
このコードは、与えられた数 a, b, c に対して、a の倍数が b 以上 c 以下の範囲に存在するかどうかを確認するものです。
標準入力からスペース区切りで与えられた a, b, c を整数として読み込みます。
a: 倍数の基準となる整数
b: 範囲の開始点（この値以上）
c: 範囲の終了点（この値以下）
flag 変数を False に初期化します。これは、a の倍数が見つかったかどうかを記録するための変数です。
b から c までのすべての整数 i について、以下の処理を行います。

i が a の倍数かどうかを判定します (i % a == 0)。
もし i が a の倍数であれば、flag を True に設定し、ループを終了します (break)。
i % a == 0 という条件は、i を a で割ったときの余りが 0 であることを意味します。つまり i が a の倍数であることを意味します。
ループが終了した後、flag の値に基づいて結果を出力します。

flag が True であれば「Yes」を出力します。
flag が False のままであれば「No」を出力します。
'''

# Q.　全員が不正答
# utf-8
# 入力を受け取る
import sys
input = sys.stdin.read
data = input().strip().split()

# 1行目のテストの問題数 n, 生徒数 m を取得
n = int(data[0])
m = int(data[1])

# 生徒の解答データを取得
c = []
index = 2
for _ in range(m):
    c.append(list(map(int, data[index:index + n])))
    index += n

# 全員が不正答だった問題があるかをチェック
for j in range(n):
    all_incorrect = True
    for i in range(m):
        if c[i][j] == 1:
            all_incorrect = False
            break
    if all_incorrect:
        print("Yes")
        exit()

print("No")
'''
この問題では、与えられた生徒の解答データから、全員が不正答（0）だった問題が存在するかどうかを判定する必要があります。
標準入力からデータを読み取ります。
最初の行からテストの問題数 n と生徒数 m を取得します。
その後、各生徒の解答データを2次元リスト c に格納します。
各問題について、全ての生徒が不正答だったかどうかをチェックします。具体的には、ある問題 j について、全ての生徒 i の解答が0であるかを確認します。
全ての生徒が不正答だった問題が見つかった場合は即座に "Yes" を出力してプログラムを終了します。
全ての問題をチェックした結果、全員不正答だった問題が一つもなかった場合は "No" を出力します。
'''

# paizaの森練習問題コンテスト過去問題16　★
# Q.　3つの数
# utf-8
print(8)
print(1)
print(3)

# Q.  税込価格
# utf-8
p = int(input())
s = input()

if s == 'T':
    print(int(p * 1.1))
else:
    print(int(p * 1.08))

# Q.  パターン検出
# utf-8
import sys

def main():
    # 標準入力から全てのデータを読み込み、一度に取得する
    input = sys.stdin.read().strip().split('\n')
    
    # 最初の行は文字列の個数 N
    N = int(input[0])
    
    # 次の N 行は N 個の文字列 S_i
    strings = input[1:N+1]
    
    # 最後の行は対象文字列 T
    T = input[N+1]
    
    # 各 S_i が T の部分文字列に含まれているか確認する
    for s in strings:
        # s が T の部分文字列に含まれていれば "Yes" を出力して終了
        if s in T:
            print("Yes")
            return
    
    # どの S_i も T の部分文字列に含まれていなかった場合は "No" を出力
    print("No")

if __name__ == "__main__":
    main()

'''
標準入力から全てのデータを一度に読み込み、行ごとに分割します。最初の行から整数 N を取得します。
次の N 行を strings リストに格納します。最後の行を対象文字列 T に設定します。
各文字列 s が T の部分文字列として含まれているかを確認します。含まれていれば "Yes" を出力し、プログラムを終了します。
すべての文字列 s が T に含まれていない場合、 "No" を出力します。
'''

# Q.  連続ホームラン
import sys

def calculate_home_run_probability(n, m):
    """
    m 打席連続でホームランを打つ確率を計算する関数
    
    Args:
    n (int): ホームランを打つのに必要な打席数
    m (int): 連続でホームランを打つ打席数
    
    Returns:
    float: m 打席連続でホームランを打つ確率
    """
    # ホームランを打つ確率は 1 / n
    # したがって m 打席連続でホームランを打つ確率は (1 / n) の m 乗
    probability = (1 / n) ** m
    return probability

if __name__ == "__main__":
    # 標準入力からデータを読み込む
    input_line = sys.stdin.read().strip()
    # 入力値を整数に変換
    n, m = map(int, input_line.split())
    # 確率を計算
    result = calculate_home_run_probability(n, m)
    # 結果を小数点以下6桁で出力
    print(f"{result:.6f}")
'''
calculate_home_run_probability 関数では、m 打席連続でホームランを打つ確率を計算します。この関数は、引数として n と m を受け取り、計算した確率を返します。
if __name__ == "__main__": の部分で、標準入力から入力値を読み取り、スペースで区切って n と m に分解します。
calculate_home_run_probability 関数を使って確率を計算し、結果を小数点以下6桁で出力します。
'''

# Q.  辞書順で 3 番目に小さい文字列
# utf-8
import itertools

# 入力の受け取り
n = int(input())  # 文字列の長さ（問題文では使用しませんが、サンプル入力に合わせて読み取ります）
s = input().strip()  # 文字列の読み取り

# 文字列をソートして辞書順で最小の並びにする
sorted_s = "".join(sorted(s))

# itertools.permutations を使用して、すべての順列を生成
# ここで重複する順列はないので、そのまま利用できます
perms = itertools.permutations(sorted_s)

# 辞書順で3番目の順列を取得
i = 0
for k in perms:
    i += 1
    if i == 3:  # 3番目の順列に達したら、その順列を出力
        print("".join(k))
        break  # 3番目を見つけたので、ループを終了
'''
入力の受け取り:

n は文字列の長さですが、この問題では具体的な用途はありません。ただし、コードの整合性のために読み取っています。
s は処理対象の文字列です。strip() メソッドで末尾の改行を取り除いています。
文字列をソート:

sorted(s) により、文字列の文字を辞書順に並び替えたリストを取得し、"".join() で再度文字列として結合します。これにより、辞書順で最小の順列を生成するための出発点を作ります。
順列の生成:

itertools.permutations(sorted_s) によって、文字列のすべての順列を生成します。
3番目の順列の取得:

順列を一つずつ確認し、3番目の順列に達したら出力します。その後、ループを終了します。
この方法は、文字列の長さが最大で10文字のため、全順列を列挙しても十分に処理可能です。
'''
# Q.  村人の友好関係(easy)
# utf-8
# 入力の読み取り
n, m, q = map(int, input().split())

# 隣接行列の作成（友好度の初期化）
# ga[i][j] は村人 i と村人 j の友好度を示す
# 初期状態ではすべての友好度は 0 で、後で値を更新します
ga = [[0 for j in range(n)] for i in range(n)]

# 友好度の情報を読み取る
for _ in range(m):
    a, b, f = map(int, input().split())
    a -= 1
    b -= 1
    ga[a][b] = ga[b][a] = f

# 同好会のメンバーを追跡するための配列
# is_member[i] は村人 i が同好会に属しているかどうかを示す
is_member = [False for _ in range(n)]

# ログの処理
for _ in range(q):
    line = input().split()
    op = line[0]  # 操作（+ または -）
    v = int(line[1]) - 1  # 村人の番号（0-indexed）
    if op == '+':
        is_member[v] = True
    elif op == '-':
        is_member[v] = False

# 人気度の計算
max_f = 0
for a in range(n):
    for b in range(n):
        if is_member[a] != is_member[b]:  # 片方だけが同好会に属している
            max_f = max(max_f, ga[a][b])

# 結果の出力
print(max_f)
'''
入力の読み取り
n: 村人の人数
m: 友好度の情報の数
q: 同好会の更新操作の数

隣接行列の作成
gaは村人間の友好度を保持する二次元リストです。初期状態ではすべて0に設定されています。
for _ in range(m): 友好度の情報を読み取り、gaに設定します。

同好会メンバーの管理
is_memberは村人が同好会に所属しているかどうかを管理するリストです。
for _ in range(q): ログに基づき、同好会に村人を追加または削除します。

人気度の計算
max_fは人気度の最大値を保持します。
二重ループを使って、全ての村人の組み合わせに対して、片方が同好会メンバーで片方が非メンバーである場合の友好度の最大値を計算します。

結果の出力
print(max_f): 計算された人気度を出力します。
'''

# paizaの森練習問題コンテスト過去問題17　★
# Q. 最大値と最小値
# utf-8
a = int(input())
b = int(input())
c = int(input())

print(max(a, max(b, c)))
print(min(a, min(b, c)))

# Q. 神経衰弱
# utf-8
cards = list(map(int, input().split()))
cards.sort()

if cards[0] == cards[1] and cards[2] == cards[3]:
    print("Yes")
else:
    print("No")

# Q. じゃんけん(忖度)
# utf-8
y, h = input().split()
rps = "RPS"

ans_index = rps.find(h)
if int(y) < 10:
    ans_index -= 1
else:
    ans_index += 1

ans_index = (ans_index + 3) % 3

print(rps[ans_index])

# Q. n→10進法
# utf-8
n = int(input())
a = input()
a = list(a)
ans = 0
for i in range(len(a)):
    ans *= n
    ans += int(a[i])
print(ans)

# Q.お菓子の価格帯
# utf-8
n = int(input())
a = list(map(int, input().split()))
q = int(input())
for _ in range(q):
    ans = 0
    l, r = map(int, input().split())
    for i in range(n):
        if l <= a[i] and a[i] <= r:
            ans += 1
    print(ans)

# Q.ぴったり卵を生産 その2
# utf-8
import bisect

n, k = map(int, input().split())

a = list(map(int, input().split()))


def calc(l, t):
    sum_l = []
    for i in range(2 ** len(l)):
        sum = 0
        for j in range(len(l)):
            if i & (1 << j):
                if t == 0:
                    sum += a[j]
                else:
                    sum += a[j + (n // 2)]
        sum_l.append(sum)
    return sum_l


h1 = a[0 : (n // 2)]
h2 = a[(n // 2) : n]
P = calc(h1, 0)
Q = calc(h2, 1)
Q.sort()
Q_mi = Q.copy()
for i in range(len(Q_mi)):
    Q_mi[i] = -Q_mi[i]
Q_mi.sort()
ans = 0
for i in range(len(P)):
    pos1 = bisect.bisect_left(Q, k - P[i])
    if pos1 < len(Q) and Q[pos1] == k - P[i]:
        pos2 = len(Q_mi) - 1 - bisect.bisect_left(Q_mi, -(k - P[i]))
        ans += pos2 - pos1 + 1

print(ans)

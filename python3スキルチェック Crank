※欠番が存在する理由につきましては、出題自体を公開終了した問題が欠番となっております。

--------------------------------------------- C001　※欠番 ◆
# C001 ◆
# C002　
# C003
# C004
# C005　アドレス調査
utf-8
def is_valid_ipv4(ip_string):
    # 入力されたIPアドレスを"."で分割し、各部分が10進数の範囲内にあるかをチェック
    parts = ip_string.split(".")
    if len(parts) != 4:  # IPアドレスが4つの部分で構成されているかをチェック
        return False

    for part in parts:
        if not part.isdigit():  # 数字以外の文字が含まれていないかをチェック
            return False

        num = int(part)
        if num < 0 or num > 255:  # 0から255の範囲内にあるかをチェック
            return False

    return True

# IPアドレスの数を取得
M = int(input().rstrip())

# M行の入力を受け取り、それぞれのIPアドレスの書式を判定して結果を出力
for _ in range(M):
    ip_string = input().rstrip()  # 入力文字列を取得し、末尾の改行を削除
    valid = is_valid_ipv4(ip_string)
    print(valid)  # 書式が合っているかどうかを出力
    
# C006 ハイスコアランキング
# utf-8
def calculate_score(C, X):
    """
    スコアを計算する関数
    :param C: アイテム種別ごとの得点を格納したリスト
    :param X: ユーザーのアイテム持ち数を格納したリスト
    :return: スコア
    """
    score = sum([C[i] * X[i] for i in range(len(C))])
    return round(score)

def top_k_scores(C, X, M, K):
    """
    トップKのスコアを計算する関数
    :param C: アイテム種別ごとの得点を格納したリスト
    :param X: ユーザーのアイテム持ち数を格納したリスト
    :param M: ユーザーの数
    :param K: トップKのスコアを取得する数
    :return: トップKのスコアを格納したリスト
    """
    scores = []
    for i in range(M):
        score = calculate_score(C, X[i])
        scores.append(score)
    top_k_scores = sorted(scores, reverse=True)[:K]
    return top_k_scores

# 入力を受け取る
params = input().split() # 一行目のパラメータをスペースで分割してリストに格納
N = int(params[0])
M = int(params[1])
K = int(params[2])

C = list(map(float, input().split())) # 二行目のパラメータをスペースで分割してリストに格納し、float型に変換
X = [] # 三行目以降のパラメータを二次元リストに格納
for _ in range(M):
    x = list(map(int, input().split())) # 三行目以降のパラメータをスペースで分割してリストに格納し、int型に変換
    X.append(x)

# トップKのスコアを計算
top_k_scores = top_k_scores(C, X, M, K)

# 結果を改行で出力
for i in range(K):
    print(top_k_scores[i])
    
# C007
# C008
# C009
# C010 安息の地を求めて
# utf-8
s = input().strip().split(" ")
n1 = list(map(int, s))  # int変換

cnt = int(input())

for i in range(cnt):
    s = input().strip().split(" ")
    n3 = list(map(int, s))  # int変換

    if ((n3[0] - n1[0]) ** 2) + ((n3[1] - n1[1]) ** 2) >= (n1[2] ** 2):
        print("silent")
    else:
        print("noisy")
        
--------------------------------------------- C011　※欠番 ◆
# C011
# C012
# C013　嫌いな数字
# utf-8
# 嫌いな数字を入力
n = int(input())

# 範囲外の場合はエラーを出力して終了
if n < 0 or n > 9:
    print("嫌いな数字は0から9の範囲で入力してください。")
    exit()

# 病室の総数を入力
m = int(input())

# 範囲外の場合はエラーを出力して終了
if m < 1 or m > 100:
    print("病室の総数は1から100の範囲で入力してください。")
    exit()

# 希望する病室の部屋番号を格納するリスト
desired_rooms = []

# 各病室の部屋番号を入力し、希望する病室をリストに追加
for i in range(m):
    room_number = int(input())

    # 範囲外の場合はエラーを出力して終了
    if room_number < 1 or room_number > 1000:
        print("部屋番号は1から1000の範囲で入力してください。")
        exit()

    if str(n) not in str(room_number): # 部屋番号に嫌いな数字が含まれていない場合
        desired_rooms.append(room_number)

# 希望する病室があるかどうかを判定し、出力
if len(desired_rooms) > 0:
    for room in desired_rooms:
        print(room)
else:
    print("none")
        
# C014
# utf-8
# 入力からボールの半径と箱の情報を取得
n, r = map(int, input().split())
boxes = []
for i in range(n):
    h, w, d = map(int, input().split())
    boxes.append((h, w, d))

# ボールを収納することができる箱の番号を格納するリストを初期化
result = []

# 各箱について、ボールを収納できるかを判定
for i in range(n):
    h, w, d = boxes[i]
    # 箱の高さ、幅、奥行きのうち最も短いものを取得
    shortest_side = min(h, w, d)
    # ボールの直径が最も短い箱の辺の長さ以下であれば、ボールを収納できる
    if shortest_side >= 2 * r:
        result.append(i + 1)  # 箱の番号をリストに追加

# 結果を昇順に出力
for num in result:
    print(num)
    
# C015 ポイントカードの計算
# utf-8
# coding: utf-8
import math

cnt = int(input())

sum = 0
for i in range(cnt):
    s = input().strip().split(" ")
    a = str(s[0])
    n = int(s[1])

    if "3" in a:
        sum += math.floor(n / 100 * 3)
    elif "5" in a:
        sum += math.floor(n / 100 * 5)
    else:
        sum += math.floor(n / 100)

print(sum)

# C016 Leet文字列
# utf-8
def to_leet_string(input_string):
    leet_rules = {
        'A': '4',
        'E': '3',
        'G': '6',
        'I': '1',
        'O': '0',
        'S': '5',
        'Z': '2'
    }

    leet_string = ''
    for char in input_string:
        if char.upper() in leet_rules:
            leet_string += leet_rules[char.upper()]
        else:
            leet_string += char

    return leet_string

input_string = input().rstrip() # 入力文字列を取得し、末尾の改行を削除
leet_string = to_leet_string(input_string)
print(leet_string, end='\n') # Leet文字列を出力し、最後に改行を追加

# C017　ハイアンドロー・カードゲーム
def compare_cards(parent_card, child_card):
    """
    親カードと子カードの強弱関係を比較する関数

    Args:
        parent_card (tuple): 親カードの情報。(1つ目の番号, 2つ目の番号)
        child_card (tuple): 子カードの情報。 (1つ目の番号, 2つ目の番号)

    Returns:
        str: 強弱関係の結果を表す文字列。'High'、'Low'のいずれか。
    """
    parent_num1, parent_num2 = parent_card
    child_num1, child_num2 = child_card

    if parent_num1 > child_num1:
        return 'High'
    elif parent_num1 < child_num1:
        return 'Low'
    else:
        if parent_num2 < child_num2:
            return 'High'
        else:
            return 'Low'

# 親カードの情報を入力
parent_card = tuple(map(int, input().split()))

# 子カードの数を入力
n = int(input())

# 子カードの情報を入力し、強弱関係を判定して出力
for i in range(n):
    child_card = tuple(map(int, input().split()))
    result = compare_cards(parent_card, child_card)
    print(result)

# C018
# C019
# C020
# C021
# C022
# C023
# C024
# C025
# C026
# C027
# C028
# C029
# C030














# C128

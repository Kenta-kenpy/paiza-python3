<拡張ユークリッドの互除法>
step1 ユークリッドの互除法
# utf-8
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


a, b = map(int, input().split())
print(gcd(a, b))
'''
問題文中のユークリッドの互除法の手順通りの処理を行うプログラムを作成しましょう。
手順の 2 にある「A , B のうち小さいほうで大きいほうを割る」という操作では、条件分岐で A , B のうち大きいほうを調べる必要があるように思えますが、「A , B の大きいほうで小さいほうをわり、大きいほうをその余りで置き換える」操作をした時、大きいほうの値と小さいほうの値がそのまま入れ替わるだけなので、A , B の大小の判定は行わなくても大丈夫です。
この操作は最初のループ処理でのみ起こりうるので全体の計算量に影響を及ぼしません。

<別解>
import math
a, b = map(int, input().split())
print(math.gcd(a, b))
# Python3 の標準ライブラリである math には、与えられた 2 つの整数の最大公約数を計算する gcd() 関数が存在します。
'''

step2 3つ以上の整数の最大公約数
# utf-8
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


N = int(input())
gcd_all = int(input())

for i in range(N - 1):
    a = int(input())
    gcd_all = gcd(gcd_all, a)

print(gcd_all)
'''
問題文にある通り、3 つ以上の整数 a,b,c,d,e,... の最大公約数はgcd(...gcd(gcd(gcd(gcd(a,b),c),d),e)...)といった具合に求めることができます。
そのため、初めの整数を受け取ったのち、次の処理を残りの入力について行えば良いです。
「ループ処理を用いて変数を 1 つ受け取り、その時点での gcd の値と受け取った変数の gcd を求める。」
2 変数の gcd を求める処理は関数化しておくと再利用しやすくなります。
'''

step3 最小公倍数
# utf-8
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


a, b = map(int, input().split())
print(a * b // gcd(a, b))
'''
最大公約数 gcd の値を求めて、問題文中の式 lcm(A,B) = A×B/gcd(A,B) の値を求めれば良いです。
gcd で a と b の積を割る際に、返す値が整数値となるように // 演算子で除算をしています。
/ 演算子で除算をすると、返す値が浮動小数点数となり、正答できないことに注意してください。
'''

step4 ax + by = c
# utf-8
a, b, c = map(int, input().split())

if a % b == c:
    x = 1
    y = -(a // b)
else:
    x = -(b // a)
    y = 1

print(x, y)
'''
問題文より、C = A%B または C = B%A であることが保証されているので、このどちらに当てはまるかを実際に計算することで確かめましょう。
C = A%B の場合は、C = A - (A/B)Bであり、C = B%A の場合は、C = - (B/A)A + Bであるので、場合分けに応じた出力をしましょう。
'''

final 拡張ユークリッドの互除法
# utf-8
def extgcd(a, b):
    if b != 0:
        c, y, x = extgcd(b, a % b)
        y -= (a // b) * x
        return c, x, y
    return a, 1, 0


a, b = map(int, input().split())
c, x, y = extgcd(a, b)

print(x, y)

<意地悪すごろく>
step1 分数
# utf-8
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


a, b, cal, c, d = input().split()
a, b, c, d = map(int, [a, b, c, d])

if cal == "+":
    numerator = a * d + b * c
    denominator = b * d
elif cal == "-":
    numerator = a * d - b * c
    denominator = b * d
elif cal == "*":
    numerator = a * c
    denominator = b * d
else:
    numerator = a * d
    denominator = b * c

if numerator == 0:
    denominator = 1
else:
    div = gcd(abs(numerator), abs(denominator))
    numerator //= div
    denominator //= div
    if denominator < 0:
        denominator *= -1
        numerator *= -1

print(numerator, denominator)
'''
各演算の約分前の分子 n の値は次の通りです。
A × D + C × B    // cal が +
A × D - C × B    // cal が -
A × C    // cal が *
A × D    // cal が /
また、約分前の分母 d の値は次の通りです。
B × D    // cal が + , - , *
B × C    // cal が /
これであとは、n と d を gcd(n , d) で割ることで約分ができ答えが求められます。
ここで注意しなければいけないのが、一般に gcd は負の数を扱うことができない点と、答えが負の場合では n を負の数にしなければいけない点です。
場合分けが面倒ですが、gcd に n , d を渡す際には正の数に直してから渡したり、 n , d の正負の組み合わせに応じて答えの正負を調整する必要があります。
n , d のうち、1 つが負である場合は答え全体が負になり、それ以外の場合は正になります。

map(int, [a,b,c,d]) では、文字列型として受け取った a,b,c,d を、map() 関数を用いて、まとめて整数(int)型に変換しています。
約分するときに、分子と分母を / 演算子で割らないように注意しましょう。（/ 演算子で割った値は、整数型ではなく浮動小数点数型となります。）
'''

final 意地悪すごろく
# utf-8
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


n, a = map(int, input().split())
none = True
for b in range(1, 1001):
    min_move = gcd(a, b)
    if n % min_move != 0 and b != a:
        print(b)
        none = False
if none:
    print(-1)
'''
-A , -B , 0 , 0 , A , B の 6 つの目の出た回数をそれぞれ a 〜 f とすると、移動したマス数は -Aa-Bb+Ae+Bfとなります。
これを整理すると A(e-a) + B(f-b) となります。
a 〜 f は回数であり整数であるので、e-a , f-b は整数となります。
よって、paiza 君が移動したマス数は、ある整数 x , y を用いて、 Ax + By と表すことができます。
paiza 君がゴールするための条件は、移動の結果 N マスちょうど進むことができること、すなわち Ax + By = Nを満たす整数の組 (x , y) が存在することです。
ここで、paiza 君が移動できる最小のマス数を考えます。Ax + By = Nを満たす (x , y) が存在するときの最小の N の値は gcd(A , B) であるから、paiza君の最小の移動のマス数は gcd(A , B) となります。
つまり、paiza くんが移動できるのは gcd(A, B) の倍数マスのみです。
よって N が gcd(A , B) の倍数マスでない、つまり N が gcd(A, B)で割り切れない時 paiza 君はゴールすることができません。
'''

<RSA暗号の基本原理>
step1 合同式
# utf-8
n, a = map(int, input().split())

for i in range(1, 100001):
    if a % n == i % n:
        print(i)
'''
1 〜 100,000 の全ての数 i について、「i を N で割った余りが A を N で割った余りに等しい場合、i を出力する。」　という処理を行えば良いです。
'''

step2 modの演算
# utf-8
n = int(input())
a, cal, b = input().split()
a, b = map(int, [a, b])

if cal == "+":
    print(((a % n) + (b % n)) % n)
elif cal == "-":
    print(((a % n) - (b % n) + n) % n)
elif cal == "*":
    print((a % n) * (b % n) % n)
else:
    ans = 1
    for i in range(b):
        ans *= a
        ans %= n
    print(ans)
'''
問題文中の関係式に基づいて mod N での計算を行うプログラムを作成しましょう。
引き算の場合のみ注意が必要です。a ≡ b(mod N) , c ≡ d(mod N)のとき、
a < c の場合は
a % N - c % N
の値が負になってしまうため、答えが 0 以上 N 未満 になりません。
mod N の演算では、N % N = 0 であるため、+ N , - N は演算結果に影響を及ぼしません。
そのため、引き算の結果が負になってしまった場合は + N を繰り返すことで必ず 0 以上 N 未満にすることができます。
（今回の場合は -N < a - c < Nであるため + N すれば良いです。）
この問題で出てきた 4 つの演算については、計算の途中のどのタイミングであっても mod N の値 (N で割った余り) に直して良いという風に覚えておくと良いと思います。
'''

step3 modの逆元
# utf-8
def extgcd(a, b):
    if b != 0:
        c, y, x = extgcd(b, a % b)
        y -= (a // b) * x
        return c, x, y
    return a, 1, 0


m, a = map(int, input().split())
c, x, y = extgcd(a, m)
ans = (x + m) % m
print(ans)
'''
問題文にある通り、A の mod 逆元を求めるには拡張ユークリッドの互除法を用いて x , y についての 1 次方程式 Ax + My = 1 の 解 x を求めれば良いです。
拡張ユークリッドの互除法では、解が負の値となる場合があるので、問題文にしたがって x の値を 1 以上 M 未満にすることを忘れないでください。
'''

step4 高速な累乗の計算
# utf-8
def modpow(a, b, m):
    ans = 1
    while 0 < b:
        if b & 1 == 1:
            ans = (ans * a) % m
        a = (a * a) % m
        b >>= 1
    return ans


a, b, m = map(int, input().split())
print(modpow(a, b, m))
'''
問題文中の以下のアルゴリズムの処理を行うプログラムを作成しましょう。
まず b の 2 進数表現を考えます。b の最下位の桁が 2 かどうかを確認します。
最下位の桁が 1 の場合、 a を ans にかけます。
この処理が終わったら、a を a の 2 乗に置き換え、b を右に 1 ビットシフト(もしくは ÷2)します。
これを b が 0 以下になるまで繰り返すことで、i 回目のときに、a ^ (2 ^ (i - 1)) のかけ算を行うことができます。
Python3 でのビット演算においては、& 演算子が論理積を表します。例えば、6 & 7 の場合、6 を 2 進数表記した 110 と 7 を 2 進数表記した 111 についての論理積は 110 であるので、10 進数表記にすると 6 となります。
C++ と同様に、A を n ビット右シフトするときは A >> n、A を n ビット左シフトするときは A << n と記述します
'''

final RSA暗号の基本原理
# utf-8
def extgcd(a, b):
    if b != 0:
        c, y, x = extgcd(b, a % b)
        y -= (a // b) * x
        return c, x, y
    return a, 1, 0


def modpow(a, b, m):
    ans = 1
    while 0 < b:
        if b & 1 == 1:
            ans = (ans * a) % m
        a = (a * a) % m
        b >>= 1
    return ans


p, q, e, M = map(int, input().split())
n = p * q
n_prime = (p - 1) * (q - 1)

c, x, y = extgcd(e, n_prime)
d = (x + n_prime) % n_prime
E = modpow(M, e, n)
afterM = modpow(E, d, n)

print(d)
print(E)
print(afterM)
'''
問題の指示通りの計算を行いましょう。具体的には次のような手順です。
1. n' = (p-1)(q-1) を求める。
2. 拡張ユークリッドの互除法を用いて d = e^{-1} (mod n') を求める。
3. 繰り返し二乗法を用いて E = M^e (mod n) を求める。
4. 繰り返し二乗法を用いて E^d (mod n) を求める。
この一連の操作は、入力で与えられた M を暗号化してそれを復号するという一連の処理を行なったものなので、 4. で得られる E^d (mod n) の値が入力で与えられた M の値と一致していれば、正しく処理が行えたということになります。
拡張ユークリッドの互除法を用いた mod 逆元の求め方や繰り返し二乗法がわからない方は、この問題集にある「mod の逆元」「高速な累乗の計算」を解いてみてください。
繰り返し二乗法では計算の途中で現れる値が大きくなることがあるので注意してください。
'''

<RSA暗号の作成(文字列)>
step1 RSA暗号の解読(1文字)
# utf-8
def extgcd(a, b):
    if b != 0:
        c, y, x = extgcd(b, a % b)
        y -= (a // b) * x
        return c, x, y
    return a, 1, 0


def modpow(a, b, m):
    ans = 1
    while 0 < b:
        if b & 1 == 1:
            ans = (ans * a) % m
        a = (a * a) % m
        b >>= 1
    return ans


p, q, e, E = map(int, input().split())
n = p * q
n_prime = (p - 1) * (q - 1)

c, x, y = extgcd(e, n_prime)
d = (x + n_prime) % n_prime
M = modpow(E, d, n)

print(chr(M))
'''
この問題では、あなたは受信者であるので、E^d mod n の値を求めることで暗号化前の数値を得ることができます。
E と n の値は与えられているので、d の値が求まれば良いです。前の問題でやった暗号を解読した後、その値を ASCII コードに基づいて文字に直せば良いです。
Python3 では、ASCII コードに基づいて整数 N を文字に変換する場合は chr(N) と書けば良いです。
'''

step2 RSA暗号の解読(文字列)
# utf-8
def extgcd(a, b):
    if b != 0:
        c, y, x = extgcd(b, a % b)
        y -= (a // b) * x
        return c, x, y
    return a, 1, 0


def modpow(a, b, m):
    ans = 1
    while 0 < b:
        if b & 1 == 1:
            ans = (ans * a) % m
        a = (a * a) % m
        b >>= 1
    return ans


def divisor(n):
    for i in range(2, int(n ** (1 / 2))):
        if n % i == 0:
            p = i
            q = n // i
            return p, q


n, e, E = map(int, input().split())
p, q = divisor(n)
n_prime = (p - 1) * (q - 1)

c, x, y = extgcd(e, n_prime)
d = (x + n_prime) % n_prime
M = modpow(E, d, n)

letter = [0] * 4
for i in range(4):
    for j in range(7):
        if M % 2 == 1:
            letter[i] += pow(2, j)
        M //= 2

output = ""
for i in range(4):
    if letter[3 - i] != 0:
        output += chr(letter[3 - i])
print(output)
'''
この問題では、あなたは受信者であるので、E^d mod n の値を求めることで暗号化前の数値を得ることができます。
E と n の値は与えられているので、d の値が求まれば良いです。二つの素数 p と q に関しては、n がある整数で割り切れるかどうかひとつずつ調べることで求められます。前の問題でやった暗号を解読した後、次の操作を行えば良いです。
1. 求めた値を 2 進数に直し 7 ビットずつに区切った時の値を求める。
2. 区切った値をそれぞれ 10 進数に直し、それらを ASCII コードに基づいて文字に直す。
暗号の解読に必要な計算は、この問題集の他の問題や素数問題集にて扱っているので、わからない箇所がある方はこれらの問題に取り組んでみてください。
1. については、10 進数の整数 N を 2 で i 回割ったときの余りが、 N を 2 進数で表したときの下から i 桁目になるという 10 進数から 2 進数への変換を行いましょう。
7 桁ずつ（１文字分）区切って 2 進数の値を求めて、それらを配列などに格納し、各数字を ASCII コードに基づいて文字に変換すれば良いです。
2 進数から 10 進数の変換は、i = 1, 2, ..., 7 に対して 「2 進数の下から i 桁目が 1 のとき、10 進数の値に + 2^(i-1) を足す」 を行えば良いです。
Python3 では、ASCII コードに基づいて整数 N を文字に変換する場合は chr(N) と書けば良いです。
'''

final RSA暗号の作成(1文字)

<拡張ユークリッドの互除法>
step1 ユークリッドの互除法
# utf-8
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


a, b = map(int, input().split())
print(gcd(a, b))
'''
問題文中のユークリッドの互除法の手順通りの処理を行うプログラムを作成しましょう。
手順の 2 にある「A , B のうち小さいほうで大きいほうを割る」という操作では、条件分岐で A , B のうち大きいほうを調べる必要があるように思えますが、「A , B の大きいほうで小さいほうをわり、大きいほうをその余りで置き換える」操作をした時、大きいほうの値と小さいほうの値がそのまま入れ替わるだけなので、A , B の大小の判定は行わなくても大丈夫です。
この操作は最初のループ処理でのみ起こりうるので全体の計算量に影響を及ぼしません。

<別解>
import math
a, b = map(int, input().split())
print(math.gcd(a, b))
# Python3 の標準ライブラリである math には、与えられた 2 つの整数の最大公約数を計算する gcd() 関数が存在します。
'''

step2 3つ以上の整数の最大公約数
# utf-8
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


N = int(input())
gcd_all = int(input())

for i in range(N - 1):
    a = int(input())
    gcd_all = gcd(gcd_all, a)

print(gcd_all)
'''
問題文にある通り、3 つ以上の整数 a,b,c,d,e,... の最大公約数はgcd(...gcd(gcd(gcd(gcd(a,b),c),d),e)...)といった具合に求めることができます。
そのため、初めの整数を受け取ったのち、次の処理を残りの入力について行えば良いです。
「ループ処理を用いて変数を 1 つ受け取り、その時点での gcd の値と受け取った変数の gcd を求める。」
2 変数の gcd を求める処理は関数化しておくと再利用しやすくなります。
'''

step3 最小公倍数
# utf-8
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


a, b = map(int, input().split())
print(a * b // gcd(a, b))
'''
最大公約数 gcd の値を求めて、問題文中の式 lcm(A,B) = A×B/gcd(A,B) の値を求めれば良いです。
gcd で a と b の積を割る際に、返す値が整数値となるように // 演算子で除算をしています。
/ 演算子で除算をすると、返す値が浮動小数点数となり、正答できないことに注意してください。
'''

step4 ax + by = c
# utf-8
a, b, c = map(int, input().split())

if a % b == c:
    x = 1
    y = -(a // b)
else:
    x = -(b // a)
    y = 1

print(x, y)
'''
問題文より、C = A%B または C = B%A であることが保証されているので、このどちらに当てはまるかを実際に計算することで確かめましょう。
C = A%B の場合は、C = A - (A/B)Bであり、C = B%A の場合は、C = - (B/A)A + Bであるので、場合分けに応じた出力をしましょう。
'''

final 拡張ユークリッドの互除法
# utf-8
def extgcd(a, b):
    if b != 0:
        c, y, x = extgcd(b, a % b)
        y -= (a // b) * x
        return c, x, y
    return a, 1, 0


a, b = map(int, input().split())
c, x, y = extgcd(a, b)

print(x, y)

<意地悪すごろく>
step1 分数
# utf-8
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


a, b, cal, c, d = input().split()
a, b, c, d = map(int, [a, b, c, d])

if cal == "+":
    numerator = a * d + b * c
    denominator = b * d
elif cal == "-":
    numerator = a * d - b * c
    denominator = b * d
elif cal == "*":
    numerator = a * c
    denominator = b * d
else:
    numerator = a * d
    denominator = b * c

if numerator == 0:
    denominator = 1
else:
    div = gcd(abs(numerator), abs(denominator))
    numerator //= div
    denominator //= div
    if denominator < 0:
        denominator *= -1
        numerator *= -1

print(numerator, denominator)
'''
各演算の約分前の分子 n の値は次の通りです。
A × D + C × B    // cal が +
A × D - C × B    // cal が -
A × C    // cal が *
A × D    // cal が /
また、約分前の分母 d の値は次の通りです。
B × D    // cal が + , - , *
B × C    // cal が /
これであとは、n と d を gcd(n , d) で割ることで約分ができ答えが求められます。
ここで注意しなければいけないのが、一般に gcd は負の数を扱うことができない点と、答えが負の場合では n を負の数にしなければいけない点です。
場合分けが面倒ですが、gcd に n , d を渡す際には正の数に直してから渡したり、 n , d の正負の組み合わせに応じて答えの正負を調整する必要があります。
n , d のうち、1 つが負である場合は答え全体が負になり、それ以外の場合は正になります。

map(int, [a,b,c,d]) では、文字列型として受け取った a,b,c,d を、map() 関数を用いて、まとめて整数(int)型に変換しています。
約分するときに、分子と分母を / 演算子で割らないように注意しましょう。（/ 演算子で割った値は、整数型ではなく浮動小数点数型となります。）
'''

final 意地悪すごろく

<RSA暗号の基本原理>
step1 合同式
step2 modの演算
step3 modの逆元
step4 高速な累乗の計算
final RSA暗号の基本原理

<RSA暗号の作成(文字列)>
step1 RSA暗号の解読(1文字)
step2 RSA暗号の解読(文字列)
final RSA暗号の作成(1文字)

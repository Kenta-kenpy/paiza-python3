<正則表現のエントリーポイント>
# 正則表現のエントリーポイント D
# utf-8
a = input()
b = input()

ans = a + ";" + b
print(ans)
'''
改行で区切られた 2 つの単語の入力を受け取ります。
受け取った 2 つの単語を 単語 1、単語 2 とすると、
単語 1 と ; と 単語 2 をこの順で連結させます。
'''

<性能解析タイプセーフ>
# 性能解析タイプセーフ C
# utf-8
v = input().split()
N = int(v[0])
K = float(v[1])

total = 0
for _ in range(N):
    x = float(input())
    total += round(x * 10)

ans = int(total / round(K * 10))
if total % round(K * 10) != 0:
    ans += 1
print(ans)
'''
 解答の流れ・考え方 】
途中で 10 倍したり、直感的でない式が出てきたりしますが、後ほど説明します。
まず、N と K を受け取ります。
i=1 から i=N までの round(x_i*10) の合計値を求めます。round() は引数の数値を丸める関数だと考えてください。
解は次の式で求められる整数部分です。
(合計 + round(K*10)-1) / round(K*10)
整数部分を出力することに注意してください。
【 10 倍する理由 】
コンピュータ内部では小数を完全に表現することができません。
そのため、小数演算を繰り返すことで、誤差が発生することが多々あります。
そこで、今回入力される小数の条件は小数点以下 1 桁の小数だということに注目して、小数を 10 倍することで、小数演算を回避します。
【 丸める理由 】
先述の通り、コンピュータ内部では小数を完全に表現することができません。
そのため、単に 10 倍するだけでは、誤差が残ることがあります。
そこで、丸めをおこない、その誤差に対応した整数を生成します。
【 解を求める式について 】
合計 / round(K*10) の整数部分を出力すると不正解になることがあります。
この節では、問題点と解決策について説明します。
【 ここで使う記号について 】
X: 整数の被除数(割られる数)
Y: 整数の除数(割る数)
A: X / Y の整数部分
C: X / Y の余り
【 問題点 】
これは、合計 / round(K*10) の小数部分を無視していることに起因します (式の答えが 1.1 のとき、経験値は 2 必要)
【 解決策 】
小数点以下を切り上げることができれば解決できます。
方法を以下にいくつか示します。
if 文を使う
ceiling 関数を使う
X に Y - 1 を足す
3. で小数点以下の切り上げが実現できる理由を以下で説明します。
まず、Y = 3 のとき、表にすると以下のようになります。
X	2	3	4	5	6
X / Y の整数部	0	1	1	1	2
X + Y-1	4	5	6	7	8
(X + Y-1) / Y の整数部	1	1	2	2	2
この表から切り上げが成功しているように見えますが、以下で少し数学的に確認します。
いま、以下の式が成立しています。
X = A * Y + C
両辺に Y - 1 を足します。
X + Y - 1 = A * Y + C + Y - 1
この式は C の値によって以下のように整理できます。(以下の式に出てくる D は式を整理したあとにでてくる新たな余りを意味します)
C = 0 のとき: X + Y - 1 = A * Y + D
C ≠ 0 のとき: X + Y - 1 = (A + 1) * Y + D
(C ≠ 0 のとき、1 ≦ C ≦ Y-1 であるから、Y ≦ C + Y - 1 ≦ 2(Y - 1) であり、C + Y - 1 は Y でくくることができる)
上記の D を余りとした式を Y で割ったときの商は、
C = 0 のとき: A
C ≠ 0 のとき: A + 1
となるので、小数点以下の切り上げができることが確認できました。
'''

<例外処理のタブーサーチ>
step1 整数値の差 D
# utf-8
a, b = map(int, input().split())
print(b - a)

step2 数列の差 D
step3 整数値の検索 C
step4 数列の検索 C
final 例外処理のタブーサーチ B
<進化戦略のプロシージャ>
step1 ダンジョンのデッドロック1 C
step2 ダンジョンのデッドロック2 C
step3 ダンジョンのデッドロック3 B
step4 ダンジョンのデッドロック4 B
step5 ダンジョンのデッドロック5 A
final 進化戦略のプロシージャ A
<ネット・ガーディアンの奮闘>
step1 最大連結成分(4×4) A
step2 塊を作ろう A
step3 セルとセルを繋ごう A
step4 塊と塊を繋ごう A
step5 ネット・ガーディアンの奮闘(易) A
final ネット・ガーディアンの奮闘 A

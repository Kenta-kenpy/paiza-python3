<5以上の整数の合計>
step1　インクリメント
# utf-8
num = int(input())
print(num + 1)
'''
入力を受け取って変数 n に代入します。
n に 1 を加算して出力します。
'''

step2　複数行の入力と出力
# utf-8
num = int(input())

for i in range(num):
    print(input())
'''
入力を受け取って変数 n に代入します。
for 文などを用い、n 回入力を受け取ります。
受け取った入力は、そのまま出力します。
'''

step3　配列（リスト）要素の合計
# utf-8
array = [1, 3, 5, 6, 3, 2, 5, 23, 2]
result = 0

for i in array:
    result += i

print(result)
'''
問題にある通り、配列 (リスト) を定義します。
for 文や foreach 文を使って各要素の値を足し合わせる、配列の総和を求める関数を使う、などの方法で総和を求めます。
'''

step4　5以上か4以下か
# utf-8
if int(input()) >= 5:
    print("high")
else:
    print("low")
'''
入力された n の値によって条件分岐します。
'''

step5　配列（リスト）データの足し合わせ
# utf-8
array = [4, 0, 5, -1, 3, 10, 6, -8]
result = 0

for i in array:
    if i >= 5:
        result += i

print(result)
'''
問題にある通り、配列 (リスト) を定義します。配列の総和を求めるコードと条件分岐を行うコードを組み合わせます。
'''

final　5以上の整数の合計
# utf-8
result = 0
num = int(input())

for i in range(num):
    tmp = int(input())

    if tmp >= 5:
        result += tmp

print(result)
'''
5 以上の数値の和を記録する変数を ans とおき、0 で初期化します。
1 行目の入力を変数 n に代入し、n 回のループを回します。
ループ内部で a_i を受け取り、5 以上であるかどうかを調べます。5 以上であれば ans に加算します。
最終的な ans が求める答えなので、ans を出力します。
'''

<足すか掛けるか>
step1　インクリメント
# utf-8
num = int(input())
print(num + 1)
'''
入力を受け取って変数 n に代入します。
n に 1 を加算して出力します。
'''

step2　文字列の出力
# utf-8
num = int(input())

for i in range(num):
    print(input())
'''
入力を受け取って変数 n に代入します。
for 文などを用い、n 回入力を受け取ります。
入力を受け取ったら、そのまま出力します。
'''

step3　文字列の分割
# utf-8
std_in = input()

for string in std_in.split():
    print(string)
'''
1 行の入力をスペースで分割するために、文字列を文字列によって分割する関数を用います。
'''

step4　整数の足し算
# utf-8
std_in = input()
result = 0

for num in std_in.split():
    result += int(num)

print(result)
'''
分割した双方を、足し合わせた結果を出力します。
'''

final　足すか掛けるか
# utf-8
time = int(input())
result = 0

for i in range(time):
    std_in = input()
    array = std_in.split()

    if array[0] == array[1]:
        result += int(array[0]) * int(array[1])
    else:
        result += int(array[0]) + int(array[1])

print(result)
'''
解答を記録する変数として、ans を置きます。
n 組の整数 a, b について、a と b が等しければその積を、そうでなければその和を求め、ans に加算します。
n 組すべてに上記の処理を行い、最終的な ans を出力します。
'''

<文字列を切り取る>
step1　文字列の分割
# utf-8
std_in = input()

for string in std_in.split():
    print(string)
'''
1 行の入力をスペースで分割するために、文字列を文字列によって分割する関数を用います。
'''

step2　整数の足し算
# utf-8
std_in = input()
result = 0

for num in std_in.split():
    result += int(num)

print(result)
'''
入力を2つに分割するところは、前問と同じです。
分割した双方を、足し合わせた結果を出力します。
'''

step3　文字列の長さ
# utf-8
print(len(input()))
'''
文字列の長さを求めるには、各言語に用意されている関数やメソッドを用います。
'''

step4　文字列の1文字目
# utf-8
string = input()
print(string[0])
'''
文字列の1文字目を取得するには、各言語に用意されている関数かメソッドを用いる、文字列を配列として扱い 0 番目の要素を取得する、などの方法があります。
'''

step5　あいだの整数
# utf-8
nums = input().split()

for i in range(int(nums[0]), int(nums[1]) + 1):
    print(i)
'''
入力を半角スペースで分割し、変数 a と b に格納します。
a から b までの for ループを記述し、その間の数字を出力します。
'''

final　文字列を切り取る
# utf-8
nums = input().split()
string = input()

print(string[int(nums[0]) - 1 : int(nums[1])])
'''
1 行目の入力は半角スペースで分割し、変数 a と b に格納します。
s の a 文字目から b 文字目を切り出します。ほとんどの言語で、最初の文字は 0 文字目と数えるので、(a - 1) 文字目から (b - 1) 文字目を切り出すように記述するのがポイントです。
'''

<指定範囲だけ大文字>
step1　文字列の分類
# utf-8
std_in = input()

for string in std_in.split():
    print(string)
'''
1 行の入力をスペースで分割するために、文字列を文字列によって分割する関数を用います。
'''

step2　整数の足し算
# utf-8
std_in = input()
result = 0

for num in std_in.split():
    result += int(num)

print(result)
'''
入力を2つに分割するところは、前問と同じです。
分割した双方を、足し合わせた結果を出力します。
'''

step3　文字列の長さ
# utf-8
print(len(input()))
'''
文字列の長さを求めるには、各言語に用意されている関数やメソッドを用います。
'''

step4　文字列の1文字目
# utf-8
string = input()
print(string[0])
'''
文字列の 1 文字目を取得するには、各言語に用意されている関数かメソッドを用いる、文字列を配列として扱い 0 番目の要素を取得する、などの方法があります。
'''

step5　大文字にする
# utf-8
lower = input()
print(lower.upper())
'''
小文字を大文字に変換するには、小文字の文字コードから 32 を引く、各言語に用意されている関数やメソッドを使う、などの方法があります。
具体的に確認すると、a の文字コードは 97 、A の文字コードは 65 です。小文字の文字コードの方が 32 大きいので、大文字に変換するには 32 を引けば良いです。
'''

step6　あいだの整数
# utf-8
nums = input().split()

for i in range(int(nums[0]), int(nums[1]) + 1):
    print(i)
'''
入力を半角スペースで分割し、変数 a と b に格納します。
a から b までの for ループを記述し、その間の数字を出力します。
'''

final　指定範囲だけ大文字
# utf-8
nums = input().split()
string = input()

print(string[0 : int(nums[0]) - 1], end="")
print(string[int(nums[0]) - 1 : int(nums[1])].upper(), end="")
print(string[int(nums[1]) :])
'''
s を 1 文字ずつ出力するように考えます。各文字が a 文字目から b 文字目の中に含まれており、かつその文字が小文字の場合、大文字に変換して出力します。
各言語に用意されている関数やメソッドを用いて小文字から大文字に変換する場合は、文字列のうち、大文字に変換すべき部分とそうでない部分をあらかじめ切り出し、別々の変数に格納しておくと、処理が複雑にならずに実装できます。
'''

<文字の重複カウント>
step1　文字列の長さ
# utf-8
print(len(input()))
'''
文字列の長さを求めるには、各言語に用意されている関数やメソッドを用います。
'''

step2　文字列の1文字目
# utf-8
string = input()
print(string[0])
'''
文字列の 1 文字目を取得するには、各言語に用意されている関数かメソッドを用いる、文字列を配列として扱い 0 番目の要素を取得する、などの方法があります。
'''

step3　配列（リスト）の要素の出力
# utf-8
cities = ["Nara", "Shiga", "Hokkaido", "Chiba"]

for city in cities:
    print(city)

step4　1文字ずつ出力
# utf-8
string = input()

for char in string:
    print(char)
'''
文字列の文字数と同じ回数だけ回る for 文を記述し、カウント変数を使って 1 文字ずつ出力します。
'''

final　文字の重複カウント
pattern = input()
string = input()
result = 0

for i in range(len(string) - len(pattern) + 1):
    portion = string[i : i + len(pattern)]

    if portion == pattern:
        result += 1

print(result)
'''
解答を記録する変数 ans を 0 で初期化します。
文字列 s を 1 文字ずつ調べます。その文字が c と一致していれば ans を 1 増やします。
文字列 s を構成する全ての文字について調べ終わったら、ans を出力すれば OK です。
'''

<文字列の重複カウント>
step1　文字列の長さ
# utf-8
print(len(input()))
'''
文字列の長さを求めるには、各言語に用意されている関数やメソッドを用います。
'''

step2　文字列の1文字目
# utf-8
string = input()
print(string[0])
'''
文字列の 1 文字目を取得するには、各言語に用意されている関数かメソッドを用いる、文字列を配列として扱い 0 番目の要素を取得する、などの方法があります。
'''

step3　1文字ずつ出力
# utf-8
string = input()

for char in string:
    print(char)
'''
文字列の文字数と同じ回数だけ回る for 文を記述し、カウント変数を使って 1 文字ずつ出力します。
'''

step4　文字列の1、2文字目
# utf-8
string = input()
print(string[0] + " " + string[1])
'''
1 文字目を取得するのと同じ要領で 2 文字目も取得します。半角スペースで結んで出力すれば OK です。
'''

step5　文字列のn文字目とn+1文字目
# utf-8
n = int(input()) - 1
string = input()

if n + 1 < len(string):
    print(string[n] + " " + string[n + 1])

final　文字列の重複カウント
# utf-8
pattern = input()
string = input()
result = 0

for i in range(len(string) - len(pattern) + 1):
    portion = string[i : i + len(pattern)]

    if portion == pattern:
        result += 1

print(result)
'''
解答を格納する変数 ans を置き、0 で初期化します。
開始地点を先頭から順にずらしながら、t を s と同じ長さだけ切り取り、s と一致するかどうかを確認します。一致した場合は ans に 1 を加算します。
t の長さが len(t) 、s の長さが len(s) の時、t を s と同じ長さだけ切り取れるのは、切り取る範囲の先頭が 0 文字目から len(t) - len(s) 文字目の時のみであることに注意してください。
最終的な ans を出力すれば OK です。
'''

<文字と整数の組のソート>
step1　インクリメント
# utf-8
num = int(input())
print(num + 1)
'''
入力を受け取って変数 n に代入します。
n に 1 を加算して出力します。
'''

step2　数字のみの出力
# utf-8
num = int(input())

for i in range(num):
    print(input().split()[1])
'''
文字列を半角スペースで分割するには、各言語に組み込まれている文字列を文字列で分割する関数を使用します。
'''

step3　昇順ソート出力
# utf-8
input()  # 1つ目の入力は使わないので読み飛ばす
strings = input().split()
nums = []

for num in strings:
    nums.append(int(num))

nums.sort()

for i in nums:
    print(i)
'''
a_1, a_2, ..., a_n を 1 つの配列に格納し、ソート関数を用いてソートします。
'''

final　文字と整数の組のソート
# utf-8
num = int(input())
inputs = {}

for i in range(num):
    tmp = input().split()
    inputs[int(tmp[1])] = tmp[0]

inputs = sorted(inputs.items())

for i in inputs:
    print(i[1])
'''
整数をキー、文字を値に持つ連想配列 ds を作成します。
入力の 2 行目以降の各行では、s_i と d_i を受け取り、ds[d_i] に s_i を代入していきます。
連想配列をキーで昇順にソートするためには、各言語に用意されているソート関数を使用します。
'''

<文字と整数の組のソート2>
step1　インクリメント
# utf-8
num = int(input())
print(num + 1)
'''
入力を受け取って変数 n に代入します。
n に 1 を加算して出力します。
'''

step2　重複の判定
# utf-8
array = ["HND", "NRT", "KIX", "NGO", "NGO"]
duplicate = False

for i in range(len(array)):
    for j in range(len(array)):
        if i != j and array[i] == array[j]:
            duplicate = True

if duplicate:
    print("true")
else:
    print("false")
'''
問題で指示されている通りの配列を array に定義します。
全ての要素について、その要素ではないが同じ要素が配列に含まれているかを確認します。
含まれている場合は重複があるので true を出力します。含まれていない場合は false を出力します。
'''

step3　配列（リスト）の重複カウント
# utf-8
array = ["HND", "NRT", "KIX", "NGO", "NGO", "NGO", "NGO", "NGO"]
count = {}

for pattern in array:
    if pattern in count:
        count[pattern] += 1
    else:
        count[pattern] = 1

for (key, value) in count.items():
    if value != 1:
        print(value)
'''
問題に示されている配列を array に定義します。
キーが array の各要素、値がその出現回数になるような別の連想配列 count を作成します。
count の各要素について、値が 2 以上であるかを調べ、2 以上であればその値を出力します。
'''

step4　配列のソート
# utf-8
nums = [1, 3, 5, 6, 3, 2, 5, 23, 2]
nums.sort()

for i in nums:
    print(i)
'''
問題文の通り配列を宣言します。
ソート関数を使用して、配列を昇順にソートします。
ソートしたら、各要素を改行区切りで出力します。
'''

step5　数字のみの出力
# utf-8
num = int(input())

for i in range(num):
    print(input().split()[1])
'''
文字列を半角スペースで分割するには、各言語に組み込まれている文字列を文字列で分割する関数を使用します。
'''

step6　昇順ソート出力
# utf-8
input()  # 1つ目の入力は使わないので読み飛ばす
strings = input().split()
nums = []

for num in strings:
    nums.append(int(num))

nums.sort()

for i in nums:
    print(i)
'''
a_1, a_2, ..., a_n を 1 つの配列に格納し、各言語に用意されているソート関数を用いてソートします。
'''

final　文字と整数の組のソート2
# utf-8
num = int(input())
inputs = {}
result = {}

for i in range(num):
    tmp = input().split()

    exist = False
    for (key, value) in inputs.items():
        if key == tmp[0]:
            exist = True

    if exist:
        inputs[tmp[0]] = inputs[tmp[0]] + int(tmp[1])
    else:
        inputs[tmp[0]] = int(tmp[1])

# ソート用にkeyとvalueを反転させた辞書を作る
for (key, value) in inputs.items():
    result[value] = key

result = sorted(result.items(), reverse=True)

for i in result:
    print(i[1] + " " + str(i[0]))
'''
キーを文字、値を整数とする連想配列 array を定義します。
S_i, D_i を受け取ったら、array[S_i] に D_i を加算します。
各言語に組み込まれているソート関数を使い、連想配列を値で降順にソートし、順に出力すれば OK です。
'''

<アルファベット探し>
step1　文字列の出力
# utf-8
for i in range(3):
    print(input())
'''
入力が 3 行与えられるので、3 回標準入力から値を取得します。
'''

step2　アルファベットの範囲の文字の出力
# utf-8
string = input()
alphabets = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
]

first = string[0]
last = string[len(string) - 1]

flag = False
for alphabet in alphabets:
    if first == alphabet:
        flag = True

    if flag:
        print(alphabet)

    if last == alphabet:
        break
'''
先頭 1 文字と末尾 1 文字を取得し、それぞれを文字コードに変換します。文字コードへの変換には各言語に用意されている関数を使用します。
A の文字コードは 65 、B の文字コードは 66 、... 、Z の文字コードは 90 と順に並んでいることを利用して、for 文を用いて 1 文字ずつ出力します。先頭 1 文字と末尾 1 文字を取得し、それぞれを文字コードに変換します。文字コードへの変換には各言語に用意されている関数を使用します。
A の文字コードは 65 、B の文字コードは 66 、... 、Z の文字コードは 90 と順に並んでいることを利用して、for 文を用いて 1 文字ずつ出力します。
'''

step3　アルファベットの順番
# utf-8
string = input()
alphabets = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
]
result = "true"

first = string[0]
last = string[len(string) - 1]

for alphabet in alphabets:
    if first == alphabet:
        break

    if last == alphabet:
        result = "false"

print(result)
'''
文字の順序の大小は比較演算子を使って調べることができます。
'''

final　アルファベット探し
# utf-8
first = input()
last = input()
pattern = input()

alphabets = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
]
result = "false"

in_a_range = False
for alphabet in alphabets:
    if first == alphabet:
        in_a_range = True

    if in_a_range and pattern == alphabet:
        result = "true"

    if last == alphabet:
        break

print(result)
'''
STEP: 1 と同じ要領で、3 行で入力される X Y C を変数に格納します。
X から Y の範囲に C が含まれているかどうかは X <= C かつ C <= Y が true になるかどうかを確認することにより調べることができます。
'''

<五目並べ>
step1　文字列の出力
# utf-8
for i in range(5):
    print(input())
'''
入力が 5 行あるので、5 回標準入力より値を取得します。
'''

step2　五目並べ(1行)
step3　五目並べ(横)
step4　五目並べ(縦)
step5　五目並べ(斜め)
final　五目並べ
# utf-8
board = []

for i in range(5):
    board.append(input())


def row():
    result = "D"

    for line in board:
        pivot = line[0]
        count = 0

        for stone in line:
            if stone != "." and stone == pivot:
                count += 1
            else:
                break

        if count == 5:
            result = pivot
            break

    return result


def column():
    result = "D"

    for i in range(5):
        pivot = ""
        count = 0

        for j in range(5):
            if pivot == "":
                pivot = board[j][i]

            stone = board[j][i]
            if stone != "." and stone == pivot:
                count += 1
            else:
                break

        if count == 5:
            result = pivot
            break

    return result


def oblique():
    result = "D"
    direction = [True, False]

    for reverse in direction:
        pivot = ""
        count = 0

        if reverse:
            j = 0
            j_diff = 1
        else:
            j = 4
            j_diff = -1

        for i in range(5):

            stone = board[i][j]

            if pivot == "":
                pivot = stone

            if stone != "." and stone == pivot:
                count += 1

            j = j + j_diff

        if count == 5:
            result = pivot
            break

    return result


row = row()
column = column()
oblique = oblique()

if row != "D":
    print(row)
elif column != "D":
    print(column)
elif oblique != "D":
    print(oblique)
else:
    print("D")
'''
横・縦・斜めのそれぞれについて揃っているかどうかを調べます。
'''

<占い>
step1　連想配列（辞書）を使う
step2　ユーザーの血液型のデータ処理
step3　1人の血液型
step4　1つの血液型を占う
step5　1人の占い結果
final　占い
# utf-8
n = int(input())
users = {}
for i in range(n):
    tmp = input().split()

    users[tmp[0]] = tmp[1]

m = int(input())
fortunes = {}
for i in range(m):
    tmp = input().split()

    fortunes[tmp[0]] = tmp[1]

for user, user_blood in users.items():
    for blood, fortune in fortunes.items():
        if user_blood == blood:
            print(user + " " + fortune)
            break
'''
ユーザー名と血液型を対応させる連想配列 userToBlood と、血液型と占い型を対応させる連想配列 bloodToFortune の 2 つを作成します。
各言語に組み込まれている連想配列 (辞書) が、挿入順を記憶せず、挿入した順に値を参照することができない言語を利用して解く場合は、
ユーザーが入力で与えられる順序を他の配列によって記憶するなどの工夫が必要です。
'''



<5以上の整数の合計>
step1　インクリメント
# utf-8
num = int(input())
print(num + 1)
'''
入力を受け取って変数 n に代入します。
n に 1 を加算して出力します。
'''

step2　複数行の入力と出力
# utf-8
num = int(input())

for i in range(num):
    print(input())
'''
入力を受け取って変数 n に代入します。
for 文などを用い、n 回入力を受け取ります。
受け取った入力は、そのまま出力します。
'''

step3　配列（リスト）要素の合計
# utf-8
array = [1, 3, 5, 6, 3, 2, 5, 23, 2]
result = 0

for i in array:
    result += i

print(result)
'''
問題にある通り、配列 (リスト) を定義します。
for 文や foreach 文を使って各要素の値を足し合わせる、配列の総和を求める関数を使う、などの方法で総和を求めます。
'''

step4　5以上か4以下か
# utf-8
if int(input()) >= 5:
    print("high")
else:
    print("low")
'''
入力された n の値によって条件分岐します。
'''

step5　配列（リスト）データの足し合わせ
# utf-8
array = [4, 0, 5, -1, 3, 10, 6, -8]
result = 0

for i in array:
    if i >= 5:
        result += i

print(result)
'''
問題にある通り、配列 (リスト) を定義します。配列の総和を求めるコードと条件分岐を行うコードを組み合わせます。
'''

final　5以上の整数の合計
# utf-8
result = 0
num = int(input())

for i in range(num):
    tmp = int(input())

    if tmp >= 5:
        result += tmp

print(result)
'''
5 以上の数値の和を記録する変数を ans とおき、0 で初期化します。
1 行目の入力を変数 n に代入し、n 回のループを回します。
ループ内部で a_i を受け取り、5 以上であるかどうかを調べます。5 以上であれば ans に加算します。
最終的な ans が求める答えなので、ans を出力します。
'''

<足すか掛けるか>
step1　インクリメント
# utf-8
num = int(input())
print(num + 1)
'''
入力を受け取って変数 n に代入します。
n に 1 を加算して出力します。
'''

step2　文字列の出力
# utf-8
num = int(input())

for i in range(num):
    print(input())
'''
入力を受け取って変数 n に代入します。
for 文などを用い、n 回入力を受け取ります。
入力を受け取ったら、そのまま出力します。
'''

step3　文字列の分割
# utf-8
std_in = input()

for string in std_in.split():
    print(string)
'''
1 行の入力をスペースで分割するために、文字列を文字列によって分割する関数を用います。
'''

step4　整数の足し算
# utf-8
std_in = input()
result = 0

for num in std_in.split():
    result += int(num)

print(result)
'''
分割した双方を、足し合わせた結果を出力します。
'''

final　足すか掛けるか
# utf-8
time = int(input())
result = 0

for i in range(time):
    std_in = input()
    array = std_in.split()

    if array[0] == array[1]:
        result += int(array[0]) * int(array[1])
    else:
        result += int(array[0]) + int(array[1])

print(result)
'''
解答を記録する変数として、ans を置きます。
n 組の整数 a, b について、a と b が等しければその積を、そうでなければその和を求め、ans に加算します。
n 組すべてに上記の処理を行い、最終的な ans を出力します。
'''

<文字列を切り取る>
step1　文字列の分割
# utf-8
std_in = input()

for string in std_in.split():
    print(string)
'''
1 行の入力をスペースで分割するために、文字列を文字列によって分割する関数を用います。
'''

step2　整数の足し算
# utf-8
std_in = input()
result = 0

for num in std_in.split():
    result += int(num)

print(result)
'''
入力を2つに分割するところは、前問と同じです。
分割した双方を、足し合わせた結果を出力します。
'''

step3　文字列の長さ
# utf-8
print(len(input()))
'''
文字列の長さを求めるには、各言語に用意されている関数やメソッドを用います。
'''

step4　文字列の1文字目
# utf-8
string = input()
print(string[0])
'''
文字列の1文字目を取得するには、各言語に用意されている関数かメソッドを用いる、文字列を配列として扱い 0 番目の要素を取得する、などの方法があります。
'''

step5　あいだの整数
# utf-8
nums = input().split()

for i in range(int(nums[0]), int(nums[1]) + 1):
    print(i)
'''
入力を半角スペースで分割し、変数 a と b に格納します。
a から b までの for ループを記述し、その間の数字を出力します。
'''

final　文字列を切り取る
# utf-8
nums = input().split()
string = input()

print(string[int(nums[0]) - 1 : int(nums[1])])
'''
1 行目の入力は半角スペースで分割し、変数 a と b に格納します。
s の a 文字目から b 文字目を切り出します。ほとんどの言語で、最初の文字は 0 文字目と数えるので、(a - 1) 文字目から (b - 1) 文字目を切り出すように記述するのがポイントです。
'''

<指定範囲だけ大文字>
step1　文字列の分類
# utf-8
std_in = input()

for string in std_in.split():
    print(string)
'''
1 行の入力をスペースで分割するために、文字列を文字列によって分割する関数を用います。
'''

step2　整数の足し算
# utf-8
std_in = input()
result = 0

for num in std_in.split():
    result += int(num)

print(result)
'''
入力を2つに分割するところは、前問と同じです。
分割した双方を、足し合わせた結果を出力します。
'''

step3　文字列の長さ
# utf-8
print(len(input()))
'''
文字列の長さを求めるには、各言語に用意されている関数やメソッドを用います。
'''

step4　文字列の1文字目
# utf-8
string = input()
print(string[0])
'''
文字列の 1 文字目を取得するには、各言語に用意されている関数かメソッドを用いる、文字列を配列として扱い 0 番目の要素を取得する、などの方法があります。
'''

step5　大文字にする
# utf-8
lower = input()
print(lower.upper())
'''
小文字を大文字に変換するには、小文字の文字コードから 32 を引く、各言語に用意されている関数やメソッドを使う、などの方法があります。
具体的に確認すると、a の文字コードは 97 、A の文字コードは 65 です。小文字の文字コードの方が 32 大きいので、大文字に変換するには 32 を引けば良いです。
'''

step6　あいだの整数
# utf-8
nums = input().split()

for i in range(int(nums[0]), int(nums[1]) + 1):
    print(i)
'''
入力を半角スペースで分割し、変数 a と b に格納します。
a から b までの for ループを記述し、その間の数字を出力します。
'''

final　指定範囲だけ大文字
# utf-8
nums = input().split()
string = input()

print(string[0 : int(nums[0]) - 1], end="")
print(string[int(nums[0]) - 1 : int(nums[1])].upper(), end="")
print(string[int(nums[1]) :])
'''
s を 1 文字ずつ出力するように考えます。各文字が a 文字目から b 文字目の中に含まれており、かつその文字が小文字の場合、大文字に変換して出力します。
各言語に用意されている関数やメソッドを用いて小文字から大文字に変換する場合は、文字列のうち、大文字に変換すべき部分とそうでない部分をあらかじめ切り出し、別々の変数に格納しておくと、処理が複雑にならずに実装できます。
'''

<文字の重複カウント>
step1　文字列の長さ
# utf-8
print(len(input()))
'''
文字列の長さを求めるには、各言語に用意されている関数やメソッドを用います。
'''

step2　文字列の1文字目
# utf-8
string = input()
print(string[0])
'''
文字列の 1 文字目を取得するには、各言語に用意されている関数かメソッドを用いる、文字列を配列として扱い 0 番目の要素を取得する、などの方法があります。
'''

step3　配列（リスト）の要素の出力
step4　1文字ずつ出力
final　文字の重複カウント

<文字列の重複カウント>
step1　文字列の長さ
step2　文字列の1文字目
step3　1文字ずつ出力
step4　文字列の1、2文字目
step5　文字列のn文字目とn+1文字目
final　文字列の重複カウント

<文字と整数の組のソート>
step1　インクリメント
step2　数字のみの出力
step3　昇順ソート出力
final　文字と整数の組のソート

<文字と整数の組のソート2>
step1　インクリメント
step2　重複の判定
step3　配列（リスト）の重複カウント
step4　配列のソート
step5　数字のみの出力
step6　昇順ソート出力
final　文字と整数の組のソート2

<アルファベット探し>
step1　文字列の出力
step2　アルファベットの範囲の文字の出力
step3　アルファベットの順番
final　アルファベット探し

<五目並べ>
step1　文字列の出力
step2　五目並べ(1行)
step3　五目並べ(横)
step4　五目並べ(縦)
step5　五目並べ(斜め)
final　五目並べ

<占い>
step1　連想配列（辞書）を使う
step2　ユーザーの血液型のデータ処理
step3　1人の血液型
step4　1つの血液型を占う
step5　1人の占い結果
final　占い




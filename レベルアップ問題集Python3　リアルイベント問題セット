# ハノイの塔 A
# utf-8
import sys

def print_tower():
    for one in towers:
        if len(one) == 0:
            print("-")
            continue
        print(" ".join(map(str, one)))

def hanoi(n, frm, to, tmp, t):
    global count

    if n == 1:
        towers[to].append(towers[frm][-1])
        del towers[frm][-1]

        count += 1
        if count == t:
            print_tower()
            sys.exit(0)

    else:
        hanoi(n - 1, frm, tmp, to, t)
        hanoi(1, frm, to, tmp, t)
        hanoi(n - 1, tmp, to, frm, t)

n, t = map(int, input().split())
count = 0
towers = [[n - i for i in range(n)], [], []]
hanoi(n, 0, 2, 1, t)
'''
関数の中で自身を呼び出す再帰関数と呼ばれるものを用います。
n 個の円盤を A から C に移すときの操作を次のように考えます。
上から n-1 個の円盤を B に避ける。
n 個目の円盤を C に移す。
B に避けていた n-1 個の円盤を C に移す。
n = 1 のときは A から C に円盤を一つ移すだけです。

3 つの塔を 2 次元リスト、 towers にまとめています。
一つ一つの塔はリストになっています。
A, B, C のそれぞれがインデックス 0, 1, 2 に対応し、最も下の円盤がリストの 0 番目の要素になっていると考えます。このとき、初期状態は towers[0] に n, n-1, ..., 1 の n 個の整数が格納されている状態になります。
この塔の表現において、A から B へ 1 枚円盤を移す操作は、A の配列の末尾の要素を削除し、B の配列の末尾に追加する操作になります。
hanoi メソッドは方針の通り実装します。
hanoi メソッドのそれぞれの引数の意味を少し説明します。
n : 操作対象の円盤の総数
frm : どの塔の円盤を移動するかのインデックス
to : どこの塔に円盤を移動させたいかのインデックス
tmp : to の塔に円盤を動かすために一時的に円盤を退避させる塔のインデックス
t : 何回の操作で終了させるかの整数
'''

# 山折り谷折り A
# utf-8
'''
N 回折ったときの折り目は N-1 回折ったときの折り目から簡単に求めることができます。
1 回折ったときの折り目は "0"、2 回折ったときの折り目は "0" + "0" + "1" = "001"、3 回折ったときの折り目は "001" + "0" + "011" = "0010011" です。
N-1 回折ったときの折り目の文字列を S、S を逆順にし、0 と 1 を反転させた文字列を S' とすると、N 回折ったときの折り目の文字列は S + "0" + S' となります。

N 回折ったときの折り目の数 2N-1 個の要素を持つ配列を用意します。
方針の通りに 1 回折ったときの折り目から順に N 回折ったときの折り目までを順に求めます。
'''
N = int(input())

size = 2 ** N - 1
paper = [False] * size

count = 0
while True:
    for i in range(count):
        paper[count * 2 - i] = not paper[i]

    paper[count] = False
    count = count * 2 + 1

    N -= 1
    if N == 0:
        break

for i in range(0, size):
    print(1 if paper[i] else 0, end="")

print()

# 本の整理 A
# utf-8
'''
右側の最も小さな ID の本の位置を毎回探すと実行時間制限を越えてしまいます。
ID が 1 から N まで重複なしに使われているので、各 ID の本が本棚のどの位置にあるかを保持する配列を用いることで、最小 ID の本の位置を毎回探索する必要がなくなります。
'''
N = int(input())
shelf = [int(x)-1 for x in input().split()]

pos = [-1] * N
for i in range(N):
    pos[shelf[i]] = i

ans = 0
for i in range(N):
    if shelf[i] == i:
        continue

    ans += 1
    shelf[pos[i]] = shelf[i]
    pos[shelf[i]] = pos[i]

print(ans)
'''
リスト shelf に入力値を格納する際に、プログラム内で扱いやすいように 本のID を -1 しています。(ここで -1 することで、コード内で i+1 と表現する必要がなくなりますが、以下では分かりやすさの観点から、i+1 として説明します。)
リスト shelf は shelf[i] が「左端から i+1 番目の本の ID はなにか」の情報を保持しています。
リスト pos は pos[i] が「 ID が i+1 の本が現在左端から何番目にあるか」の情報を保持するように用意します。
本の移動のコードを少し説明します。
【 shelf[pos[i]] = shelf[i] 】
pos[i] : ID が i+1 の本の場所
shelf[i] : 左端から i+1 番目の本の ID
つまり、ID が i+1 の本が置かれていた場所に左端から i+1 番目の本を置く
【 pos[shelf[i]] = pos[i] 】
shelf[i] : 左端から i+1 番目の本の ID
pos[i] : ID が i+1 の本の場所
つまり、左端から i+1 番目にある本を、ID が i+1 の本が置かれている場所に移動する
この 2 行のコードから左端から i+1 番目の本が ID が i+1 の本があった場所に移されているのがわかります。
'''

# 雪だるま作り A
# utf-8
N, K = map(int, input().split())
heights = [int(x) for x in input().split()]

heights.sort()
ans = 0
head, tail = N - 1, 0
while tail < head:
    if heights[head] + heights[tail] >= K:
        ans += 1
        head -= 1
        tail += 1
    else:
        tail += 1

print(ans)
'''
雪玉を大きさでソートし、そこから貪欲にペアを決めます。
土台の雪玉を大きい順に選び、その土台に対し、未だに使われていなくてかつ条件を満たす最小の雪玉を頭部として選びます。
このとき作成されるペア数が最大ペア数です。
sort 関数を使って雪玉を高さが昇順になるように並べ替えます。

【 雪玉の選び方 】
tail を 0 と、head を N-1 として初期化して用意します。
tail ≦ x ≦ head の範囲で最小の雪玉と最大の雪玉のペアが最大の雪玉の高さを最もよく活かせるペアです。そして、ソート済みのリスト内ではそのペアは tail と head です。
従って、tail は head に向かって、head は tail に向かって値を更新させていきます。終了条件は tail と head が衝突したときです。
tail と head のペアで 「K 以上」を達成できないときがあります。このときは tail が指す雪玉が小さすぎるので、tail を 1 つ進めます。
'''

# 最小の運賃 A
# utf-8
'''
ダイクストラ法と呼ばれるアルゴリズムを用います。
'''
from queue import PriorityQueue


class State:
    def __init__(self, this, cost):
        self.this = this
        self.cost = cost

    def __lt__(self, another):
        return self.cost < another.cost


E, V, T = map(int, input().split())

g = [[-1] * V for _ in range(V)]
for _ in range(E):
    s, e, c = map(int, input().split())
    g[s][e] = c
    g[e][s] = c

initial_state = State(0, 0)
q = PriorityQueue()
q.put(initial_state)
closed = set()
while q:
    p = q.get()
    if p.this == T:
        break
    if p.this in closed:
        continue

    closed.add(p.this)

    for i, cost in enumerate(g[p.this]):
        if cost == -1:
            continue

        next_state = State(i, p.cost + cost)
        q.put(next_state)

print(p.cost)
'''
駅間の関係は隣接行列で保存しています。
ダイクストラ法を行うために queue クラスの PriorityQueue クラスをインポートして、これを用います。これは優先度付きキューと呼ばれるキューを実現するクラスです。
PriorityQueue オブジェクトにプッシュするオブジェクトとして State クラスを定義しています。
このクラスは __lt__ メソッドを実装することで、オブジェクト間の大小比較を行えるようにしています。
'''

# 文字列収集 S
# utf-8
def push(dic, key, val):
    if key in dic:
        dic[key] += val
        return

    dic[key] = val


N, M = map(int, input().split())
value = {}
for _ in range(N):
    s, p = input().split()

    prefix = s[0]
    push(value, prefix, int(p))
    for i in range(1, min(100, len(s))):
        prefix += s[i]
        push(value, prefix, int(p))

for _ in range(M):
    q = input()
    print(value[q] if q in value else 0)
'''
各クエリに対し、接頭辞が合致する文字列の価格の総和を計算すると、実行時間制限を越えてしまいます。
文字列から数値への連想配列を用意し、文字列 S と価格 P を受け取った時点で、S の先頭 1 文字から最大先頭 100 文字までの連想配列の要素に対して P の値を足します。
これにより、各クエリに対して連想配列の要素を見ることで答えを出すことができるようになります。
'''

# 十億連勝 S

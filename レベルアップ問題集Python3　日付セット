<閏年の判定>
# utf-8
n = int(input())

if n % 4 != 0:
    print("No")
elif n % 400 == 0:
    print("Yes")
elif n % 100 == 0:
    print("No")
else:
    print("Yes")
'''
閏年の条件を満たしているかどうか条件分岐で求めます。
西暦を受け取って閏年かどうかを真偽値で返す関数を作成すると後々の問題で利用しやすくなります。
'''

<西暦の和暦変換>
# utf-8
y, m, d = map(int, input().split())

if y < 1912:
    print(f"明治年{m}月{d}日")
elif y == 1912:
    if (m < 7) or (m == 7 and d < 30):
        print(f"明治年{m}月{d}日")
    else:
        print(f"大正年{m}月{d}日")
elif y < 1926:
    print(f"大正年{m}月{d}日")
elif y == 1926:
    if (m < 12) or (m == 12 and d < 25):
        print(f"大正年{m}月{d}日")
    else:
        print(f"昭和年{m}月{d}日")
elif y < 1989:
    print(f"昭和年{m}月{d}日")
elif y == 1989:
    if m == 1 and d < 8:
        print(f"昭和年{m}月{d}日")
    else:
        print(f"平成年{m}月{d}日")
elif y < 2019:
    print(f"平成年{m}月{d}日")
elif y == 2019:
    if m < 5:
        print(f"平成年{m}月{d}日")
    else:
        print(f"令和年{m}月{d}日")
else:
    print(f"令和年{m}月{d}日")
'''
年月日そのままでは比較が大変なので、年月日を数値に変換して比較します。
日付が遅いほど大きな値となるような変換を行うことで数値比較で日付の比較を行います。
年月日を数値に変換する関数を作成して変換を楽にします。
'''

<西暦の和暦変換2>
# utf-8
y, m, d = map(int, input().split())

if y < 1912:
    print(f"明治{y-1867}年{m}月{d}日")
elif y == 1912:
    if (m < 7) or (m == 7 and d < 30):
        print(f"明治{y-1867}年{m}月{d}日")
    else:
        print(f"大正元年{m}月{d}日")
elif y < 1926:
    print(f"大正{y-1911}年{m}月{d}日")
elif y == 1926:
    if (m < 12) or (m == 12 and d < 25):
        print(f"大正{y-1911}年{m}月{d}日")
    else:
        print(f"昭和元年{m}月{d}日")
elif y < 1989:
    print(f"昭和{y-1925}年{m}月{d}日")
elif y == 1989:
    if m == 1 and d < 8:
        print(f"昭和{y-1925}年{m}月{d}日")
    else:
        print(f"平成元年{m}月{d}日")
elif y < 2019:
    print(f"平成{y-1988}年{m}月{d}日")
elif y == 2019:
    if m < 5:
        print(f"平成{y-1988}年{m}月{d}日")
    else:
        print(f"令和元年{m}月{d}日")
else:
    print(f"令和{y-2018}年{m}月{d}日")
'''
前問 (西暦の和暦変換) のように日付の比較は数値への変換を通して行います。
分岐の中で和暦何年かを計算します。
和暦 1 年のときは元年と出力するようにします。
'''

<月の日数>
# utf-8
n, m = map(int, input().split())

data = [4, 6, 9, 11]

if m in data:
    print(30)
elif m == 2:
    flag = True

    if n % 4 != 0:
        flag = False
    elif n % 400 == 0:
        flag = True
    elif n % 100 == 0:
        flag = False
    else:
        flag = True

    if flag:
        print(29)
    else:
        print(28)
else:
    print(31)
'''
表示したい月が 2 月の場合、閏年かどうかを判定します。
高々 12 ヶ月しかないので、各月の日数を格納した配列を用意することでも十分対応できます。
'''

<次の日>
# utf-8
n, m, d = map(int, input().split())

data = [4, 6, 9, 11]

if m in data:
    if d == 30:
        m += 1
        d = 1
    else:
        d += 1
elif m == 2:
    flag = True

    if n % 4 != 0:
        flag = False
    elif n % 400 == 0:
        flag = True
    elif n % 100 == 0:
        flag = False
    else:
        flag = True

    if flag:
        if d == 29:
            m += 1
            d = 1
        else:
            d += 1
    else:
        if d == 28:
            m += 1
            d = 1
        else:
            d += 1
else:
    if d == 31:
        if m == 12:
            n += 1
            m = 1
            d = 1
        else:
            m += 1
            d = 1
    else:
        d += 1

print(n, m, d)
'''
年末か月末かで条件分岐

12 月 31 日の場合翌年の 1 月 1 日を出力します。
12 月以外の月末の場合、同年の翌月 1 日を出力します。
月末でない場合は同年同月の翌日を出力します。
各月の日数の取得は前問 (月の日数) の配列を用いる方針にすると簡潔になります。
'''

<曜日>
'''
1799 年 12 月 31 日から何日たったかを計算します。
各曜日 (日, 月, 火…) と数字 (0, 1, 2…) を対応させて曜日を扱います。
'''
# utf-8
y, m, d = map(int, input().split())

a = ["水", "木", "金", "土", "日", "月", "火"]
n = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

dy = y - 1800  # 差
uy = dy // 4 - dy // 100 + (dy - 200) // 400  # 閏年
s = dy * 365 + uy
s += sum(n[0 : m - 1])
flag = True

if y % 4 != 0:
    flag = False
elif y % 400 == 0:
    flag = True
elif y % 100 == 0:
    flag = False
else:
    flag = True

if flag:
    s -= 1

if m > 2 and flag:
    s += 1

s += d

print(f"{a[s%7]}曜日")

<曜日(large)>
# utf-8
y, m, d = map(int, input().split())

a = ["水", "木", "金", "土", "日", "月", "火"]
n = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

dy = y - 1800  # 差
uy = dy // 4 - dy // 100 + (dy - 200) // 400  # 閏年
s = dy * 365 + uy
s += sum(n[0 : m - 1])
flag = True

if y % 4 != 0:
    flag = False
elif y % 400 == 0:
    flag = True
elif y % 100 == 0:
    flag = False
else:
    flag = True

if flag:
    s -= 1

if m > 2 and flag:
    s += 1

s += d

print(f"{a[s%7]}曜日")
'''
参考：ツェラーの公式　https://ja.wikipedia.org/wiki/%E3%83%84%E3%82%A7%E3%83%A9%E3%83%BC%E3%81%AE%E5%85%AC%E5%BC%8F
'''
<曜日(large2)>
# utf-8
'''
前問 (曜日(large)) でツェラーの公式を用いずに解いた場合、前問 (曜日(large)) とまったく同じ方針で解くことができます。
'''
y, m, d = map(int, input().split())

a = ["木", "金", "土", "日", "月", "火", "水"]

uy = y // 4 - y // 100 + y // 400  # 閏年
s = y * 30 * 12 + uy
s += 30 * (m - 1)
flag = True

if y % 4 != 0:
    flag = False
elif y % 400 == 0:
    flag = True
elif y % 100 == 0:
    flag = False
else:
    flag = True

if flag:
    s -= 1

s += d

print(f"{a[s%7]}曜日")

<翌営業日 その1>
# utf-8
m, d, y = input().split()

m = int(m)
d = int(d)

data_30 = [4, 6, 9, 11]
data_y = ["SUN", "MON", "TUE", "WED", "THU"]

if y in data_y:
    if m in data_30:
        if d == 30:
            d = 1
            m += 1
        else:
            d += 1
    elif m == 2:
        if d == 28:
            d = 1
            m += 1
        else:
            d += 1
    else:
        if d == 31:
            d = 1
            if m == 12:
                m = 1
            else:
                m += 1
        else:
            d += 1
elif y == "SAT":
    if m in data_30:
        d += 2
        if d > 30:
            d %= 30
            m += 1
    elif m == 2:
        d += 2
        if d > 28:
            d %= 28
            m += 1
    else:
        d += 2
        if d > 31:
            d %= 31
            m += 1
            if m == 13:
                m = 1
else:
    if m in data_30:
        d += 3
        if d > 30:
            d %= 30
            m += 1
    elif m == 2:
        d += 3
        if d > 28:
            d %= 28
            m += 1
    else:
        d += 3
        if d > 31:
            d %= 31
            m += 1
            if m == 13:
                m = 1

print(f"{m}月{d}日")
'''
受け取った曜日を値に変換し、平日になるまで日付を進め続けます。
'''

<翌営業日 その2>
# utf-8
m, d, y = input().split()

data_30 = [4, 6, 9, 11]
data_y = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"]
data = [
    "2019/1/1",
    "2019/1/14",
    "2019/2/11",
    "2019/3/21",
    "2019/4/29",
    "2019/4/30",
    "2019/5/1",
    "2019/5/2",
    "2019/5/3",
    "2019/5/4",
    "2019/5/5",
    "2019/5/6",
    "2019/7/15",
    "2019/8/11",
    "2019/8/12",
    "2019/9/16",
    "2019/9/23",
    "2019/10/14",
    "2019/10/22",
    "2019/11/3",
    "2019/11/4",
    "2019/11/23",
]

idy = data_y.index(y)
m = int(m)
d = int(d)

while True: # 受け取った曜日を値に変換し、平日になるまで日付を進め続けます。
    if idy in range(0, 5):
        idy += 1

        if m in data_30:
            if d == 30:
                d = 1
                m += 1
            else:
                d += 1
        elif m == 2:
            if d == 28:
                d = 1
                m += 1
            else:
                d += 1
        else:
            if d == 31:
                d = 1

                if m == 12:
                    m = 1
                else:
                    m += 1
            else:
                d += 1
    elif idy == 6:
        idy += 2
        d += 2

        if m in data_30:
            if d > 30:
                d %= 30
                m += 1
        elif m == 2:
            if d > 28:
                d %= 28
                m += 1
        else:
            if d > 31:
                d %= 31
                m += 1

                if m == 13:
                    m = 1
    else:
        idy += 3
        d += 3

        if m in data_30:
            if d > 30:
                d %= 30
                m += 1
        elif m == 2:
            if d > 28:
                d %= 28
                m += 1
        else:
            if d > 31:
                d %= 31
                m += 1

    idy %= 7

    if not (idy == 0 or idy == 6) and not (f"2019/{m}/{d}" in data):
        break

print(f"{m}月{d}日")

<最長の連休2019>
# utf-8
youbi = ["火", "水", "木", "金", "土", "日", "月"]
donichi = ["土", "日"]
data = [
    "2019/1/1",
    "2019/1/14",
    "2019/2/11",
    "2019/3/21",
    "2019/4/29",
    "2019/4/30",
    "2019/5/1",
    "2019/5/2",
    "2019/5/3",
    "2019/5/4",
    "2019/5/5",
    "2019/5/6",
    "2019/7/15",
    "2019/8/11",
    "2019/8/12",
    "2019/9/16",
    "2019/9/23",
    "2019/10/14",
    "2019/10/22",
    "2019/11/3",
    "2019/11/4",
    "2019/11/23",
]
n = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

m = 1
d = 1
ans = 0
count = 0

for i in range(365):
    if youbi[i % 7] in donichi:
        count += 1
    elif f"2019/{m}/{d}" in data:
        count += 1
    else:
        ans = max(count, ans)
        count = 0

    if n[m - 1] == d:
        d = 1
        m += 1
    else:
        d += 1

print(ans)
'''
1 月 1 日から 12 月 31 日までループを回し、最長の連休を求めます。
'''

<最長の連休paiza>
# utf-8
n = int(input())
data = [input() for i in range(n)]

m = 1
d = 1
ans = 2
count = 0

youbi = ["火", "水", "木", "金", "土", "日", "月"]
donichi = ["土", "日"]
n = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

for i in range(365):
    if youbi[i % 7] in donichi:
        count += 1
    elif f"{m} {d}" in data:
        count += 1
    else:
        ans = max(count, ans)
        count = 0

    if n[m - 1] == d:
        d = 1
        m += 1
    else:
        d += 1

ans = max(count, ans)

print(ans)

<連休を伸ばす1>
# utf-8
n, l = map(int, input().split())
b = list(map(int, input().split()))

s = 0
one = 0
zero = 0
ans = 0

for i in range(n):
    if b[i] == 1:
        one += 1
    else:
        zero += 1
        while zero > l:
            if b[s] == 1:
                one -= 1
            else:
                zero -= 1

            s += 1

    if ans < one + zero:
        ans = one + zero

print(ans)
'''
各日から休めるだけ休んだ際に何連休となるかを計算し、最大何連休となるのかを計算します。
'''

<連休を伸ばす2>
# utf-8
n, l = map(int, input().split())
b = list(map(int, input().split()))

s = 0
one = 0
zero = 0
ans = 0

for i in range(n):
    if b[i] == 1:
        one += 1
    else:
        zero += 1
        while zero > l:
            if b[s] == 1:
                one -= 1
            else:
                zero -= 1

            s += 1

    if ans < one + zero:
        ans = one + zero

print(ans)
'''
前問と同じ方法で解くと計算時間がかかりすぎてしまうため、別のアルゴリズムを考える必要があります。
尺取法と呼ばれるアルゴリズムを用いて、計算時間を抑えることができます。
'''

<日付のフォーマット>
# utf-8
data0 = input().split("/")

flag = False
flag2 = False

if len(data0[0]) == 4:
    data0[0] = "YYYY"

    if (int(data0[1]) in range(1, 13)) and (int(data0[2]) in range(1, 13)):
        flag2 = True
    elif int(data0[1]) in range(1, 13) and int(data0[2]) in range(1, 32):
        data0[1] = "MM"
        data0[2] = "DD"
    elif int(data0[2]) in range(1, 13) and int(data0[1]) in range(1, 32):
        data0[2] = "MM"
        data0[1] = "DD"
    else:
        flag = True
elif len(data0[1]) == 4:
    data0[1] = "YYYY"

    if (int(data0[0]) in range(1, 13)) and (int(data0[2]) in range(1, 13)):
        flag2 = True
    elif int(data0[0]) in range(1, 13) and int(data0[2]) in range(1, 32):
        data0[0] = "MM"
        data0[2] = "DD"
    elif int(data0[2]) in range(1, 13) and int(data0[0]) in range(1, 32):
        data0[2] = "MM"
        data0[0] = "DD"
    else:
        flag = True
else:
    data0[2] = "YYYY"

    if (int(data0[1]) in range(1, 13)) and (int(data0[0]) in range(1, 13)):
        flag2 = True
    elif int(data0[1]) in range(1, 13) and int(data0[0]) in range(1, 32):
        data0[1] = "MM"
        data0[0] = "DD"
    elif int(data0[0]) in range(1, 13) and int(data0[1]) in range(1, 32):
        data0[0] = "MM"
        data0[1] = "DD"
    else:
        flag = True

if flag2:
    print("many answers")
elif flag:
    print("no answer")
else:
    print(f"{data0[0]}/{data0[1]}/{data0[2]}")
'''
文字列長が 4 なら YYYY に対応し、文字列長が 2 かつ 12 以下なら MM と DD のどちらに対応する可能性もあり、文字列長が 2 かつ 13 以上 31 以下なら DD に対応します。
YYYY に対応するものが 1 つ、DD に対応するものが 1 つ、MM と DD のどちらにも対応するものが 1 つ存在するとき、並び順は確定します。
YYYY に対応するものが 1 つでかつ MM と DD のどちらにも対応するものが 2 つ存在するとき、many answers です。
上記のどちらでもない場合は no answer です。
'''

<年月日の順序>
# utf-8
data0 = input().split("/")

flag = False
flag2 = False

if len(data0[0]) == 4:
    data0[0] = "YYYY"

    if (int(data0[1]) in range(1, 13)) and (int(data0[2]) in range(1, 13)):
        flag2 = True
    elif int(data0[1]) in range(1, 13) and int(data0[2]) in range(1, 32):
        data0[1] = "MM"
        data0[2] = "DD"
    elif int(data0[2]) in range(1, 13) and int(data0[1]) in range(1, 32):
        data0[2] = "MM"
        data0[1] = "DD"
    else:
        flag = True
elif len(data0[1]) == 4:
    data0[1] = "YYYY"

    if (int(data0[0]) in range(1, 13)) and (int(data0[2]) in range(1, 13)):
        flag2 = True
    elif int(data0[0]) in range(1, 13) and int(data0[2]) in range(1, 32):
        data0[0] = "MM"
        data0[2] = "DD"
    elif int(data0[2]) in range(1, 13) and int(data0[0]) in range(1, 32):
        data0[2] = "MM"
        data0[0] = "DD"
    else:
        flag = True
else:
    data0[2] = "YYYY"

    if (int(data0[1]) in range(1, 13)) and (int(data0[0]) in range(1, 13)):
        flag2 = True
    elif int(data0[1]) in range(1, 13) and int(data0[0]) in range(1, 32):
        data0[1] = "MM"
        data0[0] = "DD"
    elif int(data0[0]) in range(1, 13) and int(data0[1]) in range(1, 32):
        data0[0] = "MM"
        data0[1] = "DD"
    else:
        flag = True

if flag2:
    print("many answers")
elif flag:
    print("no answer")
else:
    print(f"{data0[0]}/{data0[1]}/{data0[2]}")
'''
文字列長が 4 なら YYYY に対応し、文字列長が 2 かつ 12 以下なら MM と DD のどちらに対応する可能性もあり、文字列長が 2 かつ 13 以上 31 以下なら DD に対応します。
YYYY に対応するものが 1 つ、DD に対応するものが 1 つ、MM と DD のどちらにも対応するものが 1 つ存在するとき、並び順は確定します。
YYYY に対応するものが 1 つでかつ MM と DD のどちらにも対応するものが 2 つ存在するとき、many answers です。
上記のどちらでもない場合は no answer です。
'''

<カレンダーの表示>
# utf-8
y, m = map(int, input().split())

n = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

data = list(range(1, n[m - 1] + 1))
dy = y - 1800
uy = dy // 4 - dy // 100 + (dy - 200) // 400
s = -3
s += dy * 365 + uy
s += sum(n[0 : m - 1])
flag = True

if y % 4 != 0:
    flag = False
elif y % 400 == 0:
    flag = True
elif y % 100 == 0:
    flag = False
else:
    flag = True

if flag:
    s -= 1

if m > 2 and flag:
    s += 1

if m == 2 and flag:
    data.append(29)

data = ["  "] * (s % 7) + data

for i in range(6 * 7):
    if i < 9 + (s % 7) and i > (s % 7) - 1:
        print(" ", end="")

    if i < len(data):
        print(data[i], end="")
    else:
        print("  ", end="")

    if i % 7 == 6:
        print("")
    elif i != 53:
        print(" ", end="")
'''
y 年 m 月 1 日の曜日を求めます。
その後、求められているフォーマットに従ってカレンダーを出力します。
'''

<13日の金曜日(2桁)>

<13日の金曜日(3桁)>
<13日の金曜日(4桁)>
<月末最後の営業日の曜日>
<令和を作る>
<令和を数える>

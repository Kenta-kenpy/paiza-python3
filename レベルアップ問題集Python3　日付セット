<閏年の判定>
# utf-8
n = int(input())

if n % 4 != 0:
    print("No")
elif n % 400 == 0:
    print("Yes")
elif n % 100 == 0:
    print("No")
else:
    print("Yes")
'''
閏年の条件を満たしているかどうか条件分岐で求めます。
西暦を受け取って閏年かどうかを真偽値で返す関数を作成すると後々の問題で利用しやすくなります。
'''

<西暦の和暦変換>
# utf-8
y, m, d = map(int, input().split())

if y < 1912:
    print(f"明治年{m}月{d}日")
elif y == 1912:
    if (m < 7) or (m == 7 and d < 30):
        print(f"明治年{m}月{d}日")
    else:
        print(f"大正年{m}月{d}日")
elif y < 1926:
    print(f"大正年{m}月{d}日")
elif y == 1926:
    if (m < 12) or (m == 12 and d < 25):
        print(f"大正年{m}月{d}日")
    else:
        print(f"昭和年{m}月{d}日")
elif y < 1989:
    print(f"昭和年{m}月{d}日")
elif y == 1989:
    if m == 1 and d < 8:
        print(f"昭和年{m}月{d}日")
    else:
        print(f"平成年{m}月{d}日")
elif y < 2019:
    print(f"平成年{m}月{d}日")
elif y == 2019:
    if m < 5:
        print(f"平成年{m}月{d}日")
    else:
        print(f"令和年{m}月{d}日")
else:
    print(f"令和年{m}月{d}日")
'''
年月日そのままでは比較が大変なので、年月日を数値に変換して比較します。
日付が遅いほど大きな値となるような変換を行うことで数値比較で日付の比較を行います。
年月日を数値に変換する関数を作成して変換を楽にします。
'''

<西暦の和暦変換2>
# utf-8
y, m, d = map(int, input().split())

if y < 1912:
    print(f"明治{y-1867}年{m}月{d}日")
elif y == 1912:
    if (m < 7) or (m == 7 and d < 30):
        print(f"明治{y-1867}年{m}月{d}日")
    else:
        print(f"大正元年{m}月{d}日")
elif y < 1926:
    print(f"大正{y-1911}年{m}月{d}日")
elif y == 1926:
    if (m < 12) or (m == 12 and d < 25):
        print(f"大正{y-1911}年{m}月{d}日")
    else:
        print(f"昭和元年{m}月{d}日")
elif y < 1989:
    print(f"昭和{y-1925}年{m}月{d}日")
elif y == 1989:
    if m == 1 and d < 8:
        print(f"昭和{y-1925}年{m}月{d}日")
    else:
        print(f"平成元年{m}月{d}日")
elif y < 2019:
    print(f"平成{y-1988}年{m}月{d}日")
elif y == 2019:
    if m < 5:
        print(f"平成{y-1988}年{m}月{d}日")
    else:
        print(f"令和元年{m}月{d}日")
else:
    print(f"令和{y-2018}年{m}月{d}日")
'''
前問 (西暦の和暦変換) のように日付の比較は数値への変換を通して行います。
分岐の中で和暦何年かを計算します。
和暦 1 年のときは元年と出力するようにします。
'''

<月の日数>
# utf-8
n, m = map(int, input().split())

data = [4, 6, 9, 11]

if m in data:
    print(30)
elif m == 2:
    flag = True

    if n % 4 != 0:
        flag = False
    elif n % 400 == 0:
        flag = True
    elif n % 100 == 0:
        flag = False
    else:
        flag = True

    if flag:
        print(29)
    else:
        print(28)
else:
    print(31)
'''
表示したい月が 2 月の場合、閏年かどうかを判定します。
高々 12 ヶ月しかないので、各月の日数を格納した配列を用意することでも十分対応できます。
'''

<次の日>
# utf-8
n, m, d = map(int, input().split())

data = [4, 6, 9, 11]

if m in data:
    if d == 30:
        m += 1
        d = 1
    else:
        d += 1
elif m == 2:
    flag = True

    if n % 4 != 0:
        flag = False
    elif n % 400 == 0:
        flag = True
    elif n % 100 == 0:
        flag = False
    else:
        flag = True

    if flag:
        if d == 29:
            m += 1
            d = 1
        else:
            d += 1
    else:
        if d == 28:
            m += 1
            d = 1
        else:
            d += 1
else:
    if d == 31:
        if m == 12:
            n += 1
            m = 1
            d = 1
        else:
            m += 1
            d = 1
    else:
        d += 1

print(n, m, d)
'''
年末か月末かで条件分岐

12 月 31 日の場合翌年の 1 月 1 日を出力します。
12 月以外の月末の場合、同年の翌月 1 日を出力します。
月末でない場合は同年同月の翌日を出力します。
各月の日数の取得は前問 (月の日数) の配列を用いる方針にすると簡潔になります。
'''

<曜日(large)>
<曜日(large2)>
<翌営業日 その1>
<翌営業日 その2>
<最長の連休2019>
<最長の連休paiza>
<連休を伸ばす1>
<連休を伸ばす2>
<日付のフォーマット>
<年月日の順序>
<カレンダーの表示>
<13日の金曜日(2桁)>
<13日の金曜日(3桁)>
<13日の金曜日(4桁)>
<月末最後の営業日の曜日>
<令和を作る>
<令和を数える>

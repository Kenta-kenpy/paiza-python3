# P共通テスト過去問題1　★
D# お釣り
# utf-8
s = int(input())
m = int(input())

if s > m:
    print("Tarimasen!")
else:
    print(m - s)
'''
まずは、整数型の変数を用意して入力を受け取りましょう。 変数の型や入力の受け取り方は言語ごとに異なるので、お使いの言語の仕様について調べてみましょう。
お金が足りているかの結果に応じて出力が変化するので、値を受け取ったら、「M が S 以上であるか」を判定しましょう。 
ある条件を満たすときのみ特定の処理をおこなうことを条件分岐といいます。 一般的に条件分岐を実装する場合は if 文などに代表される条件分岐文を利用します。
判定した結果、M の値が S 以上であるならば M - S の値を、そうでないならば文字列 "Tarimasen!" を出力しましょう。 
この出力する 2 つは、M - S の値は整数であり、"Tarimasen!" は文字列であるという型の違いがあります。
'''

C# rot-x
# utf-8
from collections import defaultdict

n = int(input())
s = input()
t = list(input())

alphabet = {chr(i + 97) for i in range(26)}
d = defaultdict(int)

for c1, c2 in zip(s, t):
    d[(ord(c2) - ord(c1)) % 26] += 1

if len(d) == 1:
    print(f'correct rot-{list(d.keys())[0]}')
elif len(d) == 2:

    wrong_num = min(list(d.values()))
    correct_rot = ''

    for k, v in d.items():
        if v == wrong_num: continue
        correct_rot = k
    if wrong_num != 1:
        print('incorrect')
    else:
        for i in range(n):
            for k, v in d.items():
                if (ord(t[i]) - ord(s[i])) % 26 == k and v == wrong_num:
                    t[i] = chr(ord("a") + (ord(s[i]) - ord("a") + correct_rot) % 26)
                    break
            else:
                continue
            break
        print(f"fixed {''.join(t)}")
else:
    print('incorrect')
'''
文字列 s, t の各文字について、それぞれ何文字右シフトされているかを求め、問題文の指示に従って答えを出力すればよいです。
全文字がそれぞれ何文字右シフトされているかを集計する際は、長さ 26 の整数型配列や連想配列などを用いるとよいです。
'''

B# リング型のトークンバッシング
# utf-8
n, k = map(int, input().split())

num = [0] * (n + 1)
for i in range(n):
    num[i + 1] = num[i] + int(input())

d = [int(input()) for _ in range(k)]

# スタート位置は0
t = 0
ans = 0
for i in d:
    # 同じなら一周
    if t == i - 1:
        ans += num[-1]
    # 配列のはじめに戻らないとき
    elif t < i - 1:
        ans += num[i - 1] - num[t]
    # 配列のはじめに戻るとき
    else:
        ans += num[-1] + num[i - 1] - num[t]

    t = i - 1

print(ans)
'''
複雑な問題を考えるときは小さい入力から考察を始めると良いです。 小さい入力例を考えることで、計算の流れをつかみ、どのような時に計算量が増えそうかを考えることが大切です。
トークンの流れに沿って、通信路を通るのにかかった時間を足していくことで答えを求めた場合、最悪の場合、1 回のトークンの要求につき N 回足し算が行われることになるので、計算回数が最大で N×K 回となってしまいます。
制約より、この数は最大で 10^10 となってしまい、これでは実行時間制限に間に合う目安である 10^8 を超えてしまいます。 そこで、効率のいいトークンの移動時間の求め方を考えましょう。
トークンの要求回数は減らすことができないので、トークンの要求 1 回あたりの計算量を減らす工夫を考えてみましょう。
トークンの移動 1 回あたりの計算時間を短くするために累積和というアルゴリズムを利用してみましょう。
累積和は「基準となる要素を決めておき、その要素から他のすべての要素までの和を求めておくことで、ある区間の要素の和を O(1) で求めることができるアルゴリズム」です。 
この累積和を利用して、端末 1 から出発し、各端末に到達するまでに必要な時間をあらかじめ求めておくことで、任意の 2 端末間の移動にかかる時間を瞬時に O(1) で求めることができます。
トークンが端末 1 から端末 i に移動するのにかかる時間を t_sum[i] とすると、 t_sum[i+1] = t_sum[i] + （端末 i から次の端末までの移動時間） が成り立ちます。 
また、i < j である i, j について、端末 i から端末 j まで移動するのにかかる時間は t_sum[j] - t_sum[i] となります。 しかし、j ≦ i の場合は注意が必要です。
t_sum[i] は端末 1 を基準とした距離であるので、端末 i から端末 j までの移動を「端末 i から端末 1 までの移動」と「端末 1 から端末 j までの移動」に分けて移動時間を求める必要があり、その値は t_sum[N+1] - t_sum[i] + t_sum[j] となります。 
これらの方法で、トークンの移動ごとにかかる時間を求め、それらの総和を求めることでこの問題を解くことができます。ここまでの処理を実装することができれば、この問題を解くことができます。今回の問題のように、リング状の要素を 1 次元配列で扱う際は範囲外参照に注意しましょう。
'''

A# データの分類
# utf-8
from collections import defaultdict

n = int(input())
xyc = [list(map(int, input().split())) for _ in range(n)]
x, y = map(int, input().split())

dist = [((x - i) ** 2 + (y - j) ** 2, k) for i, j, k in xyc]
dist.sort(key=lambda t: (t[0], t[1]))

ans = [0] * n
d = defaultdict(int)
max_class = -1 # 答えとなるクラスが存在する個数
cnt_class = -1 # 答えとなるクラス
for i in range(n):
    d[dist[i][1]] += 1
    if max_class < d[dist[i][1]]:
        max_class = d[dist[i][1]]
        cnt_class = dist[i][1]
    elif max_class == d[dist[i][1]]: # クラスが複数ある場合
        if dist[i][1] < cnt_class:
            cnt_class = dist[i][1]
    ans[i] = cnt_class

q = int(input())
for _ in range(q):
    k = int(input())
    print(ans[k - 1])
'''
クエリ毎に計算すると時間が間に合わないので、k 昇順で予測値を前計算しておく
あらかじめ、n 個のデータ (x_1, y_1) ... (x_n, y_n) を、(x_0, y_0) からの距離昇順でソートしておく。
距離が等しいデータは、クラスの値が昇順になるように並べる
先頭 k 個のクラス値で多数決をとった結果が k 近傍法の予測値となる
クラス値 c の範囲が [1, 1000000000] のため、愚直にやると時間が間に合わない。工夫して計算量を改善する必要がある
優先度付きキューや、連想配列を用いるとよい
'''

S# ペイントソフト  https://paiza.jp/works/mondai/reviews/show/e06e9cfcf48a68f089a25fdcee3942f2
# utf-8
from typing import List

def is_point_square_in(num: int, p: List[int], x: int, y: int) -> bool:
    if num == 0:
        if x < p[0] and y < p[1]: return True
        else: return False
    elif num == 1:
        if x < p[0] and y > p[1]: return True
        else: return False
    elif num == 2:
        if x > p[0] and y > p[1]: return True
        else: return False
    elif num == 3:
        if x > p[0] and y < p[1]: return True
        else: return False

n, q, h, w = map(int,input().split())
size = 0
ll_ur_crossing = False
ul_lr_crossing = False

point = [tuple(map(int, input().split())) for _ in range(4)]

if point[0][0] >= point[2][0] and point[0][1] >= point[2][1]:
    size += 1
    ll_ur_crossing = True

if point[1][0] >= point[3][0] and point[1][1] <= point[3][1]:
    size += 1
    ul_lr_crossing = True

color_of_area = [1] * (1 << (4 + size))

for _ in range(n):
    id, add = 0, 0
    c, x, y = map(int,input().split())
    
    for j in range(4):
        ok = is_point_square_in(j, point[j], x, y)
        if ok: id += 1 << j
    
    if ll_ur_crossing:
        if x > point[0][0] and y < point[2][1]:
            id += 1 << (4 + add)
        add += 1
    
    if ul_lr_crossing:
        if x < point[3][0] and y < point[1][1]:
            id += 1 << (4 + add)
    
    color_of_area[id] = c

for i in range(q):
    id, add = 0, 0
    x, y = map(int,input().split())
    for j in range(4):
        ok = is_point_square_in(j, point[j], x, y)
        if ok: id += 1 << j
    
    if ll_ur_crossing:
        if x > point[0][0] and y < point[2][1]:
            id += 1 << (4 + add)
        add += 1
    
    if ul_lr_crossing:
        if x < point[3][0] and y < point[1][1]:
            id += 1 << (4 + add)
    
    print(color_of_area[id])
    
S# 画像の切り抜き https://paiza.jp/works/mondai/reviews/show/c976c3893c7a7b490f370fa3832caae6
# utf-8
h, w, n, m = map(int, input().split())
a = [list(input()) for _ in range(h)]

left = 0
right = 2

while right - left > 10 ** -8:
    mid = (right + left) / 2
    s = [[0] * (w + 1) for _ in range(h + 1)]

    for i in range(h + 1):
        for j in range(w + 1):
            s[i][j] = 0
            if i > 0 and j > 0:
                if a[i - 1][j - 1] == '1':
                    cnt = 1
                else:
                    cnt = 0
                s[i][j] += cnt - mid
                s[i][j] += s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1]
    
    work = [0] * (w + 1)
    mx = [0] * (w + 1)
    flag = False
    for i in range(h + 1):
        for j in range(i + n, h + 1):
            for k in range(w + 1):
                work[k] = s[j][k] - s[i][k]
            
            for k in range(w, -1, -1):
                mx[k] = work[k]
                if k < w:
                    if mx[k] < mx[k + 1]:
                        mx[k] = mx[k + 1]

            for k in range(m, w + 1):
                if -work[k - m] + mx[k] >= 0.0:
                    flag = True
            
    if flag:
        left = mid
    else:
        right = mid

print(float(left))

# P共通テスト過去問題2　★
D# 拡散の脅威
# utf-8
A = int(input())
B = int(input())
C = int(input())

print(A * B + C)
'''
タロー君の投稿を見た人数の最大値を求めるため、それぞれのフォロワーが重複していない場合を考えればよいです。
よって、リツイートされた投稿を見ることができるのは最大 A * B 人、タロー君の投稿をリツイートではなく直接見ることができるのは最大 C 人です。
これらの和が求める答えとなります。
'''

C# 正確なフィッティング （最小二乗法）
# utf-8
a = float(input())
n = int(input())

xy_sum = 0
xx_sum = 0
for _ in range(n):
    x, y = map(int, input().split())
    xy_sum += x * y
    xx_sum += x * x

accurate_a = round(xy_sum / xx_sum, 4)

if a == accurate_a:
    print("Yes")
else:
    print("No")
'''
f ( α ) を Σ ( y_i - αx_i )2 と置きます。 f ( α ) を最小とする α が最小二乗法によって求められる傾きです。
f ( α ) は α に関する下に凸な二次関数であるため、ただ一つの最小値を持ちます。よって、f ( α ) の接線の傾きが 0 のとき f ( α ) は最小となります。そのような α を求めればよいです。
f ( α ) を α で微分すると、 f' ( α ) = 2α Σ x_i2 - 2 Σ x_i y_i となります。したがって、f' ( α ) = 0 とする α は Σ x_i y_i / Σ x_i2 となります。
また、f ( α ) を f ( α ) = Σx_i2{ ( α - Σ x_i y_i / Σ x_i2 )2 - ( Σ x_i y_i / Σ x_i2 )2 + Σ y_i2 / Σ x_i 2 } というように式変形した数式からも、f ( α ) を最小とする α は Σ x_i y_i / Σ x_i2 であることが分かります。
以上より、タロー君が求めた小数 a が、Σ x_i y_i / Σ x_i2 を小数第 5 位で四捨五入した値と一致するかどうかが求める答えとなります。
'''
# 別解
# utf-8
a = float(input())
n = int(input())

taro_square_sum = 0
slope_increased_square_sum = 0
slope_decreased_square_sum = 0
for _ in range(n):
    x, y = map(int, input().split())
    taro_square_sum += (y - a * x) ** 2
    slope_increased_square_sum += (y - (a + 0.0001) * x) ** 2
    slope_decreased_square_sum += (y - (a - 0.0001) * x) ** 2

if (
    taro_square_sum < slope_increased_square_sum
    and taro_square_sum <= slope_decreased_square_sum
):
    print("Yes")
else:
    print("No")
'''
別解として、既にタロー君が a を求めていることと a は小数第 4 位までの小数であることを利用して、 f ( a ) が、 a を 0.0001 増加させたときの誤差の二乗和の値 f ( a + 0.0001 ) 未満となり、かつ a を 0.0001 減少させたときの誤差の二乗和の値 f ( a - 0.0001 ) 以下となるかどうか調べることで、タロー君が求めた a が正しいかどうか判定することができます。
別解の不等号について補足します。 f ( a ) = f ( a + 0.0001 ) となるとき、実際に f ( α ) を最小とする α は a + 0.00005 で、小数第 5 位を四捨五入すると、a + 0.0001 が今回の最小二乗法によって求められる数値となります。
そのためタロー君が求めた a と異なります。それに対して f ( a ) = f ( a - 0.0001 ) となるときは、実際に f ( α ) を最小とする α は a - 0.00005 で小数第 5 位を四捨五入すると、 
a が今回の最小二乗法によって求められる数値となり、タロー君が求めた a と一致します。
'''

B# パリティチェック　※解答に不備あり

A# PC重ね
# utf-8
import itertools

n = int(input())
weight, resist = [], []
for i in range(n):
    w, r = map(int, input().split())
    weight.append(w)
    resist.append(r)
ans = n
for p in itertools.permutations(range(n)):
    space = 1
    w_on_pc = 0
    for i in p:
        if w_on_pc > resist[i]:
            space += 1
            w_on_pc = 0
        w_on_pc += weight[i]
    ans = min(space, ans)
print(ans)
'''
できるだけスペースを取らないような PC の積み重ね方の方針は存在するでしょうか？
直感的に次の 2 つの方針で省スペースを実現できるように思われます。
重さが大きい PC から順に積み重ねていく
耐重量が大きい PC から順に積み重ねていく
しかし、これらの方針では、重さと耐重量の組み合わせが極端な PC が登場するような入力がコーナーケースとなり不正解となってしまいます。
そこで、この問題の 「1 ≦ n ≦ 10」 という制約に注目しましょう。 一般的にこの問題のような実行時間制約における処理回数の上限は 10^9 回程度であり、この制約から n! 回処理を行っても実行時間制約に間に合うことがわかります。（10! = 3628800）
よって、積み重ねる PC の順番を全探索し、全ての順列についてその順番で貪欲に PC を重ねていった時のスペースを求め、それらのうちの最小値を求めることでこの問題に正解することができます。
この方法が正しいことは、「スペースが最小になるような PC の重ね方が必ず存在すること」と「その重ね方は PC をある順番でスペースが最小になるように貪欲に重ねていくことで得られる」ことからわかります。
ここまでの解法を実装するには主に次の 2 つの処理を実装する必要があります。
n 個の PC を重ねる順番の順列を全探索する
得られた順列の順に、スペースが最小になるように PC を重ねる
1 つ目の処理は、再帰や深さ優先探索などを行うことで順列を全列挙することができます。また、言語によっては関数などを用いることで実装することができる場合もあります。（C++ の next_permutation など） 2 つ目の処理は、各 PC について次の処理を行うことで実装できます。
与えられた PC の順列の先頭から以下の処理をおこなう。
  PC が 1 つ目の場合は一番下に置く。このスペースに注目する。
  2 つ目以降の場合、注目しているスペースに PC をおけるかを判定する。
    PC をおける場合、そのスペースに PC を置く。
    PC をおけない場合、置こうとしていた PC を新たなスペースに置き、このスペースに注目する。
この置き方では、与えられた順に PC を積み重ねるときの最適な積み重ね方が得られるとは限りませんがこの積み重ね方を全順列について行えば、その中に答えとなる積み重ね方があります。 pc が重ねられるかどうかを判定する際は、注目しているスペースの各pcについて、そのpcの上にあるpcの重量の合計が耐荷重量を超えるかどうかを判定すれば良いです。
'''

S# JUMP!!!
# utf-8
import math

n, m = map(int, input().split())
dh = []
for i in range(n):
    tmp1, tmp2 = map(int, input().split())
    dh.append([tmp1, tmp2])

d = []
h = []
for i in range(n):
    d.append(dh[i][0])
    h.append(dh[i][1])
a = [float(input()) for i in range(m)]
a.sort(reverse=True)

c = 600

def check(i):
    flag = 1
    jump = 0
    for j in range(n):
        left = d[j] - math.sqrt((c - (h[j])) / a[i]) - math.sqrt(c / a[i])
        left_on = left + 2 * math.sqrt(c / a[i])
        right = d[j] + math.sqrt((c - (h[j])) / a[i]) - math.sqrt(c / a[i])
        if jump < left:
            jump = left_on
        elif jump <= right:
            jump = jump + 2 * math.sqrt(c / a[i])
        else:
            flag = 0
            break
    return flag


left, right = -1, m
while right - left > 1:
    mid = (left + right) // 2
    if check(mid):
        left = mid
    else:
        right = mid

print(right)
'''
この問題は二分探索によって解くことができます。 ある人が完走できるかは貪欲法によって求めます。 放物線の2次の係数が大きくなるほどジャンプ地点と着地地点の幅が小さくなるという単調性があり、この性質を使って二分探索することができます。 
## 問題の整理 生徒のジャンプの軌道は y = -ax^2 + c ・・・(1) です。
よってハードルを飛ぶときには y = -a(x-B)^2 + c (Bは任意の実数) ・・・(2) の放物線を描くことがわかります。
１人の生徒がハードルを飛び越えることができるジャンプ地点の範囲を考えます。 ハードルを跳ぶための条件は、図1にあるように放物線の左側とハードルが交わる点と、放物線の右側とハードルが交わる点によって定義される範囲内から跳ぶことです。
逆に、その範囲外から跳ぶとハードルにぶつかります。
i 番目のハードルを跳ぶことを考えます。座標 d_i で高さ h_i になるような放物線を求めればよいので、式(2)で y = h_i とおき、まず放物線の軸を求めます。計算して B = d_i ± √(c-h_i)/a となります。図2の水色で表される、小さいほうの解はできるだけスタート側でハードルを跳ぶときの放物線の軸です。
図2のオレンジ色で表される、大きいほうの解はできるだけゴール側に近づいてハードルを跳ぶときの放物線の軸になります。 
それぞれの放物線のジャンプする場所と着地する場所を求めるために、y 軸との交点を求めます。 
水色の放物線の y 軸との交点は x = d_i - √(c-h_i)/a ± √c/a　・・・(3) オレンジ色の放物線の y 軸との交点は x = d_i + √(c-h_i)/a ± √c/a ・・・(4) になります。 よって、ジャンプできる範囲は d_i - √(c-h_i)/a - √c/a <= x <= d_i - √(c-h_i)/a + √c/a となります。 
また、対応する着地地点の範囲は d_i + √(c-h_i)/a - √c/a <= x <= d_i + √(c-h_i)/a + √c/a となります。 
ジャンプ地点と着地地点で表されるジャンプの幅は 2√c/a です。 ## 貪欲解（一人） まず初めに一人の生徒が完走できるかを貪欲法によって求めます。 
できるだけスタートに近い側に着地したほうが、次のハードルを跳ぶための条件を満たす可能性が高くなります。 よって、次のハードルを跳べる範囲内に入ったらすぐにジャンプをするのが最適です。
この条件を満たしながらスタートから貪欲法を使って解きます。 図3のように、あるハードルの着地地点の前に次のハードルのジャンプ地点が来てしまうと次のハードルをジャンプすることができません。これは放物線が重ならないことと同じ意味を表します。 
よってハードルを跳び越えることができる範囲の中で、全てのジャンプする軌道の放物線が重ならない時に完走することができます。 ## 二分探索 次に二分探索部分を考えます。 ジャンプの幅は 2√c/a で表されます。
これは a が大きくなればジャンプの幅も単調に減少することを表しており、この単調性を使って a の値を二分探索することでジャンプできる人数を求めることができます。
'''

S# 数論階層クラスタリング
# utf-8
n = int(input())
a = list(map(int, input().split()))
p = [0] * (n + 1)
for i in range(n):
    p[a[i]] = i

ans = 0
for i in range(1, n + 1):
    indices = [-1, n]
    for j in range(i, n + 1, i):
        indices.append(p[j])
    indices.sort()
    c = []
    for j in range(1, len(indices)):
        if (indices[j] - indices[j - 1] - 1) % 2 == 0:
            c.append(indices[j] - indices[j - 1] - 1)

    status = 0
    for j in range(len(c)):
        if status == 0 and j % 2 == 0 and c[j] == 0:
            status = 1
        elif status == 1 and j % 2 == 1 and c[j] == 0:
            status = 2

    if status == 2:
        ans = i

print(ans)
'''
まずは、「答えが x の倍数になるか」という問題を考えてみましょう。この問題を解く上で鍵となるのは、各要素が x の倍数かということになります。
連続する 3 つの要素がすべて x の倍数なら必ず操作後の要素は x の倍数になり、そのうちの 2 つだけが x の倍数なら操作後の要素が x の倍数かは自由に決めることができます。
x の倍数が 1 つ以下なら必ず操作後の要素は x の倍数になりません。
ここで、「A の先頭と末尾に x を追加した数列 A' における、隣り合う x の倍数どうしに挟まれた x の倍数でない要素の数」を出現順に並べた数列 B を考えてみましょう。
最終的に数列 B を (0, 0) にすることが目標になります。詳細は長くなるため割愛しますが、すべての操作において「B の長さ + B の要素の和」の偶奇が保存されることが証明できます。
また、このことを各操作と照らし合わせて考えると、B に含まれる奇数は単体で削除でき、また偶数を削除する場合は必ず偶数個同時に削除する必要があることがわかります。
また、1 以上の数を 0 にする方法がないことも示すことができます。
これらの考察により、B から奇数を取り除いた数列 C が (偶数個の要素, 0, 偶数個の要素, 0, 偶数個の要素) という形をしているとき、かつそのときのみ最終的に x の倍数が残せることが示せます。
これで「答えが x の倍数になるか」という問題が解けました。あとは簡単で、この命題が真になるような最大の x が本問の最終的な答え x' になります。
なぜなら、任意の k ≧ 2 に対して「答えが kx' の倍数になるか」という命題が偽になるからです。
したがって、x = 1, 2, ..., N について試すことにより、この問題は時間計算量 O(N^2) で解くことができました。
最後に、数列が順列であることを利用して高速化しましょう。「答えが x の倍数になるか」という問題を解くためには、x の倍数 (x, 2x, ... ≦ N) であるような各要素の位置が分かればよいです。
これは最初に 1, 2, ..., N の位置を記録しておくことで、アクセスする要素の数を O(Σ_x N/x) = O(NlogN) に抑えることができます (ただし、列挙した位置のソートが必要になります)。
したがって、この問題は O(Nlog^2N) で解くことができます。
'''

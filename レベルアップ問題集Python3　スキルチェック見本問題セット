<Dランク>
# 掛け算
m = int(input())
n = int(input())
print(m*n)
'''
2つの整数を入力として受け取り、それらを掛け合わせた結果を出力すればよいです。
'''

# 足し算 
a,b = map(int, input().split())
print(a+b)
'''
2つの整数を入力として受け取り、それらを足し合わせた結果を出力すればよいです。
'''

# 一番小さい値
n = [int(input()) for _ in range(5)]
print(min(n))
'''
答えを管理する変数 answer を用意し、適当に大きな値で初期化します。
そして、入力された整数と answer を比較し、小さい方の値で answer を更新するという処理を行えばよいです。
min 関数を使うとリストの要素の最小値を取得することができます。
'''

# 文字の一致
s = input()
t = input()
if s == t:
    print("OK")
else:
    print("NG")
'''
文字列を2つ受け取り、それらが一致しているかどうかを確かめればよいです。2 つの文字列の値が等しいかは == 演算子で判定できます。
'''
<Cランク>
# Fizz Buzz
n = int(input())

for x in range(1,n+1):
    if x%15 == 0:
        print("Fizz Buzz")
    elif x%3 == 0:
        print("Fizz")
    elif x%5 == 0:
        print("Buzz")
    else:
        print(x)
'''
1 ~ n までの各数値について、問題文の指示に従って if 文等で場合分けを行い出力すればよいです。
x % 3 == x % 5 == 0 は「x を 3 で割った余りと x を 5 で割った余りが共通して 0 である」という条件式です。
x % 3 == x % 5 == 0 の条件式は最初に置く必要があることに注意してください。
たとえば、この条件式が x % 3 == 0 の後の elif 節にある場合は、3 の倍数はすべて x % 3 == 0 で引っかかってしまうので、x % 3 == x % 5 == 0 内の処理がおこなわれることがなくなってしまいます。
'''

<Bランク>
# 長テーブルのうなぎ屋
[step1] 長テーブルのうなぎ屋 (力試し編)　※91点
# utf-8
def main():
    import sys
    input = sys.stdin.read
    data = input().strip().split("\n")

    # 初期値を読み取る
    n, m = map(int, data[0].split())
    groups = [list(map(int, line.split())) for line in data[1:]]

    # 座席管理配列 (False = 空いている, True = 埋まっている)
    seats = [False] * n

    # 各グループについて処理
    for a, b in groups:
        if not (1 <= a <= n and 1 <= b <= n):
            raise ValueError("Invalid input: a_i or b_i out of range.")

        start = b - 1  # 0-indexed
        can_seat = True

        # グループが座る予定の範囲を確認
        for i in range(a):
            if seats[(start + i) % n]:
                can_seat = False
                break

        # 座れる場合、座席を埋める
        if can_seat:
            for i in range(a):
                seats[(start + i) % n] = True

    # 最終的な着席人数を計算
    result = sum(seats)
    print(result)

if __name__ == "__main__":
    main()
'''
※未通貨のテストケース入力データ
90 62
51 17
43 24
85 36
5 30
28 61
5 5
44 40
16 5
67 71
58 86
52 53
3 29
19 43
71 60
38 6
6 30
60 87
73 3
43 26
5 65
8 71
1 34
41 87
26 88
81 48
31 12
3 48
90 10
62 56
1 38
38 51
56 19
84 59
35 51
42 75
6 3
67 61
26 58
36 12
50 28
29 37
74 9
45 51
14 53
63 16
35 1
88 67
31 42
52 64
13 9
59 71
16 30
17 8
60 41
32 20
64 29
54 12
53 7
33 33
51 88
34 48
53 38
46 21
74 54
54 83
48 19
87 20
76 16
51 5
24 56
82 63
1 19
9 74
8 86
29 87
86 62
28 48
86 43
51 79
20 70
64 34
84 38
57 38
22 36
43 16
68 4
83 67
14 76
89 60
38 84 
'''

[step2] 「長テーブルのうなぎ屋」を解くために：part1
# utf-8
n, m = map(int, input().split())

print(n, m)

for _ in range(m):
    a, b = map(int, input().split())
    print(a, b)
'''
1 行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。
M 回実行される繰り返し処理を書きます。
標準入力を用いて入力を受け取り、受け取った値を変数に代入します。
繰り返し処理の中で入力を受け取り、それぞれの値を出力します。
'''

[step3] 「長テーブルのうなぎ屋」を解くために：part2
# utf-8
n = int(input())
table = [int(n) for n in input().split()]

count = 0

for i in range(n):
    if table[i] == 0:
        count += 1

print(count)
'''
1 行目の入力を標準入力を用いて受け取り、長さ n の配列を用意します。
n 回実行される繰り返し処理を書きます。
繰り返し処理の中で入力を受け取り、それぞれの座席の状況を入力します。
最後に、空席の数を数えて出力します。
'''

[step4] 「長テーブルのうなぎ屋」を解くために：part3
# utf-8
n = int(input())
a, b = map(int, input().split())

for i in range(b, b+a):
    # 余計な空白を入れないための処理
    if i > b:
        print(" ",end="")
    print(i,end="")
    
print("")
'''
それぞれの整数を受け取ります。
着席開始座席番号 b から a 回繰り返す処理を書きます。
繰り返し処理の中で a 人それぞれの座席番号を空白区切りで出力します。
'''

[step5] 「長テーブルのうなぎ屋」を解くために：part4
# utf-8
n = int(input())
a, b = map(int, input().split())

for i in range(b, b+a):
    # 余計な空白を入れないための処理
    if i > b:
        print(" ",end="")
    
    if i > n:
        print(i-n, end="")
    else:
        print(i, end="")
    
print("")
'''
それぞれの整数を受け取ります。
着席開始座席番号 b から a 回繰り返す処理を書きます。
繰り返し処理の中で a 人それぞれの座席番号を空白区切りで出力します。
座席番号が n を超える場合には番号から n を引いて出力します。
'''

[step6] 「長テーブルのうなぎ屋」を解くために：part5
# utf-8
n, m = map(int, input().split())

for i in range(m):
    a, b = map(int, input().split())
    
    for j in range(b, b+a):
        if j > b:
            print(' ', end="")
        
        if j > n:
            print(j-n, end="")
        else:
            print(j, end="")

    print("")
'''
それぞれの整数を受け取ります。
m 組のグループに対応するために m 回の繰り返し処理を書きます。
繰り返し処理の中で各グループの人数 a と着席開始座席番号 b を受け取ります。
さらに a 回の繰り返し処理を書き、各グループの着席番号を出力します。
この際、先ほどの問題と同様に着席番号が n を超える場合には番号から n を引いた値を出力します。
'''

[step7] 「長テーブルのうなぎ屋」を解くために：part6
# utf-8
import sys

n = int(input())
a, b = map(int, input().split())
table = list(map(int, input().split()))

for i in range (b, b+a):
    pos = 0
    if i > n:
        pos = i-n
    else:
        pos = i
    
    if table[pos-1] == 1:
        print("No")
        sys.exit()
    else:
        table[pos-1] = 1
        

print("Yes")
for i in range(n):
    if i > 0:
        print(' ', end="")
    
    print(table[i], end="")
    
print("")
'''
それぞれの整数と座席の状況を受け取ります。
a 回の繰り返し処理を書き、それぞれの座席番号を求めます。
求めた番号の座席が埋まっている場合はNoと出力してプログラムを終了します。座席が空いている場合には、座席の状況を空席から更新します。
a 人がすべて座ることができた場合はYesと出力し、次の行に更新後の座席状況を出力します。
'''

[final] 長テーブルのうなぎ屋
# utf-8
n, m = map(int, input().split())

vacant = [True] * n
for _ in range(m):
    a, b = map(int, input().split())

    can_sit = True
    for i in range(b, b + a):
        if not vacant[i % n]:
            can_sit = False
            break

    if not can_sit:
        continue

    for i in range(b, b + a):
        vacant[i % n] = False

ans = 0
for v in vacant:
    if not v:
        ans += 1

print(ans)

<Aランク>
# じゃんけんの手の出し方
n,m = map(int, input().split())
s = input()

enemy_g, enemy_c, enemy_p = 0,0,0
for v in s:
    if v == "G":
        enemy_g += 1
    elif v == "C":
        enemy_c += 1
    else:
        enemy_p += 1

ans = 0
for p in range(m//5 + 1):
    c = (m - p*5) //2
    g = n - p - c
    
    if g < 0:
        continue
    if p*5 + c*2 != m:
        continue
    
    ans = max(ans, min(p,enemy_g) + min(c, enemy_p) + min(g, enemy_c))

print(ans)
'''
じゃんけんの順番は適当に並べ替えてもよいこと
出せる指の本数の合計が決まっているため、パーを出す回数を決めるとチョキの回数がおのずと決まること
に気が付くと、自分がパー (またはチョキ) を出す回数について全探索することで、答えを求めることが出来ます。
なお、出す指の本数がちょうど M 本となっていなければならないことに注意してください。
グー、チョキ、パーを自分が g, c, p 回、相手が enemy_g, enemy_c, enemy_p 回出すとき、自分がじゃんけんに勝てる回数は最大で min (g, enemy_c) + min (c, enemy_p) + min (p, enemy_g) 回です。
'''

<Sランク>
# 島探し
# utf-8
m, n = map(int, input().split())
atlas = [input().split() for _ in range(n)]

move = [[-1, 0], [0, 1], [1, 0], [0, -1]]
ans = 0
for i in range(len(atlas)):
    for j in range(len(atlas[i])):
        if atlas[i][j] == "0":
            continue

        ans += 1
        q = [(i, j)]
        while q:
            y, x = q.pop(0)
            atlas[y][x] = "0"
            for vec in move:
                next_y = y + vec[0]
                next_x = x + vec[1]

                if not (0 <= next_y <= n - 1 and 0 <= next_x <= m - 1):
                    continue
                if atlas[next_y][next_x] == "0":
                    continue

                q.append((next_y, next_x))

print(ans)
'''
黒マスを起点とした幅優先探索を行えばよいです。
マスが探索済みかどうかを管理する変数を用意するか、
探索済みのマスを適宜白マスに書き換えることによって、同じ島を複数回探索しないように工夫する必要があります。
stack を使って深さ優先探索をしています。
リストをキューのように扱うことで幅優先探索をしています。
Python のリストは要素を append メソッドで追加していくとき、
list.pop() のように使うとスタックの役割を、
list.pop(0) のように使うとキューを役割を果たすことができます。
'''
# mod7占い
# utf-8
n = int(input())

a = [0] * 7
for _ in range(n):
    a[int(input()) % 7] += 1

mod7 = []
for i in range(7):
    for j in range(i, 7):
        for k in range(j, 7):
            if (i + j + k) % 7 == 0:
                mod7.append((i, j, k))

ans = 0
for group in mod7:
    i, j, k = group
    if i == j == k:
        ans += a[i] * (a[i] - 1) * (a[i] - 2) // 6
    elif i == j:
        ans += a[i] * (a[i] - 1) * a[k] // 2
    elif j == k:
        ans += a[i] * a[j] * (a[j] - 1) // 2
    elif k == i:
        ans += (a[k] - 1) * a[j] * a[k] // 2
    else:
        ans += a[i] * a[j] * a[k]

print(ans)
'''
カードを 7 で割った余りで分類します。
各要素が 0 ~ 6 からなる 3 つ組 (a, b, c) であって、足すと和が 7 で割り切れるようなものを求めます。
それぞれの 3 つ組に対して、7 で割った余りが (a, b, c) となるようにカードを 3 枚選ぶ方法が何通りあるかを求めます。
それらを足し合わせたものが答えです。
入力が符号付き 32bit 整数型に収まらない場合があるので、注意しましょう。

方針に沿って実装しています。
(a, b, c) の組において
3 つの数値が同じ数の場合、
2 つの数値が同じ数の場合
は慎重に処理する必要があります。
【 3 つの数値が同じ数の場合 】
X 個の中から 3 つ選んで組み合わせを作るので、XC3 が求める組み合わせの数です。
捕捉 : XC3 = X * (X - 1) * (X - 2) / (3 * 2 * 1)
【 2 つの数値が同じ数の場合 】
X 個の中から 1 個選んで（組み合わせを作り）、同時に Y 個の中から 2 個選んで組み合わせを作るので、XC1 * YC2 が求める組み合わせの数です。
捕捉 : XC1 * YC2 = X * Y * (Y - 1) / (2 * 1)
式中にでてくる C は組み合わせの総数を求めるときに使われる数学の記号です。
'''

<別解>
import itertools

n = int(input())

a = [0] * 7
for _ in range(n):
    a[int(input()) % 7] += 1

mod7 = [x for x in itertools.combinations_with_replacement(range(7), 3) if sum(x) % 7 == 0]

ans = 0
for group in mod7:
    i, j, k = group
    if i == j == k:
        ans += a[i] * (a[i] - 1) * (a[i] - 2) // 6
    elif i == j:
        ans += a[i] * (a[i] - 1) * a[k] // 2
    elif j == k:
        ans += a[i] * a[j] * (a[j] - 1) // 2
    elif k == i:
        ans += (a[k] - 1) * a[j] * a[k] // 2
    else:
        ans += a[i] * a[j] * a[k]

print(ans)
'''
itertools を import して利用する方法です。
mod7 = [x for x in itertools.combinations_with_replacement(range(7), 3) if sum(x) % 7 == 0] について説明します。
itertools.combinations_with_replacement(range(7), 3) は 0 ~ 7 の整数から重複を許して 3 つ選んで組み合わせを作り、各組をタプルとして収めたイテラブルを生成するコードです。
if sum(x) % 7 == 0 は 1 つ上の段階で作った各組について組の数値をすべて足した値が 7 で割り切れるか確かめています。
よって、mod7 = [x for x in itertools.combinations_with_replacement(range(7), 3) if sum(x) % 7 == 0] は 0 ~ 7 の整数から重複を許して 3 つ選んでできる組み合わせの中から、組の数値をすべて足した値が 7 で割り切れる組のみを要素としてリストを生成するコードです。
'''

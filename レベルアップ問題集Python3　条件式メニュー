<文字列の比較>
step1 比較演算子：==
# utf-8
A, B = map(int, input().split())

print(A == B)
'''
比較演算子 == を学びます。比較演算子 == は左辺と右辺が等しいときに真を、そうでないときに偽を返します。
例えば、1 == 1 は真、1 == 2 は偽となります。
以下の順で処理をおこないます。
整数A, B を標準入力より受け取る
条件式 A == B の真偽を出力する
'''

step2 比較演算子：!=
# utf-8
A, B = map(int, input().split())

print(A != B)
'''
比較演算子 != を学びます。比較演算子 != は左辺と右辺が等しくないときに真を、そうでないときに偽を返します。
以下の順で処理をおこないます。
整数A, B を標準入力より受け取る
条件式 A != B の真偽を出力する
'''

step3 比較演算子：<
# utf-8
A, B = map(int, input().split())

print(A < B)
'''
比較演算子 < を学びます。比較演算子 < は左辺が右辺未満のときに真を、そうでないときに偽を返します。
以下の順で処理をおこないます。
整数A, B を標準入力より受け取る
条件式 A < B の真偽を出力する
'''

step4 比較演算子：<=
# utf-8
A, B = map(int, input().split())

print(A <= B)
'''
比較演算子 <= を学びます。比較演算子 < は左辺が右辺以下のときに真を、そうでないときに偽を返します。
< は左辺が右辺未満、<= は左辺が右辺以下であるときに真となることに注意してください。
以下の順で処理をおこないます。
整数A, B を標準入力より受け取る
条件式 A <= B の真偽を出力する
'''

step5 式の比較
# utf-8
A, B, C, D = map(int, input().split())

print(A + B == C * D)
'''
比較演算子は式を比較することもできます。
以下の順で処理をおこないます。
整数A, B, C, D を標準入力より受け取る
条件式 A + B == C * D の真偽を出力する
'''

final 文字列の比較
# utf-8
S, T = input().split()

print(S == T)
'''
比較演算子 == は多くの場合、数値の比較だけでなく文字列などの比較にも利用できます。
ただし、Java など一部の言語では文字列の比較に比較演算子 == を用いると意図した結果にならない場合があるため注意が必要です。
以下の順で処理をおこないます。
文字列 S, T を標準入力より受け取る
条件式 S == T の真偽を出力する
　　Java など一部の言語では、各言語に用意されている文字列の比較用の演算子・メソッドなどを使う必要があります。
'''

<論理演算子の組み合わせ>
step1 AND 演算子
# utf-8
A, B, C, D = map(int, input().split())

print(A == B and C == D)
'''
AND 演算子を学習します。AND 演算子は、左辺と右辺が両方真であるとき、またそのときに限り真を返します。
　　例えば、真 AND 真 は真、真 AND 偽 は偽、偽 AND 偽 は偽になります。
多くの言語では、AND 演算子として and や && が用意されています。
論理演算子は両端に比較演算子を用いた式を書くことができます。
以下の順で処理をおこないます。
整数A, B, C, D を標準入力より受け取る
条件式 A == B AND C == D の真偽を出力する
'''
step2 OR 演算子
# utf-8
A, B, C, D = map(int, input().split())

print(A == B or C == D)
'''
OR 演算子を学習します。OR 演算子は、左辺と右辺の少なくとも一方が真である場合に真を返します。
　　例えば、真 OR 真 は真、真 OR 偽 は真、偽 OR 偽 は偽になります。
多くの言語では、OR 演算子として or や || が用意されています。
以下の順で処理をおこないます。
整数A, B, C, D を標準入力より受け取る
条件式 A == B OR C == D の真偽を出力する
'''

step3 NOT 演算子
# utf-8
A, B = map(int, input().split())

print(not (A == B))
'''
NOT 演算子を学習します。NOT 演算子は、条件式の真偽を反転したものを返します。
多くの言語では、NOT 演算子として not や ! が用意されています。
以下の順で処理をおこないます。
整数A, B を標準入力より受け取る
条件式 NOT (A == B) の真偽を出力する
'''

step4 NOT 演算子 2
# utf-8
A, B, C, D = map(int, input().split())

print(not (A == B and C == D))
'''
NOT 演算子と他の論理演算子の組み合わせについて学習します。NOT 演算子は AND 演算子や OR 演算子と組み合わせて使うこともできます。
以下の順で処理をおこないます。
整数A, B, C, D を標準入力より受け取る
条件式 NOT (A == B AND C == D) の真偽を出力する
'''

step5 論理演算子の組み合わせ
# utf-8
A, B, C, D = map(int, input().split())

print(A == B and B == C and C == D)
'''
論理演算子の組み合わせについて学習します。論理演算子は複数組み合わせることができます。
A == B == C == D のように論理演算子を使わず比較演算子を複数つなげることは、多くの言語で文法エラーや意図しない挙動になるため注意しましょう。（Python など一部の言語を除く）
以下の順で処理をおこないます。
整数A, B, C, D を標準入力より受け取る
条件式 A == B AND B == C AND C == D の真偽を出力する
'''

step6 論理演算子の組み合わせ 2
# utf-8
A, B, C, D = map(int, input().split())

print(A == B and C == D or A == C and B == D)
'''
論理演算子の組み合わせについて学習します。AND 演算子と OR 演算子を組み合わせて使うこともできます。
以下の順で処理をおこないます。
整数A, B, C, D を標準入力より受け取る
条件式 A == B AND C == D OR A == C AND B == D の真偽を出力する
'''

final 論理演算子の組み合わせ 3
# utf-8
A, B, C, D = map(int, input().split())

print((A == B or C == D) and A == C)
'''
論理演算子の優先順位について学習します。多くの言語で AND 演算子の方が OR 演算子より優先順位が高いです。
AND 演算子より OR 演算子の方を先に評価したい場合は、先に評価したい論理演算を () で囲うことで先に評価することができます。
論理演算子の優先順位を確認しないと意図しない挙動になることがあるので注意しましょう。
以下の順で処理をおこないます。
整数A, B, C, D を標準入力より受け取る
条件式 (A == B OR C == D) AND A == C の真偽を出力する
　　A == B OR C == D を先に評価するため () で囲みます。
この条件式は以下の順で評価が行われます。例として入力を A, B, C, D = 1, 1, 2, 1 とします。
条件式に入力を代入すると (1 == 1 OR 2 == 1) AND 1 == 2 となります。
比較演算子を真偽にすると ( 真 OR 偽 ) AND 偽 になります。
最初に () で囲まれた OR 演算子が先に評価されるため、( 真 OR 偽 ) は真となります。
その結果、条件式は 真 AND 偽 となります。
最後に AND 演算子が評価され、この条件式の最終的な真偽は偽となります。この入力例では条件 2 を満たさないため条件式の真偽は偽で正解です。
'''

＜改行あり出力＞
step1　1行の出力
# utf-8
print(813)

step2　2行の出力
# utf-8
print(8)
print(13)

step3　3行の出力
# utf-8
print(8)
print(1)
print(3)

step4　10行の出力
# utf-8
numbers = [813, 1, 2, 923874, 23648, 782356, 3256, 2342, 24324, 112]
for num in numbers:
    print(num)

final　1000行の出力
# utf-8
for i in range(1,1001):
    print(i)

＜半角スペース区切りの出力＞
step1　2つの数値を出力
# utf-8
print("{}{}".format(1,1))

step2　3つの数値を出力
# utf-8
print("{}{}{}".format(8, 1, 3))

step3　10個の数値を出力（末尾に半角スペース有）
# utf-8
for i in range(10):
    print(i + 1, end=" ")

print()

step4　10個の数値を出力
# utf-8
for i in range(10):
    if i != 9:
        print(i+1, end= " ")
    else:
        print(i+1)
        
final　1000個の数値を出力（半角スペース区切り）
# utf-8
for i in range(1000):
    if i != 999:
        print(i+1, end= " ")
    else:
        print(i+1)
        
＜文字列の出力＞
step1　1つの文字列を出力
# utf-8
print("paiza")

step2　2つの文字列を出力
# utf-8
print("paiza learning")

step3　入力された2つの文字列を出力
# utf-8
S = input()
T = input()

print(S)
print(T)

step4　入力された10個の文字列を出力（半角スペース区切り）
# utf-8
strings = []
for i in range(10):
    strings.append(input())
    
for i in range(10):
    if i != 9:
        print(strings(i), end=" ")
    else:
        print(strings(i))
        
final　入力された10個の文字列を出力（改行区切り）
# utf-8
strings = input8).split()
for s in strings:
    print(s)
 
＜n行の出力＞
step1　1行または2行の出力
# utf-8
N = int(input())

if N == 1:
    print(1)
else:
    print(1)
    print(2)
    
step2　数行の出力
# utf-8
N = int(input())

if N == 1:
    print(1)
if N == 2:
    print(2)
if N == 3:
    print(3)
if N == 4:
    print(4)
if N == 5:
    print(5)
    
step3　10行以内の出力
# utf-8
N = int(input())

for i in range(N):
    print(i+1)
    
final　1000行以内の出力
# utf-8
N = int(input())

for i in range(N):
    print(i+1)
    
＜特定の文字で区切り1行で出力＞
step1　カンマ区切りで2つ出力
# utf-8
N,M = input().split()
print(N+","+M)

step2　バーティカルライン区切りで3つの文字列を出力
# utf-8
S1 = input()
S2 = input()
S3 = input()
print("{}|{}|{}".format(S1, S2, S3))

step3　カンマ区切りで10個出力1
# utf-8
nums = input().split()

for num in nums:
    print(num, end=",")

print()

step4　カンマ区切りで10個出力2
# utf-8
S = input().split()
print(",".join(S))

step5　半角スペースとバーティカルライン区切りで10個出力
# utf-8
for i in range(10):
    if i == 9:
        print(input())
    else:
        print(input(), end=" | ")

step6　大きな数値を3桁ごとにカンマ区切りで出力
# utf-8
N = input()

for i in range(len(N)):
    if i % 3 == 0 and i != 0:
        print(",", end="")

    print(N[i], end="")

print()

final　大きな数値を3桁ごとにカンマ区切りで出力2
# utf-8
N = input()
x = len(N) % 3

for i in range(len(N)):
    if (i - x) % 3 == 0 and i != 0:
        print(",", end="")

    print(N[i], end="")

print()

＜n*nの2次元配列の表示＞
step1　2＊2の出力
# utf-8
print("0 8\n1 3")

step2　3＊3の出力
# utf-8
N = input().split()

for i in range(len(N)):
    print(N[i], end="")
    if i % 3 == 2:
        print()
    else:
        print(" ", end="")
        
step3　九九表の出力
# utf-8
for i in range(1, 10):
    for j in range(1, 10):
        if j == 9:
            print(i * j)
        else:
            print(i * j, end=" ")
            
final　Ｎ＊Ｎの九九表の出力
# utf-8
N = int(input())

for i in range(1, N + 1):
    for j in range(1, N + 1):
        if j == N:
            print(i * j)
        else:
            print(i * j, end=" ")

＜行によって長さが違う二次元配列の表示＞
step1　N個の文字を半分ずつ出力
# utf-8
N = int(input())

for i in range(1, N + 1):
    if i % (N // 2) == 0:
        print(i)
    else:
        print(i, end=" ")
'''
改行の位置に気をつければ解くことができる問題です。
for 文と range 関数を用いて整数列 1, 2, ... , n の各要素について出力を行います。
改行が必要なのはどの要素のときか、それはインデックスが N // 2 で割り切れる要素を出力したあとです。
'''

step2　数値を異なる長さで2行出力
# utf-8
values = input().split()
N = int(values[0])
M = int(values[1])

for i in range(1, N + 1):
    if i == N:
        print(i)
    else:
        print(i, end=" ")

for i in range(1, M + 1):
    if i == M:
        print(i)
    else:
        print(i, end=" ")
'''
「1 以上 N 以下」、「1 以上 M 以下」の値をそれぞれ出力するので、range 関数を使う際には注意が必要です。
for 文内に if 文を記述して「改行するか、しないか」、「半角スペースを入れるか、入れないか」の処理をします。
'''

step3　直角三角形の出力
# utf-8
N = int(input())

for i in range(1, N + 1):
    for j in range(1, i + 1):
        if j == i:
            print(j)
        else:
            print(j, end=" ")
'''
2 重ループを使います。
考え方は以下の通りです。
出力は全部で N 行である
各行で出力される整数の個数は、1, 2, ..., N と段々増え、それは「その行が何行目か」と一致する
各行で出力される整数は、1, ..., (その行で出力される整数の個数) となっている
以上より、以下のように考えられます。
出力する行数だけ繰り返す ループA を作る
ループA のカウンタ変数を i とする
ループA の内部で各行に適した出力を行うために、各行で出力する整数列についての特性(上記)を思い出し、i 回だけ繰り返す ループB を作る
以上の考え方を実装するために、2 重ループを使います。
range 関数は　range(a, b) のように使うと、a 以上 b 未満の整数が小さい方から順に並んだ整数列を生成します。
for 文内に if 文を記述して「改行するか、しないか」、「半角スペースを入れるか、入れないか」の処理をします。
'''

step4　すべての行の長さが不定な2次元配列の出力
# utf-8
N = int(input())
M = [int(x) for x in input().split()]

for i in range(N):
    for j in range(1, M[i] + 1):
        if j == M[i]:
            print(j)
        else:
            print(j, end=" ")
 # utf-8 別解
 N = int(input())

M = [0] * N
values = input().split()
for i in range(N):
    M[i] = int(values[i])

for i in range(N):
    for j in range(1, M[i] + 1):
        if j == M[i]:
            print(j)
        else:
            print(j, end=" ")
'''
2 行目で入力される N 個の整数 m_i を受け取るために要素数 N のリストを M を [0] * N で用意します。
input().split() で入力を受け取り、for 文内で値を整数型に変換しながら、用意したリスト M に要素として代入します。
次は、出力の処理です。
for i in range(n): を ループA と名付けると、ループA 内部で以下のことをすればいいことが分かります。
m_i の値に応じて処理を繰り返す for 文を定義する (これを ループB とする)
ループB で値を改行無しで出力する
M[i] を出力する際に改行する
以上の考え方を実装することで、解くことができます。
range 関数の扱いには注意して下さい。
'''

final　すべての行の長さと値が不定な2次元配列の出力
# utf-8
values = input().split()
N = int(values[0])
M = int(values[1])

A = [0] * N
values = input().split()
for i in range(N):
    A[i] = int(values[i])

B = [0] * M
values = input().split()
for i in range(M):
    B[i] = int(values[i])

head = 0
for i in B:
    for j in range(i):
        if j == i - 1:
            print(A[head])
        else:
            print(A[head], end=" ")

        head += 1
'''
イメージとしては 数列A を M 個に分割するというものです。
1 行目は数列のここからここまでを出力、2 行目は数列のここからここまでを出力...ということがわかれば前問と同じように解くことができます。
さて、各行で出力する区間なのですが、始点(begin)がわかれば終点(end)は end = begin + B[i] - 1 と、容易に求まります。
注意点として、end = begin + B[i] とすると、最後の要素は範囲外なので出力してはいけません(今回は数学の言葉で「閉区間」として考えます。)。
次に始点について考えてみます。最初に出力する数列の始点は 0 です(問題文では 1 - indexed でしたが、解説では 0 -indexed です)。
i番目に出力する数列の始点について考えてみます。これは、(i - 1 番目に出力する数列の終点) + 1 であることがわかります。
よって、すべての数列の始点と終点がわかりました。

今回の問題の壁は、数列 A の出力を前の行の続きからやる方法をどのようにして実装するか、ということだったと思います。
上記の壁を攻略するために、解答コードでは変数 head を用意しました。
この変数 head は「次出力するインデックス」の情報を保持しています。
出力とセットで head の値を +1 することで、head は常に次のインデックスを指し示すことになります。
あとは、改行の位置に気をつければ解くことができます。

# 別解 内包表記を用いた解法です。
# utf-8
values = input().split()
N = int(values[0])
M = int(values[1])

A = [int(x) for x in input().split()]
B = [int(x) for x in input().split()]

head = 0
for i in B:
    for j in range(i):
        if j == i - 1:
            print(A[head])
        else:
            print(A[head], end=" ")

        head += 1
'''

＜実数をフォーマット指定して出力＞
step1　1つの実数を出力
# utf-8
N = float(input())
print(N)

step2　1つの実数を出力2
# utf-8
N = input()
print(N)

step3　1つの実数を出力3
# utf-8
N = float(input())
print("{:.3f}".format(N))

step4　1つの実数を出力4
# utf-8
values = input().split()
N = float(values[0])
M = int(values[1])

print("{:.{}f}".format(N, M))

final　複数の実数を出力
# utf-8
Q = int(input())

for _ in range(Q):
    values = input().split()
    n = float(values[0])
    m = int(values[1])

    print("{:.{}f}".format(n, m))

＜出力幅を指定して出力＞
step1　数値を半角スペース埋めで出力
# utf-8
N = input()
print("{: >3}".format(N))

step2　数値をゼロ埋めで出力
# utf-8
N = input()
print("{:0>3}".format(N))

step3　複数の数値を半角スペース埋めで出力
# utf-8
N = int(input())

for _ in range(N):
    m = input()
    print("{: >3}".format(m))
    
step4　数値をM桁半角スペース埋めで出力
# utf-8
values = input().split()
N = int(values[0])
M = int(values[1])

print("{: >{}}".format(N, M))

final　N個の数値をM桁半角スペース埋めで出力
# utf-8
values = input().split()
N = int(values[0])
M = int(values[1])

for _ in range(N):
    a = int(input())

    print("{: >{}}".format(a, M))

＜出力形式を指定して出力＞
step1　2つの文字列を出力
# utf-8
S = input()
T = input()

print("{} + {} = {}".format(S, T, S + T))

step2　文字列とN個の整数の出力
# utf-8
values = input().split()
N = int(values[0])
A = int(values[1])
B = int(values[2])

for i in range(N):
    if i < N - 1:
        print("({}, {})".format(A, B), end=", ")
    else:
        print("({}, {})".format(A, B))
        
step3　九九表を罫線入りで出力
# utf-8
for i in range(1, 10):
    for j in range(1, 10):
        print("{: >2}".format(i * j), end="")
        if j == 9:
            print()
        else:
            print(end=" | ")

    if i < 9:
        print("=" * (2 * 9 + 3 * (9 - 1)))
        
step4　ペアの数値の入った表を罫線入りで出力
# utf-8
values = input().split()
H = int(values[0])
W = int(values[1])
A = int(values[2])
B = int(values[3])

for i in range(H):
    for j in range(W):
        print("({}, {})".format(A, B), end="")
        if j == W - 1:
            print()
        else:
            print(end=" | ")

    if i < H - 1:
        print("=" * (6 * W + 3 * (W - 1)))
        
final　ペアの数値の入った表を罫線入りで出力2
# utf-8
values = input().split()
H = int(values[0])
W = int(values[1])
A = int(values[2])
B = int(values[3])

for i in range(H):
    for j in range(W):
        print("({: >9}, {: >9})".format(A, B), end="")
        if j == W - 1:
            print()
        else:
            print(end=" | ")

    if i < H - 1:
        print("=" * (22 * W + 3 * (W - 1)))

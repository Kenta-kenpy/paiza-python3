＜改行あり出力＞
step1　1行の出力
# utf-8
print(813)

step2　2行の出力
# utf-8
print(8)
print(13)

step3　3行の出力
# utf-8
print(8)
print(1)
print(3)

step4　10行の出力
# utf-8
numbers = [813, 1, 2, 923874, 23648, 782356, 3256, 2342, 24324, 112]
for num in numbers:
    print(num)

final　1000行の出力
# utf-8
for i in range(1,1001):
    print(i)

＜半角スペース区切りの出力＞
step1　2つの数値を出力
# utf-8
print("{}{}".format(1,1))

step2　3つの数値を出力
# utf-8
print("{}{}{}".format(8, 1, 3))

step3　10個の数値を出力（末尾に半角スペース有）
# utf-8
for i in range(10):
    print(i + 1, end=" ")

print()

step4　10個の数値を出力
# utf-8
for i in range(10):
    if i != 9:
        print(i+1, end= " ")
    else:
        print(i+1)
        
final　1000個の数値を出力（半角スペース区切り）
# utf-8
for i in range(1000):
    if i != 999:
        print(i+1, end= " ")
    else:
        print(i+1)
        
＜文字列の出力＞
step1　1つの文字列を出力
# utf-8
print("paiza")

step2　2つの文字列を出力
# utf-8
print("paiza learning")

step3　入力された2つの文字列を出力
# utf-8
S = input()
T = input()

print(S)
print(T)

step4　入力された10個の文字列を出力（半角スペース区切り）
# utf-8
strings = []
for i in range(10):
    strings.append(input())
    
for i in range(10):
    if i != 9:
        print(strings(i), end=" ")
    else:
        print(strings(i))
        
final　入力された10個の文字列を出力（改行区切り）
# utf-8
strings = input8).split()
for s in strings:
    print(s)
 
＜n行の出力＞
step1　1行または2行の出力
# utf-8
N = int(input())

if N == 1:
    print(1)
else:
    print(1)
    print(2)
    
step2　数行の出力
# utf-8
N = int(input())

if N == 1:
    print(1)
if N == 2:
    print(2)
if N == 3:
    print(3)
if N == 4:
    print(4)
if N == 5:
    print(5)
    
step3　10行以内の出力
# utf-8
N = int(input())

for i in range(N):
    print(i+1)
    
final　1000行以内の出力
# utf-8
N = int(input())

for i in range(N):
    print(i+1)
    
＜特定の文字で区切り1行で出力＞
step1　カンマ区切りで2つ出力
# utf-8
N,M = input().split()
print(N+","+M)

step2　バーティカルライン区切りで3つの文字列を出力
# utf-8
S1 = input()
S2 = input()
S3 = input()
print("{}|{}|{}".format(S1, S2, S3))

step3　カンマ区切りで10個出力1
# utf-8
nums = input().split()

for num in nums:
    print(num, end=",")

print()

step4　カンマ区切りで10個出力2
# utf-8
S = input().split()
print(",".join(S))

step5　半角スペースとバーティカルライン区切りで10個出力
# utf-8
for i in range(10):
    if i == 9:
        print(input())
    else:
        print(input(), end=" | ")

step6　大きな数値を3桁ごとにカンマ区切りで出力
# utf-8
N = input()

for i in range(len(N)):
    if i % 3 == 0 and i != 0:
        print(",", end="")

    print(N[i], end="")

print()

final　 大きな数値を3桁ごとにカンマ区切りで出力2
# utf-8
N = input()
x = len(N) % 3

for i in range(len(N)):
    if (i - x) % 3 == 0 and i != 0:
        print(",", end="")

    print(N[i], end="")

print()

＜n*nの2次元配列の表示＞
step1　2＊2の出力
# utf-8
print("0 8\n1 3")

step2　3＊3の出力
# utf-8
N = input().split()

for i in range(len(N)):
    print(N[i], end="")
    if i % 3 == 2:
        print()
    else:
        print(" ", end="")
        
step3　九九表の出力
# utf-8
for i in range(1, 10):
    for j in range(1, 10):
        if j == 9:
            print(i * j)
        else:
            print(i * j, end=" ")
            
final　Ｎ＊Ｎの九九表の出力
# utf-8
N = int(input())

for i in range(1, N + 1):
    for j in range(1, N + 1):
        if j == N:
            print(i * j)
        else:
            print(i * j, end=" ")

＜行によって長さが違う二次元配列の表示＞ Bランク　飛ばす
step1　N個の文字を半分ずつ出力
step2　数値を異なる長さで2行出力
step3　直角三角形の出力
step4　すべての行の長さが不定な2次元配列の出力
final　すべての行の長さと値が不定な2次元配列の出力

＜実数をフォーマット指定して出力＞
step1　1つの実数を出力
# utf-8
N = float(input())
print(N)

step2　1つの実数を出力2
# utf-8
N = input()
print(N)

step3　1つの実数を出力3
# utf-8
N = float(input())
print("{:.3f}".format(N))

step4　1つの実数を出力4
# utf-8
values = input().split()
N = float(values[0])
M = int(values[1])

print("{:.{}f}".format(N, M))

final　複数の実数を出力
# utf-8
Q = int(input())

for _ in range(Q):
    values = input().split()
    n = float(values[0])
    m = int(values[1])

    print("{:.{}f}".format(n, m))

＜出力幅を指定して出力＞
step1　数値を半角スペース埋めで出力
# utf-8
N = input()
print("{: >3}".format(N))

step2　数値をゼロ埋めで出力
# utf-8
N = input()
print("{:0>3}".format(N))

step3　複数の数値を半角スペース埋めで出力
# utf-8
N = int(input())

for _ in range(N):
    m = input()
    print("{: >3}".format(m))
    
step4　数値をM桁半角スペース埋めで出力
final　N個の数値をM桁半角スペース埋めで出力
# utf-8

＜出力形式を指定して出力＞
step1　2つの文字列を出力
step2　文字列とN個の整数の出力
step3　九九表を罫線入りで出力
step4　ペアの数値の入った表を罫線入りで出力
final　ペアの数値の入った表を罫線入りで出力2

<構造体の更新>
step1　構造体の作成
# utf-8
N = int(input())

for _ in range(N):
    n, o, b, s = input().split()

    print("User{")
    print("nickname : " + n)
    print("old : " + o)
    print("birth : " + b)
    print("state : " + s)
    print("}")
'''
生徒の情報を受け取って、各言語の文字列の出力を用いて、指定された形式で出力を行ってください。
今回の問題のように、「ある人や物に関する情報をまとめて管理したい」という考え方が構造体を使う上で大切な考え方です。

n 行にわたる入力を for 文を用いて受け取ります。
for 文の変数 _ ですが、これは「この変数は明示的に使わない」ということを意味する変数名です。
しかし、慣習的な書き方であるので、「必ずこう書かなくてはならない」ということではありません。
n, o, b, s = input().split() は input().split() で入力値を半角スペースで区切ってリストを生成して、アンパックで左辺の変数にそれぞれ代入しています。
【 アンパックについて 】
右辺に置かれたタプルやリストなどのオブジェクトの要素の数だけ左辺に変数を置くと、オブジェクトの要素順に左辺の変数に代入される
'''

step2　構造体の検索
# utf-8
class Student:
    def __init__(self, name, old, birth, state):
        self.name = name
        self.old = old
        self.birth = birth
        self.state = state


n = int(input())

roster = [None] * n
for i in range(n):
    name, old, birth, state = input().split()
    roster[i] = Student(name, old, birth, state)

k = input()
for student in roster:
    if student.old == k:
        print(student.name)
        break
'''
問題文の指示通り生徒のデータを構造体でまとめて管理しましょう。構造体に関する文法は言語によって異なるので、自分の使っている言語の構造体に関する文法を参考にしましょう。
1 人の生徒に関する情報をまとめた構造体 student をクラス全員分作成し、管理する必要があるため、構造体の配列を用いてクラス全員のデータを管理しましょう。
作成した構造体は変数ではなく型として扱われます。イメージとしては整数型・文字列型...といったものと同じです。
全ての生徒の情報を受け取ったのち、各生徒の年齢が K と一致するかどうかを調べ、一致した場合名前を出力すれば良いです。

「クラス」を用いることで、生徒の情報を管理します。
【 流れ・考え方 】
[None] * n では、要素数が n であるリストを生成しています。
入力値は input().split() でリストを生成して、左辺の変数に代入しています (アンパックについては前問の解説で説明しました)。
リスト roster の要素が Student のインスタンスになるように代入します。
k と各インスタンスの old が一致するか判定して、一致したインスタンスの name を出力します。
【 クラスの基本的事項 】
ここでは、Python3 でクラスをどのように使うかを説明します。
【 クラス定義 】
クラスは class クラス名: として定義します。
「クラスの中身」 はインデントを 1 つ下げて書きます。
Python3 では、「クラスの中身」のことを「属性」と言います。
属性には以下の 2 種類があります。
プロパティ
クラス内で定義される変数のこと
使い方は変数と大きく変わらない。
メソッド
クラス内で定義される関数のこと
定義の構文は関数と大きく変わらない
【 コンストラクタ 】
コンストラクタはメソッドの 1 種です。
コンストラクタの主な役割は、クラスのプロパティを用意することです。
コンストラクタのメソッド名は __init__ と決まっています。
クラスを実際に使うときに、「インスタンス化」 (次の節で説明) という作業を行うのですが、その際に呼び出されるメソッドです。
【 インスタンス 】
インスタンスとは、「実体」のような意味を持ちます。
実際にクラスを使うときに「インスタンス化」という作業を行い、インスタンスを生成します。
【 インスタンス化 】
インスタンス化はクラスを実際に使うときに行う作業のことです。
インスタンス化は インスタンス名 = クラス(引数) のように行います。
【 インスタンスの利用 】
インスタンスは、生成時に指定した インスタンス名 を使って取り扱います。
クラスで定義されている属性を利用する際、主にインスタンスから利用します。
【 属性へのアクセス 】
インスタンス名.属性名 のようにしてアクセスします。
プロパティ
インスタンス名.プロパティ名 のように書くことで、プロパティ名に対応する値を取得することができます。
メソッド
インスタンス名.メソッド名 のように書くことで、メソッド名に対応するメソッドを利用することができます。
【 self について 】
コンストラクタなどに出てくる self とは何か、について説明します。
self は簡単に言えば、「どのインスタンスの属性か」を特定するために使われるものです。
【 もう少し詳しい説明 】
クラスからはいくつものインスタンスを生成することができますが、すべてのインスタンスにおいて同名の属性が定義できます。
この状況下で単純に name としたときに、どのインスタンスの name かが分かりません。
そこで、インスタンス名.name とアクセスして「どのインスタンスの name か」という問題を解決します。
同様にクラス内でも self.name とすることで、問題を解決しています。
'''

step3　構造体の整列
# utf-8
class Student:
    def __init__(self, name, old, birth, state):
        self.name = name
        self.old = old
        self.birth = birth
        self.state = state


n = int(input())

roster = [None] * n
for i in range(n):
    name, old, birth, state = input().split()
    roster[i] = Student(name, old, birth, state)

for i in range(n):
    for j in range(i+1, n):
        if roster[i].old > roster[j].old:
            roster[i], roster[j] = roster[j], roster[i]

for student in roster:
    print(student.name, student.old, student.birth, student.state)
    
'''
問題文の指示通り生徒のデータを構造体でまとめて管理しましょう。構造体に関する文法は言語によって異なるので、自分の使っている言語の構造体に関する文法を参考にしましょう。
1 人の生徒に関する情報をまとめた構造体 student をクラス全員分作成し、管理する必要があるため、構造体の配列を用いてクラス全員のデータを管理しましょう。
作成した構造体は変数ではなく型として扱われます。イメージとしては整数型・文字列型...といったものと同じです。
全ての生徒の情報を受け取ったのち、各生徒を表す構造体の年齢を参照して昇順に並び替えるような処理を実装すれば良いです。


※ソートを自分で行う
クラスで生徒の情報を管理します。
クラスについては「構造体の検索」の解説で詳しく説明しているので、興味のある方はご覧ください。
ここでは、ソートの仕方を説明します。
今回はある範囲内での最小値を見つけ、ソート済みのリストの末尾に追加するソート方法を取っています。
【 ソートの説明 】
まず、n 回繰り返す for 文(0 ≦ i < n)を記述します。
上記の for 文 内で新たに for 文(i < j < n) を書き、2 重ループにします。
i < j < n の範囲で最小値を見つけ出して、インデックス i の要素とすることを繰り返してソートを完了させます。
-- イメージ --
[(ソート済み) (インデックス i) | (ここから最小値を見つけて (インデックス i) の要素とする)]
| が、だんだん右に進む

<別解>
class Student:
    def __init__(self, name, old, birth, state):
        self.name = name
        self.old = old
        self.birth = birth
        self.state = state


n = int(input())

roster = [None] * n
for i in range(n):
    name, old, birth, state = input().split()
    roster[i] = Student(name, int(old), birth, state)

sorted_by_old = sorted(roster, key=lambda x: x.old)

for student in sorted_by_old:
    print(student.name, student.old, student.birth, student.state)
    
ラムダ式を用いる方法です。
ソート自体は sorted 関数を使います。
sorted 関数は、引数で key= を指定することで、「なにを基準に並べ替えるか」を決めることができます。
key=lambda x: x.old とすることで、「roster が保持している Student クラスの old 」を基準に並べ替えるように指定できます。
【 lambda とはなにか 】
lambda は名前をつけないで関数を生成するために使われます。
書き方は lambda 引数: 返り値 になります。
今回の lambda x: x.old は以下の関数を利用することと同等です。
def func(x):
    return x.old
x.old で Student クラスのインスタンスの年齢を取得できるので、key で年齢を指定することができます。
'''

final　構造体の更新
# utf-8
# utf-8
class Student:
    def __init__(self, name, old, birth, state):
        self.name = name
        self.old = old
        self.birth = birth
        self.state = state

    def change_name(self, name):
        self.name = name


n, k = [int(x) for x in input().split()]

roster = [None] * n
for i in range(n):
    name, old, birth, state = input().split()
    roster[i] = Student(name, old, birth, state)

for i in range(k):
    index, new_name = input().split()
    roster[int(index) - 1].change_name(new_name)

for student in roster:
    print(student.name, student.old, student.birth, student.state)
'''
全生徒の情報をまとめた構造体 student の配列を作成し、 changeName に引数として更新後の名前と更新する生徒の構造体を渡して、対象の生徒の名前 = 更新後の名前といった具合に更新を行えば良いです。
これらの処理を行う上で注意しなければならないのが、「値渡し」と「参照渡し」です。宣言した変数がローカルなものである（グローバル変数でない）場合、関数に変数を渡すと、それは値渡しとなります。構造体の宣言はグローバルなものですが、構造体を元として宣言した変数はローカルなものとなります。
値渡しの場合、引数として受け取った変数を更新しても、引数として渡した元の変数は変化しません。そのため、 changeName に構造体を参照渡しする必要があります。参照渡しの使用は言語によって異なるので、自分の使っている言語の文法に従ってください。

クラスを定義して、生徒の情報を管理します。
クラスについては「構造体の検索」の解説で詳しく説明しているので、興味のある方はご覧ください。
クラス内でメソッドを定義する方法は、普段、関数を定義する方法と変わりません。
リストのインデックスは 0 から始まることに注意してください。
'''

<静的メンバ>
step1　クラスの作成
# utf-8
class Employee:
    def __init__(self, number, name):
        self.number = number
        self.name = name

    def getnum(self):
        return self.number

    def getname(self):
        return self.name


n = int(input())

roster = []
for _ in range(n):
    values = input().split()

    query = values[0]
    if query == "make":
        number = int(values[1])
        name = values[2]
        roster.append(Employee(number, name))
    elif query == "getnum":
        index = int(values[1]) - 1
        number = roster[index].getnum()
        print(number)
    else:
        index = int(values[1]) - 1
        name = roster[index].getname()
        print(name)
'''
今回の問題で挙げたクラスとは、構造体にその構造体内の変数を扱う関数を付属したものです。これを用いることで、構造体よりもより大きなものをひとまとめにすることができるようになります。
今回の問題を構造体で解こうとした場合、社員の構造体 employee と、関数 getnum , getname を作成する必要があり、構造体と関数の間の値のやり取りが多くなってしまいます。
クラス内では関数と値の複雑なやり取りをする必要がないため、社員クラスの中に getnum と getname を実装することで、構造体と関数を別に作るよりも簡潔なコードになります。
クラスの作成や宣言の文法は言語によって異なるので、お使いの言語の文法に従ってください。
入力に応じてクラスの関数を呼び出したり、クラスの実体（オブジェクト）を作成することでこの問題を解くことができます。

【 解答の流れ・考え方 】
クラスを用いて従業員の情報を管理します。
クラスについては「構造体の検索」の解説で詳しく説明しているので、興味のある方はご覧ください。
入力に対する応答の箇所は文字列の分割を利用するなどして、必要な情報を抽出する必要があります。
以下の 2 点に注意が必要です。
n は与えられる社員の情報の数ではない
つまり、インスタンスを格納するリストは [None] * n のように初期化することができないので、append メソッドを利用して要素を追加する必要がある
リストのインデックスは 0 から始まる
つまり、i 番目の要素のインデックスは i-1 になる
【 ゲッターを定義せずにプロパティを取得する getattr 】
getnum のようなメソッドをゲッターと呼ぶことがあります。
Python3 では、getattr 関数を用いると、このゲッターを定義せずにプロパティを取得することができます。
使い方は getattr(インスタンス, プロパティ名) です。
具体例として number = roster[index].getnum() を getattr を用いて書き換えることを考えます。
まず、インスタンス は roster[index] です。
次に、プロパティ名 は number です。プロパティ名は文字列で指定することに注意してください。
以上のことに注意して、getattr メソッドを用いて number = roster[index].getnum() の右辺を書き換えると getattr(roster[index], "number") となります。
これで、getnum メソッドを定義しなくてもプロパティ number を取得できます。
name = roster[index].getname() に関しても同様にできるので、やってみてください。
'''

step2　コンストラクタ
step3　クラスのメンバの更新
step4　クラスの継承
step5　デフォルト引数
final　静的メンバ

<ロボットの暴走>
step1　出口のない迷路
step2　RPG
step3　格闘ゲーム
step4  スーパースーパースーパーカー
final　ロボットの暴走
